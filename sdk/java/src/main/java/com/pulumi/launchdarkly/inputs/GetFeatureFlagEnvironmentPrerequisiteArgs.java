// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetFeatureFlagEnvironmentPrerequisiteArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetFeatureFlagEnvironmentPrerequisiteArgs Empty = new GetFeatureFlagEnvironmentPrerequisiteArgs();

    /**
     * The prerequisite feature flag&#39;s `key`.
     * 
     */
    @Import(name="flagKey", required=true)
    private Output<String> flagKey;

    /**
     * @return The prerequisite feature flag&#39;s `key`.
     * 
     */
    public Output<String> flagKey() {
        return this.flagKey;
    }

    /**
     * The integer variation index served when the rule clauses evaluate to `true`.
     * 
     */
    @Import(name="variation", required=true)
    private Output<Integer> variation;

    /**
     * @return The integer variation index served when the rule clauses evaluate to `true`.
     * 
     */
    public Output<Integer> variation() {
        return this.variation;
    }

    private GetFeatureFlagEnvironmentPrerequisiteArgs() {}

    private GetFeatureFlagEnvironmentPrerequisiteArgs(GetFeatureFlagEnvironmentPrerequisiteArgs $) {
        this.flagKey = $.flagKey;
        this.variation = $.variation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFeatureFlagEnvironmentPrerequisiteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFeatureFlagEnvironmentPrerequisiteArgs $;

        public Builder() {
            $ = new GetFeatureFlagEnvironmentPrerequisiteArgs();
        }

        public Builder(GetFeatureFlagEnvironmentPrerequisiteArgs defaults) {
            $ = new GetFeatureFlagEnvironmentPrerequisiteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param flagKey The prerequisite feature flag&#39;s `key`.
         * 
         * @return builder
         * 
         */
        public Builder flagKey(Output<String> flagKey) {
            $.flagKey = flagKey;
            return this;
        }

        /**
         * @param flagKey The prerequisite feature flag&#39;s `key`.
         * 
         * @return builder
         * 
         */
        public Builder flagKey(String flagKey) {
            return flagKey(Output.of(flagKey));
        }

        /**
         * @param variation The integer variation index served when the rule clauses evaluate to `true`.
         * 
         * @return builder
         * 
         */
        public Builder variation(Output<Integer> variation) {
            $.variation = variation;
            return this;
        }

        /**
         * @param variation The integer variation index served when the rule clauses evaluate to `true`.
         * 
         * @return builder
         * 
         */
        public Builder variation(Integer variation) {
            return variation(Output.of(variation));
        }

        public GetFeatureFlagEnvironmentPrerequisiteArgs build() {
            $.flagKey = Objects.requireNonNull($.flagKey, "expected parameter 'flagKey' to be non-null");
            $.variation = Objects.requireNonNull($.variation, "expected parameter 'variation' to be non-null");
            return $;
        }
    }

}
