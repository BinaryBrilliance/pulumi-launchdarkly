// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.GetEnvironmentApprovalSetting;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetEnvironmentPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetEnvironmentPlainArgs Empty = new GetEnvironmentPlainArgs();

    @Import(name="approvalSettings")
    private @Nullable List<GetEnvironmentApprovalSetting> approvalSettings;

    public Optional<List<GetEnvironmentApprovalSetting>> approvalSettings() {
        return Optional.ofNullable(this.approvalSettings);
    }

    /**
     * A value of `true` indicates that this environment requires confirmation for flag and segment changes.
     * 
     */
    @Import(name="confirmChanges")
    private @Nullable Boolean confirmChanges;

    /**
     * @return A value of `true` indicates that this environment requires confirmation for flag and segment changes.
     * 
     */
    public Optional<Boolean> confirmChanges() {
        return Optional.ofNullable(this.confirmChanges);
    }

    /**
     * A value of `true` enables data export for every flag created in this environment. To learn more, read [Data Export](https://docs.launchdarkly.com/home/data-export).
     * 
     */
    @Import(name="defaultTrackEvents")
    private @Nullable Boolean defaultTrackEvents;

    /**
     * @return A value of `true` enables data export for every flag created in this environment. To learn more, read [Data Export](https://docs.launchdarkly.com/home/data-export).
     * 
     */
    public Optional<Boolean> defaultTrackEvents() {
        return Optional.ofNullable(this.defaultTrackEvents);
    }

    /**
     * The TTL for the environment. This will be a numeric value between 0 and 60 in minutes. The TTL setting only applies to environments using the PHP SDK. To learn more, read [TTL settings](https://docs.launchdarkly.com/home/organize/environments#ttl-settings).
     * 
     */
    @Import(name="defaultTtl")
    private @Nullable Integer defaultTtl;

    /**
     * @return The TTL for the environment. This will be a numeric value between 0 and 60 in minutes. The TTL setting only applies to environments using the PHP SDK. To learn more, read [TTL settings](https://docs.launchdarkly.com/home/organize/environments#ttl-settings).
     * 
     */
    public Optional<Integer> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }

    /**
     * The environment&#39;s unique key.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return The environment&#39;s unique key.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * The environment&#39;s project key.
     * 
     */
    @Import(name="projectKey", required=true)
    private String projectKey;

    /**
     * @return The environment&#39;s project key.
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }

    /**
     * A value of `true` indicates that this environment requires comments for flag and segment changes.
     * 
     */
    @Import(name="requireComments")
    private @Nullable Boolean requireComments;

    /**
     * @return A value of `true` indicates that this environment requires comments for flag and segment changes.
     * 
     */
    public Optional<Boolean> requireComments() {
        return Optional.ofNullable(this.requireComments);
    }

    /**
     * A value of true `true` ensures a user of the client-side SDK cannot impersonate another user.
     * 
     */
    @Import(name="secureMode")
    private @Nullable Boolean secureMode;

    /**
     * @return A value of true `true` ensures a user of the client-side SDK cannot impersonate another user.
     * 
     */
    public Optional<Boolean> secureMode() {
        return Optional.ofNullable(this.secureMode);
    }

    /**
     * Set of tags associated with the environment.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return Set of tags associated with the environment.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetEnvironmentPlainArgs() {}

    private GetEnvironmentPlainArgs(GetEnvironmentPlainArgs $) {
        this.approvalSettings = $.approvalSettings;
        this.confirmChanges = $.confirmChanges;
        this.defaultTrackEvents = $.defaultTrackEvents;
        this.defaultTtl = $.defaultTtl;
        this.key = $.key;
        this.projectKey = $.projectKey;
        this.requireComments = $.requireComments;
        this.secureMode = $.secureMode;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEnvironmentPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEnvironmentPlainArgs $;

        public Builder() {
            $ = new GetEnvironmentPlainArgs();
        }

        public Builder(GetEnvironmentPlainArgs defaults) {
            $ = new GetEnvironmentPlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder approvalSettings(@Nullable List<GetEnvironmentApprovalSetting> approvalSettings) {
            $.approvalSettings = approvalSettings;
            return this;
        }

        public Builder approvalSettings(GetEnvironmentApprovalSetting... approvalSettings) {
            return approvalSettings(List.of(approvalSettings));
        }

        /**
         * @param confirmChanges A value of `true` indicates that this environment requires confirmation for flag and segment changes.
         * 
         * @return builder
         * 
         */
        public Builder confirmChanges(@Nullable Boolean confirmChanges) {
            $.confirmChanges = confirmChanges;
            return this;
        }

        /**
         * @param defaultTrackEvents A value of `true` enables data export for every flag created in this environment. To learn more, read [Data Export](https://docs.launchdarkly.com/home/data-export).
         * 
         * @return builder
         * 
         */
        public Builder defaultTrackEvents(@Nullable Boolean defaultTrackEvents) {
            $.defaultTrackEvents = defaultTrackEvents;
            return this;
        }

        /**
         * @param defaultTtl The TTL for the environment. This will be a numeric value between 0 and 60 in minutes. The TTL setting only applies to environments using the PHP SDK. To learn more, read [TTL settings](https://docs.launchdarkly.com/home/organize/environments#ttl-settings).
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(@Nullable Integer defaultTtl) {
            $.defaultTtl = defaultTtl;
            return this;
        }

        /**
         * @param key The environment&#39;s unique key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param projectKey The environment&#39;s project key.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param requireComments A value of `true` indicates that this environment requires comments for flag and segment changes.
         * 
         * @return builder
         * 
         */
        public Builder requireComments(@Nullable Boolean requireComments) {
            $.requireComments = requireComments;
            return this;
        }

        /**
         * @param secureMode A value of true `true` ensures a user of the client-side SDK cannot impersonate another user.
         * 
         * @return builder
         * 
         */
        public Builder secureMode(@Nullable Boolean secureMode) {
            $.secureMode = secureMode;
            return this;
        }

        /**
         * @param tags Set of tags associated with the environment.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Set of tags associated with the environment.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GetEnvironmentPlainArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            return $;
        }
    }

}
