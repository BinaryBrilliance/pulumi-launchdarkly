// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.GetFeatureFlagEnvironmentFallthrough;
import com.pulumi.launchdarkly.inputs.GetFeatureFlagEnvironmentPrerequisite;
import com.pulumi.launchdarkly.inputs.GetFeatureFlagEnvironmentRule;
import com.pulumi.launchdarkly.inputs.GetFeatureFlagEnvironmentTarget;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFeatureFlagEnvironmentPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFeatureFlagEnvironmentPlainArgs Empty = new GetFeatureFlagEnvironmentPlainArgs();

    /**
     * The environment key.
     * 
     */
    @Import(name="envKey", required=true)
    private String envKey;

    /**
     * @return The environment key.
     * 
     */
    public String envKey() {
        return this.envKey;
    }

    @Import(name="fallthrough")
    private @Nullable GetFeatureFlagEnvironmentFallthrough fallthrough;

    public Optional<GetFeatureFlagEnvironmentFallthrough> fallthrough() {
        return Optional.ofNullable(this.fallthrough);
    }

    /**
     * The feature flag&#39;s unique `id` in the format `project_key/flag_key`.
     * 
     */
    @Import(name="flagId", required=true)
    private String flagId;

    /**
     * @return The feature flag&#39;s unique `id` in the format `project_key/flag_key`.
     * 
     */
    public String flagId() {
        return this.flagId;
    }

    /**
     * The index of the variation served when targeting is disabled.
     * 
     */
    @Import(name="offVariation")
    private @Nullable Integer offVariation;

    /**
     * @return The index of the variation served when targeting is disabled.
     * 
     */
    public Optional<Integer> offVariation() {
        return Optional.ofNullable(this.offVariation);
    }

    /**
     * Whether targeting is enabled.
     * 
     */
    @Import(name="on")
    private @Nullable Boolean on;

    /**
     * @return Whether targeting is enabled.
     * 
     */
    public Optional<Boolean> on() {
        return Optional.ofNullable(this.on);
    }

    /**
     * List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     * 
     */
    @Import(name="prerequisites")
    private @Nullable List<GetFeatureFlagEnvironmentPrerequisite> prerequisites;

    /**
     * @return List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     * 
     */
    public Optional<List<GetFeatureFlagEnvironmentPrerequisite>> prerequisites() {
        return Optional.ofNullable(this.prerequisites);
    }

    /**
     * List of logical targeting rules. To learn more, read Nested Rules Blocks.
     * 
     */
    @Import(name="rules")
    private @Nullable List<GetFeatureFlagEnvironmentRule> rules;

    /**
     * @return List of logical targeting rules. To learn more, read Nested Rules Blocks.
     * 
     */
    public Optional<List<GetFeatureFlagEnvironmentRule>> rules() {
        return Optional.ofNullable(this.rules);
    }

    @Import(name="targets")
    private @Nullable List<GetFeatureFlagEnvironmentTarget> targets;

    public Optional<List<GetFeatureFlagEnvironmentTarget>> targets() {
        return Optional.ofNullable(this.targets);
    }

    /**
     * Whether event data will be sent back to LaunchDarkly.
     * 
     */
    @Import(name="trackEvents")
    private @Nullable Boolean trackEvents;

    /**
     * @return Whether event data will be sent back to LaunchDarkly.
     * 
     */
    public Optional<Boolean> trackEvents() {
        return Optional.ofNullable(this.trackEvents);
    }

    private GetFeatureFlagEnvironmentPlainArgs() {}

    private GetFeatureFlagEnvironmentPlainArgs(GetFeatureFlagEnvironmentPlainArgs $) {
        this.envKey = $.envKey;
        this.fallthrough = $.fallthrough;
        this.flagId = $.flagId;
        this.offVariation = $.offVariation;
        this.on = $.on;
        this.prerequisites = $.prerequisites;
        this.rules = $.rules;
        this.targets = $.targets;
        this.trackEvents = $.trackEvents;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFeatureFlagEnvironmentPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFeatureFlagEnvironmentPlainArgs $;

        public Builder() {
            $ = new GetFeatureFlagEnvironmentPlainArgs();
        }

        public Builder(GetFeatureFlagEnvironmentPlainArgs defaults) {
            $ = new GetFeatureFlagEnvironmentPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param envKey The environment key.
         * 
         * @return builder
         * 
         */
        public Builder envKey(String envKey) {
            $.envKey = envKey;
            return this;
        }

        public Builder fallthrough(@Nullable GetFeatureFlagEnvironmentFallthrough fallthrough) {
            $.fallthrough = fallthrough;
            return this;
        }

        /**
         * @param flagId The feature flag&#39;s unique `id` in the format `project_key/flag_key`.
         * 
         * @return builder
         * 
         */
        public Builder flagId(String flagId) {
            $.flagId = flagId;
            return this;
        }

        /**
         * @param offVariation The index of the variation served when targeting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder offVariation(@Nullable Integer offVariation) {
            $.offVariation = offVariation;
            return this;
        }

        /**
         * @param on Whether targeting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder on(@Nullable Boolean on) {
            $.on = on;
            return this;
        }

        /**
         * @param prerequisites List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
         * 
         * @return builder
         * 
         */
        public Builder prerequisites(@Nullable List<GetFeatureFlagEnvironmentPrerequisite> prerequisites) {
            $.prerequisites = prerequisites;
            return this;
        }

        /**
         * @param prerequisites List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
         * 
         * @return builder
         * 
         */
        public Builder prerequisites(GetFeatureFlagEnvironmentPrerequisite... prerequisites) {
            return prerequisites(List.of(prerequisites));
        }

        /**
         * @param rules List of logical targeting rules. To learn more, read Nested Rules Blocks.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable List<GetFeatureFlagEnvironmentRule> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules List of logical targeting rules. To learn more, read Nested Rules Blocks.
         * 
         * @return builder
         * 
         */
        public Builder rules(GetFeatureFlagEnvironmentRule... rules) {
            return rules(List.of(rules));
        }

        public Builder targets(@Nullable List<GetFeatureFlagEnvironmentTarget> targets) {
            $.targets = targets;
            return this;
        }

        public Builder targets(GetFeatureFlagEnvironmentTarget... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param trackEvents Whether event data will be sent back to LaunchDarkly.
         * 
         * @return builder
         * 
         */
        public Builder trackEvents(@Nullable Boolean trackEvents) {
            $.trackEvents = trackEvents;
            return this;
        }

        public GetFeatureFlagEnvironmentPlainArgs build() {
            $.envKey = Objects.requireNonNull($.envKey, "expected parameter 'envKey' to be non-null");
            $.flagId = Objects.requireNonNull($.flagId, "expected parameter 'flagId' to be non-null");
            return $;
        }
    }

}
