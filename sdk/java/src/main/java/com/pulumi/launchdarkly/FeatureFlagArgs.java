// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.FeatureFlagClientSideAvailabilityArgs;
import com.pulumi.launchdarkly.inputs.FeatureFlagCustomPropertyArgs;
import com.pulumi.launchdarkly.inputs.FeatureFlagDefaultsArgs;
import com.pulumi.launchdarkly.inputs.FeatureFlagVariationArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureFlagArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureFlagArgs Empty = new FeatureFlagArgs();

    /**
     * Whether to archive the flag
     * 
     */
    @Import(name="archived")
    private @Nullable Output<Boolean> archived;

    /**
     * @return Whether to archive the flag
     * 
     */
    public Optional<Output<Boolean>> archived() {
        return Optional.ofNullable(this.archived);
    }

    /**
     * A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
     * 
     */
    @Import(name="clientSideAvailabilities")
    private @Nullable Output<List<FeatureFlagClientSideAvailabilityArgs>> clientSideAvailabilities;

    /**
     * @return A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
     * 
     */
    public Optional<Output<List<FeatureFlagClientSideAvailabilityArgs>>> clientSideAvailabilities() {
        return Optional.ofNullable(this.clientSideAvailabilities);
    }

    /**
     * List of nested blocks describing the feature flag&#39;s [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
     * 
     */
    @Import(name="customProperties")
    private @Nullable Output<List<FeatureFlagCustomPropertyArgs>> customProperties;

    /**
     * @return List of nested blocks describing the feature flag&#39;s [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
     * 
     */
    public Optional<Output<List<FeatureFlagCustomPropertyArgs>>> customProperties() {
        return Optional.ofNullable(this.customProperties);
    }

    /**
     * A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
     * 
     */
    @Import(name="defaults")
    private @Nullable Output<FeatureFlagDefaultsArgs> defaults;

    /**
     * @return A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
     * 
     */
    public Optional<Output<FeatureFlagDefaultsArgs>> defaults() {
        return Optional.ofNullable(this.defaults);
    }

    /**
     * The feature flag&#39;s description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The feature flag&#39;s description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * **Deprecated** (Optional) Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatability.
     * 
     * @deprecated
     * &#39;include_in_snippet&#39; is now deprecated. Please migrate to &#39;client_side_availability&#39; to maintain future compatability.
     * 
     */
    @Deprecated /* 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability. */
    @Import(name="includeInSnippet")
    private @Nullable Output<Boolean> includeInSnippet;

    /**
     * @return **Deprecated** (Optional) Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatability.
     * 
     * @deprecated
     * &#39;include_in_snippet&#39; is now deprecated. Please migrate to &#39;client_side_availability&#39; to maintain future compatability.
     * 
     */
    @Deprecated /* 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability. */
    public Optional<Output<Boolean>> includeInSnippet() {
        return Optional.ofNullable(this.includeInSnippet);
    }

    /**
     * The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The LaunchDarkly id of the user who will maintain the flag. If not set, the API will automatically apply the member
     * associated with your Terraform API key or the most recently set maintainer
     * 
     */
    @Import(name="maintainerId")
    private @Nullable Output<String> maintainerId;

    /**
     * @return The LaunchDarkly id of the user who will maintain the flag. If not set, the API will automatically apply the member
     * associated with your Terraform API key or the most recently set maintainer
     * 
     */
    public Optional<Output<String>> maintainerId() {
        return Optional.ofNullable(this.maintainerId);
    }

    /**
     * The human-readable name of the feature flag.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The human-readable name of the feature flag.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The feature flag&#39;s project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Import(name="projectKey", required=true)
    private Output<String> projectKey;

    /**
     * @return The feature flag&#39;s project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Output<String> projectKey() {
        return this.projectKey;
    }

    /**
     * Set of feature flag tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Set of feature flag tags.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies whether the flag is a temporary flag.
     * 
     */
    @Import(name="temporary")
    private @Nullable Output<Boolean> temporary;

    /**
     * @return Specifies whether the flag is a temporary flag.
     * 
     */
    public Optional<Output<Boolean>> temporary() {
        return Optional.ofNullable(this.temporary);
    }

    /**
     * The feature flag&#39;s variation type: `boolean`, `string`, `number` or `json`.
     * 
     */
    @Import(name="variationType", required=true)
    private Output<String> variationType;

    /**
     * @return The feature flag&#39;s variation type: `boolean`, `string`, `number` or `json`.
     * 
     */
    public Output<String> variationType() {
        return this.variationType;
    }

    /**
     * List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
     * 
     */
    @Import(name="variations")
    private @Nullable Output<List<FeatureFlagVariationArgs>> variations;

    /**
     * @return List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
     * 
     */
    public Optional<Output<List<FeatureFlagVariationArgs>>> variations() {
        return Optional.ofNullable(this.variations);
    }

    private FeatureFlagArgs() {}

    private FeatureFlagArgs(FeatureFlagArgs $) {
        this.archived = $.archived;
        this.clientSideAvailabilities = $.clientSideAvailabilities;
        this.customProperties = $.customProperties;
        this.defaults = $.defaults;
        this.description = $.description;
        this.includeInSnippet = $.includeInSnippet;
        this.key = $.key;
        this.maintainerId = $.maintainerId;
        this.name = $.name;
        this.projectKey = $.projectKey;
        this.tags = $.tags;
        this.temporary = $.temporary;
        this.variationType = $.variationType;
        this.variations = $.variations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureFlagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureFlagArgs $;

        public Builder() {
            $ = new FeatureFlagArgs();
        }

        public Builder(FeatureFlagArgs defaults) {
            $ = new FeatureFlagArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archived Whether to archive the flag
         * 
         * @return builder
         * 
         */
        public Builder archived(@Nullable Output<Boolean> archived) {
            $.archived = archived;
            return this;
        }

        /**
         * @param archived Whether to archive the flag
         * 
         * @return builder
         * 
         */
        public Builder archived(Boolean archived) {
            return archived(Output.of(archived));
        }

        /**
         * @param clientSideAvailabilities A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
         * 
         * @return builder
         * 
         */
        public Builder clientSideAvailabilities(@Nullable Output<List<FeatureFlagClientSideAvailabilityArgs>> clientSideAvailabilities) {
            $.clientSideAvailabilities = clientSideAvailabilities;
            return this;
        }

        /**
         * @param clientSideAvailabilities A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
         * 
         * @return builder
         * 
         */
        public Builder clientSideAvailabilities(List<FeatureFlagClientSideAvailabilityArgs> clientSideAvailabilities) {
            return clientSideAvailabilities(Output.of(clientSideAvailabilities));
        }

        /**
         * @param clientSideAvailabilities A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
         * 
         * @return builder
         * 
         */
        public Builder clientSideAvailabilities(FeatureFlagClientSideAvailabilityArgs... clientSideAvailabilities) {
            return clientSideAvailabilities(List.of(clientSideAvailabilities));
        }

        /**
         * @param customProperties List of nested blocks describing the feature flag&#39;s [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
         * 
         * @return builder
         * 
         */
        public Builder customProperties(@Nullable Output<List<FeatureFlagCustomPropertyArgs>> customProperties) {
            $.customProperties = customProperties;
            return this;
        }

        /**
         * @param customProperties List of nested blocks describing the feature flag&#39;s [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
         * 
         * @return builder
         * 
         */
        public Builder customProperties(List<FeatureFlagCustomPropertyArgs> customProperties) {
            return customProperties(Output.of(customProperties));
        }

        /**
         * @param customProperties List of nested blocks describing the feature flag&#39;s [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
         * 
         * @return builder
         * 
         */
        public Builder customProperties(FeatureFlagCustomPropertyArgs... customProperties) {
            return customProperties(List.of(customProperties));
        }

        /**
         * @param defaults A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
         * 
         * @return builder
         * 
         */
        public Builder defaults(@Nullable Output<FeatureFlagDefaultsArgs> defaults) {
            $.defaults = defaults;
            return this;
        }

        /**
         * @param defaults A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
         * 
         * @return builder
         * 
         */
        public Builder defaults(FeatureFlagDefaultsArgs defaults) {
            return defaults(Output.of(defaults));
        }

        /**
         * @param description The feature flag&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The feature flag&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param includeInSnippet **Deprecated** (Optional) Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatability.
         * 
         * @return builder
         * 
         * @deprecated
         * &#39;include_in_snippet&#39; is now deprecated. Please migrate to &#39;client_side_availability&#39; to maintain future compatability.
         * 
         */
        @Deprecated /* 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability. */
        public Builder includeInSnippet(@Nullable Output<Boolean> includeInSnippet) {
            $.includeInSnippet = includeInSnippet;
            return this;
        }

        /**
         * @param includeInSnippet **Deprecated** (Optional) Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatability.
         * 
         * @return builder
         * 
         * @deprecated
         * &#39;include_in_snippet&#39; is now deprecated. Please migrate to &#39;client_side_availability&#39; to maintain future compatability.
         * 
         */
        @Deprecated /* 'include_in_snippet' is now deprecated. Please migrate to 'client_side_availability' to maintain future compatability. */
        public Builder includeInSnippet(Boolean includeInSnippet) {
            return includeInSnippet(Output.of(includeInSnippet));
        }

        /**
         * @param key The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param maintainerId The LaunchDarkly id of the user who will maintain the flag. If not set, the API will automatically apply the member
         * associated with your Terraform API key or the most recently set maintainer
         * 
         * @return builder
         * 
         */
        public Builder maintainerId(@Nullable Output<String> maintainerId) {
            $.maintainerId = maintainerId;
            return this;
        }

        /**
         * @param maintainerId The LaunchDarkly id of the user who will maintain the flag. If not set, the API will automatically apply the member
         * associated with your Terraform API key or the most recently set maintainer
         * 
         * @return builder
         * 
         */
        public Builder maintainerId(String maintainerId) {
            return maintainerId(Output.of(maintainerId));
        }

        /**
         * @param name The human-readable name of the feature flag.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The human-readable name of the feature flag.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectKey The feature flag&#39;s project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey The feature flag&#39;s project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param tags Set of feature flag tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Set of feature flag tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Set of feature flag tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param temporary Specifies whether the flag is a temporary flag.
         * 
         * @return builder
         * 
         */
        public Builder temporary(@Nullable Output<Boolean> temporary) {
            $.temporary = temporary;
            return this;
        }

        /**
         * @param temporary Specifies whether the flag is a temporary flag.
         * 
         * @return builder
         * 
         */
        public Builder temporary(Boolean temporary) {
            return temporary(Output.of(temporary));
        }

        /**
         * @param variationType The feature flag&#39;s variation type: `boolean`, `string`, `number` or `json`.
         * 
         * @return builder
         * 
         */
        public Builder variationType(Output<String> variationType) {
            $.variationType = variationType;
            return this;
        }

        /**
         * @param variationType The feature flag&#39;s variation type: `boolean`, `string`, `number` or `json`.
         * 
         * @return builder
         * 
         */
        public Builder variationType(String variationType) {
            return variationType(Output.of(variationType));
        }

        /**
         * @param variations List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
         * 
         * @return builder
         * 
         */
        public Builder variations(@Nullable Output<List<FeatureFlagVariationArgs>> variations) {
            $.variations = variations;
            return this;
        }

        /**
         * @param variations List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
         * 
         * @return builder
         * 
         */
        public Builder variations(List<FeatureFlagVariationArgs> variations) {
            return variations(Output.of(variations));
        }

        /**
         * @param variations List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
         * 
         * @return builder
         * 
         */
        public Builder variations(FeatureFlagVariationArgs... variations) {
            return variations(List.of(variations));
        }

        public FeatureFlagArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            $.variationType = Objects.requireNonNull($.variationType, "expected parameter 'variationType' to be non-null");
            return $;
        }
    }

}
