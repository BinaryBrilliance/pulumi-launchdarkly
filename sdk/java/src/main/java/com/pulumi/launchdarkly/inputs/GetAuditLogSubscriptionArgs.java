// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.GetAuditLogSubscriptionStatementArgs;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAuditLogSubscriptionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAuditLogSubscriptionArgs Empty = new GetAuditLogSubscriptionArgs();

    /**
     * A block of configuration fields associated with your integration type.
     * 
     */
    @Import(name="config")
    private @Nullable Output<Map<String,Object>> config;

    /**
     * @return A block of configuration fields associated with your integration type.
     * 
     */
    public Optional<Output<Map<String,Object>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The integration key. As of February 2022, supported integrations are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;elastic&#34;`, `&#34;honeycomb&#34;`, `&#34;logdna&#34;`, `&#34;msteams&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, `&#34;slack&#34;`, and `&#34;splunk&#34;`.
     * 
     */
    @Import(name="integrationKey", required=true)
    private Output<String> integrationKey;

    /**
     * @return The integration key. As of February 2022, supported integrations are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;elastic&#34;`, `&#34;honeycomb&#34;`, `&#34;logdna&#34;`, `&#34;msteams&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, `&#34;slack&#34;`, and `&#34;splunk&#34;`.
     * 
     */
    public Output<String> integrationKey() {
        return this.integrationKey;
    }

    /**
     * The subscription&#39;s human-readable name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The subscription&#39;s human-readable name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the subscription is enabled.
     * 
     */
    @Import(name="on")
    private @Nullable Output<Boolean> on;

    /**
     * @return Whether the subscription is enabled.
     * 
     */
    public Optional<Output<Boolean>> on() {
        return Optional.ofNullable(this.on);
    }

    /**
     * The statement block used to filter subscription events. To learn more, read Statement Blocks.
     * 
     */
    @Import(name="statements")
    private @Nullable Output<List<GetAuditLogSubscriptionStatementArgs>> statements;

    /**
     * @return The statement block used to filter subscription events. To learn more, read Statement Blocks.
     * 
     */
    public Optional<Output<List<GetAuditLogSubscriptionStatementArgs>>> statements() {
        return Optional.ofNullable(this.statements);
    }

    /**
     * Set of tags associated with the subscription.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Set of tags associated with the subscription.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetAuditLogSubscriptionArgs() {}

    private GetAuditLogSubscriptionArgs(GetAuditLogSubscriptionArgs $) {
        this.config = $.config;
        this.id = $.id;
        this.integrationKey = $.integrationKey;
        this.name = $.name;
        this.on = $.on;
        this.statements = $.statements;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAuditLogSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAuditLogSubscriptionArgs $;

        public Builder() {
            $ = new GetAuditLogSubscriptionArgs();
        }

        public Builder(GetAuditLogSubscriptionArgs defaults) {
            $ = new GetAuditLogSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param config A block of configuration fields associated with your integration type.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<Map<String,Object>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config A block of configuration fields associated with your integration type.
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,Object> config) {
            return config(Output.of(config));
        }

        /**
         * @param id The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param integrationKey The integration key. As of February 2022, supported integrations are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;elastic&#34;`, `&#34;honeycomb&#34;`, `&#34;logdna&#34;`, `&#34;msteams&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, `&#34;slack&#34;`, and `&#34;splunk&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        /**
         * @param integrationKey The integration key. As of February 2022, supported integrations are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;elastic&#34;`, `&#34;honeycomb&#34;`, `&#34;logdna&#34;`, `&#34;msteams&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, `&#34;slack&#34;`, and `&#34;splunk&#34;`.
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        /**
         * @param name The subscription&#39;s human-readable name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The subscription&#39;s human-readable name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param on Whether the subscription is enabled.
         * 
         * @return builder
         * 
         */
        public Builder on(@Nullable Output<Boolean> on) {
            $.on = on;
            return this;
        }

        /**
         * @param on Whether the subscription is enabled.
         * 
         * @return builder
         * 
         */
        public Builder on(Boolean on) {
            return on(Output.of(on));
        }

        /**
         * @param statements The statement block used to filter subscription events. To learn more, read Statement Blocks.
         * 
         * @return builder
         * 
         */
        public Builder statements(@Nullable Output<List<GetAuditLogSubscriptionStatementArgs>> statements) {
            $.statements = statements;
            return this;
        }

        /**
         * @param statements The statement block used to filter subscription events. To learn more, read Statement Blocks.
         * 
         * @return builder
         * 
         */
        public Builder statements(List<GetAuditLogSubscriptionStatementArgs> statements) {
            return statements(Output.of(statements));
        }

        /**
         * @param statements The statement block used to filter subscription events. To learn more, read Statement Blocks.
         * 
         * @return builder
         * 
         */
        public Builder statements(GetAuditLogSubscriptionStatementArgs... statements) {
            return statements(List.of(statements));
        }

        /**
         * @param tags Set of tags associated with the subscription.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Set of tags associated with the subscription.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Set of tags associated with the subscription.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GetAuditLogSubscriptionArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.integrationKey = Objects.requireNonNull($.integrationKey, "expected parameter 'integrationKey' to be non-null");
            return $;
        }
    }

}
