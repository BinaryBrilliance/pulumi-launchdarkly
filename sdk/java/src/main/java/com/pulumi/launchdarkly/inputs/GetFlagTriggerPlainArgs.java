// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.GetFlagTriggerInstructions;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFlagTriggerPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetFlagTriggerPlainArgs Empty = new GetFlagTriggerPlainArgs();

    /**
     * Whether the trigger is currently active or not.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Whether the trigger is currently active or not.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The unique key of the environment the flag trigger will work in.
     * 
     */
    @Import(name="envKey", required=true)
    private String envKey;

    /**
     * @return The unique key of the environment the flag trigger will work in.
     * 
     */
    public String envKey() {
        return this.envKey;
    }

    /**
     * The unique key of the associated flag.
     * 
     */
    @Import(name="flagKey", required=true)
    private String flagKey;

    /**
     * @return The unique key of the associated flag.
     * 
     */
    public String flagKey() {
        return this.flagKey;
    }

    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `&#34;turnFlagOn&#34;` and `&#34;turnFlagOff&#34;`. These can be found on the `kind` field nested on the `instructions` attribute.
     * 
     */
    @Import(name="instructions")
    private @Nullable GetFlagTriggerInstructions instructions;

    /**
     * @return Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `&#34;turnFlagOn&#34;` and `&#34;turnFlagOff&#34;`. These can be found on the `kind` field nested on the `instructions` attribute.
     * 
     */
    public Optional<GetFlagTriggerInstructions> instructions() {
        return Optional.ofNullable(this.instructions);
    }

    /**
     * The unique identifier of the integration your trigger is set up with.
     * 
     */
    @Import(name="integrationKey")
    private @Nullable String integrationKey;

    /**
     * @return The unique identifier of the integration your trigger is set up with.
     * 
     */
    public Optional<String> integrationKey() {
        return Optional.ofNullable(this.integrationKey);
    }

    /**
     * The unique key of the project encompassing the associated flag.
     * 
     */
    @Import(name="projectKey", required=true)
    private String projectKey;

    /**
     * @return The unique key of the project encompassing the associated flag.
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }

    private GetFlagTriggerPlainArgs() {}

    private GetFlagTriggerPlainArgs(GetFlagTriggerPlainArgs $) {
        this.enabled = $.enabled;
        this.envKey = $.envKey;
        this.flagKey = $.flagKey;
        this.id = $.id;
        this.instructions = $.instructions;
        this.integrationKey = $.integrationKey;
        this.projectKey = $.projectKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFlagTriggerPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFlagTriggerPlainArgs $;

        public Builder() {
            $ = new GetFlagTriggerPlainArgs();
        }

        public Builder(GetFlagTriggerPlainArgs defaults) {
            $ = new GetFlagTriggerPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether the trigger is currently active or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param envKey The unique key of the environment the flag trigger will work in.
         * 
         * @return builder
         * 
         */
        public Builder envKey(String envKey) {
            $.envKey = envKey;
            return this;
        }

        /**
         * @param flagKey The unique key of the associated flag.
         * 
         * @return builder
         * 
         */
        public Builder flagKey(String flagKey) {
            $.flagKey = flagKey;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param instructions Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `&#34;turnFlagOn&#34;` and `&#34;turnFlagOff&#34;`. These can be found on the `kind` field nested on the `instructions` attribute.
         * 
         * @return builder
         * 
         */
        public Builder instructions(@Nullable GetFlagTriggerInstructions instructions) {
            $.instructions = instructions;
            return this;
        }

        /**
         * @param integrationKey The unique identifier of the integration your trigger is set up with.
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(@Nullable String integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        /**
         * @param projectKey The unique key of the project encompassing the associated flag.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        public GetFlagTriggerPlainArgs build() {
            $.envKey = Objects.requireNonNull($.envKey, "expected parameter 'envKey' to be non-null");
            $.flagKey = Objects.requireNonNull($.flagKey, "expected parameter 'flagKey' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            return $;
        }
    }

}
