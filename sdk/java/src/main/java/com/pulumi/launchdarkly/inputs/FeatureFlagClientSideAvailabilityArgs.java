// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FeatureFlagClientSideAvailabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final FeatureFlagClientSideAvailabilityArgs Empty = new FeatureFlagClientSideAvailabilityArgs();

    /**
     * Whether this flag is available to SDKs using the client-side ID.
     * 
     */
    @Import(name="usingEnvironmentId")
    private @Nullable Output<Boolean> usingEnvironmentId;

    /**
     * @return Whether this flag is available to SDKs using the client-side ID.
     * 
     */
    public Optional<Output<Boolean>> usingEnvironmentId() {
        return Optional.ofNullable(this.usingEnvironmentId);
    }

    /**
     * Whether this flag is available to SDKs using a mobile key.
     * 
     */
    @Import(name="usingMobileKey")
    private @Nullable Output<Boolean> usingMobileKey;

    /**
     * @return Whether this flag is available to SDKs using a mobile key.
     * 
     */
    public Optional<Output<Boolean>> usingMobileKey() {
        return Optional.ofNullable(this.usingMobileKey);
    }

    private FeatureFlagClientSideAvailabilityArgs() {}

    private FeatureFlagClientSideAvailabilityArgs(FeatureFlagClientSideAvailabilityArgs $) {
        this.usingEnvironmentId = $.usingEnvironmentId;
        this.usingMobileKey = $.usingMobileKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FeatureFlagClientSideAvailabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FeatureFlagClientSideAvailabilityArgs $;

        public Builder() {
            $ = new FeatureFlagClientSideAvailabilityArgs();
        }

        public Builder(FeatureFlagClientSideAvailabilityArgs defaults) {
            $ = new FeatureFlagClientSideAvailabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param usingEnvironmentId Whether this flag is available to SDKs using the client-side ID.
         * 
         * @return builder
         * 
         */
        public Builder usingEnvironmentId(@Nullable Output<Boolean> usingEnvironmentId) {
            $.usingEnvironmentId = usingEnvironmentId;
            return this;
        }

        /**
         * @param usingEnvironmentId Whether this flag is available to SDKs using the client-side ID.
         * 
         * @return builder
         * 
         */
        public Builder usingEnvironmentId(Boolean usingEnvironmentId) {
            return usingEnvironmentId(Output.of(usingEnvironmentId));
        }

        /**
         * @param usingMobileKey Whether this flag is available to SDKs using a mobile key.
         * 
         * @return builder
         * 
         */
        public Builder usingMobileKey(@Nullable Output<Boolean> usingMobileKey) {
            $.usingMobileKey = usingMobileKey;
            return this;
        }

        /**
         * @param usingMobileKey Whether this flag is available to SDKs using a mobile key.
         * 
         * @return builder
         * 
         */
        public Builder usingMobileKey(Boolean usingMobileKey) {
            return usingMobileKey(Output.of(usingMobileKey));
        }

        public FeatureFlagClientSideAvailabilityArgs build() {
            return $;
        }
    }

}
