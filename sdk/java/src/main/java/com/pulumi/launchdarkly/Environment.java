// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.launchdarkly.EnvironmentArgs;
import com.pulumi.launchdarkly.Utilities;
import com.pulumi.launchdarkly.inputs.EnvironmentState;
import com.pulumi.launchdarkly.outputs.EnvironmentApprovalSetting;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.launchdarkly.Environment;
 * import com.pulumi.launchdarkly.EnvironmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var staging = new Environment(&#34;staging&#34;, EnvironmentArgs.builder()        
 *             .key(&#34;staging&#34;)
 *             .color(&#34;ff00ff&#34;)
 *             .tags(            
 *                 &#34;terraform&#34;,
 *                 &#34;staging&#34;)
 *             .projectKey(launchdarkly_project.example().key())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.launchdarkly.Environment;
 * import com.pulumi.launchdarkly.EnvironmentArgs;
 * import com.pulumi.launchdarkly.inputs.EnvironmentApprovalSettingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var approvalsExample = new Environment(&#34;approvalsExample&#34;, EnvironmentArgs.builder()        
 *             .key(&#34;approvals-example&#34;)
 *             .color(&#34;ff00ff&#34;)
 *             .tags(            
 *                 &#34;terraform&#34;,
 *                 &#34;staging&#34;)
 *             .approvalSettings(EnvironmentApprovalSettingArgs.builder()
 *                 .required(true)
 *                 .canReviewOwnRequest(true)
 *                 .minNumApprovals(2)
 *                 .canApplyDeclinedChanges(true)
 *                 .build())
 *             .projectKey(launchdarkly_project.example().key())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * You can import a LaunchDarkly environment using this format`project_key/environment_key`. For example
 * 
 * ```sh
 *  $ pulumi import launchdarkly:index/environment:Environment staging example-project/staging
 * ```
 * 
 */
@ResourceType(type="launchdarkly:index/environment:Environment")
public class Environment extends com.pulumi.resources.CustomResource {
    /**
     * The environment&#39;s SDK key.
     * 
     */
    @Export(name="apiKey", type=String.class, parameters={})
    private Output<String> apiKey;

    /**
     * @return The environment&#39;s SDK key.
     * 
     */
    public Output<String> apiKey() {
        return this.apiKey;
    }
    @Export(name="approvalSettings", type=List.class, parameters={EnvironmentApprovalSetting.class})
    private Output<List<EnvironmentApprovalSetting>> approvalSettings;

    public Output<List<EnvironmentApprovalSetting>> approvalSettings() {
        return this.approvalSettings;
    }
    /**
     * The environment&#39;s client-side ID.
     * 
     */
    @Export(name="clientSideId", type=String.class, parameters={})
    private Output<String> clientSideId;

    /**
     * @return The environment&#39;s client-side ID.
     * 
     */
    public Output<String> clientSideId() {
        return this.clientSideId;
    }
    /**
     * The color swatch as an RGB hex value with no leading `#`. For example: `000000`.
     * 
     */
    @Export(name="color", type=String.class, parameters={})
    private Output<String> color;

    /**
     * @return The color swatch as an RGB hex value with no leading `#`. For example: `000000`.
     * 
     */
    public Output<String> color() {
        return this.color;
    }
    /**
     * Set to `true` if this environment requires confirmation for flag and segment changes. This field will default to `false` when not set.
     * 
     */
    @Export(name="confirmChanges", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> confirmChanges;

    /**
     * @return Set to `true` if this environment requires confirmation for flag and segment changes. This field will default to `false` when not set.
     * 
     */
    public Output<Optional<Boolean>> confirmChanges() {
        return Codegen.optional(this.confirmChanges);
    }
    /**
     * Set to `true` to enable data export for every flag created in this environment after you configure this argument. This field will default to `false` when not set. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
     * 
     */
    @Export(name="defaultTrackEvents", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> defaultTrackEvents;

    /**
     * @return Set to `true` to enable data export for every flag created in this environment after you configure this argument. This field will default to `false` when not set. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
     * 
     */
    public Output<Optional<Boolean>> defaultTrackEvents() {
        return Codegen.optional(this.defaultTrackEvents);
    }
    /**
     * The TTL for the environment. This must be between 0 and 60 minutes. The TTL setting only applies to environments using the PHP SDK. This field will default to `0` when not set. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
     * 
     */
    @Export(name="defaultTtl", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> defaultTtl;

    /**
     * @return The TTL for the environment. This must be between 0 and 60 minutes. The TTL setting only applies to environments using the PHP SDK. This field will default to `0` when not set. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
     * 
     */
    public Output<Optional<Integer>> defaultTtl() {
        return Codegen.optional(this.defaultTtl);
    }
    /**
     * The project-unique key for the environment.
     * 
     */
    @Export(name="key", type=String.class, parameters={})
    private Output<String> key;

    /**
     * @return The project-unique key for the environment.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * The environment&#39;s mobile key.
     * 
     */
    @Export(name="mobileKey", type=String.class, parameters={})
    private Output<String> mobileKey;

    /**
     * @return The environment&#39;s mobile key.
     * 
     */
    public Output<String> mobileKey() {
        return this.mobileKey;
    }
    /**
     * The name of the environment.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the environment.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * - The environment&#39;s project key.
     * 
     */
    @Export(name="projectKey", type=String.class, parameters={})
    private Output<String> projectKey;

    /**
     * @return - The environment&#39;s project key.
     * 
     */
    public Output<String> projectKey() {
        return this.projectKey;
    }
    /**
     * Set to `true` if this environment requires comments for flag and segment changes. This field will default to `false` when not set.
     * 
     */
    @Export(name="requireComments", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> requireComments;

    /**
     * @return Set to `true` if this environment requires comments for flag and segment changes. This field will default to `false` when not set.
     * 
     */
    public Output<Optional<Boolean>> requireComments() {
        return Codegen.optional(this.requireComments);
    }
    /**
     * Set to `true` to ensure a user of the client-side SDK cannot impersonate another user. This field will default to `false` when not set.
     * 
     */
    @Export(name="secureMode", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> secureMode;

    /**
     * @return Set to `true` to ensure a user of the client-side SDK cannot impersonate another user. This field will default to `false` when not set.
     * 
     */
    public Output<Optional<Boolean>> secureMode() {
        return Codegen.optional(this.secureMode);
    }
    /**
     * Set of tags associated with the environment.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Set of tags associated with the environment.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Environment(String name) {
        this(name, EnvironmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Environment(String name, EnvironmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Environment(String name, EnvironmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("launchdarkly:index/environment:Environment", name, args == null ? EnvironmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Environment(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("launchdarkly:index/environment:Environment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Environment get(String name, Output<String> id, @Nullable EnvironmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Environment(name, id, state, options);
    }
}
