// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.FlagTriggerInstructionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlagTriggerState extends com.pulumi.resources.ResourceArgs {

    public static final FlagTriggerState Empty = new FlagTriggerState();

    /**
     * Whether the trigger is currently active or not. This property defaults to true upon creation
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the trigger is currently active or not. This property defaults to true upon creation
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The unique key of the environment the flag trigger will work in. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Import(name="envKey")
    private @Nullable Output<String> envKey;

    /**
     * @return The unique key of the environment the flag trigger will work in. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Optional<Output<String>> envKey() {
        return Optional.ofNullable(this.envKey);
    }

    /**
     * The unique key of the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Import(name="flagKey")
    private @Nullable Output<String> flagKey;

    /**
     * @return The unique key of the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Optional<Output<String>> flagKey() {
        return Optional.ofNullable(this.flagKey);
    }

    /**
     * Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `&#34;turnFlagOn&#34;` and `&#34;turnFlagOff&#34;`. This must be passed as the key-value pair `{ kind = &#34;&lt;flag_action&gt;&#34; }`.
     * 
     */
    @Import(name="instructions")
    private @Nullable Output<FlagTriggerInstructionsArgs> instructions;

    /**
     * @return Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `&#34;turnFlagOn&#34;` and `&#34;turnFlagOff&#34;`. This must be passed as the key-value pair `{ kind = &#34;&lt;flag_action&gt;&#34; }`.
     * 
     */
    public Optional<Output<FlagTriggerInstructionsArgs>> instructions() {
        return Optional.ofNullable(this.instructions);
    }

    /**
     * The unique identifier of the integration you intend to set your trigger up with. Currently supported are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;honeycomb&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, and `&#34;generic-trigger&#34;`. `&#34;generic-trigger&#34;` should be used for integrations not explicitly supported. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Import(name="integrationKey")
    private @Nullable Output<String> integrationKey;

    /**
     * @return The unique identifier of the integration you intend to set your trigger up with. Currently supported are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;honeycomb&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, and `&#34;generic-trigger&#34;`. `&#34;generic-trigger&#34;` should be used for integrations not explicitly supported. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Optional<Output<String>> integrationKey() {
        return Optional.ofNullable(this.integrationKey);
    }

    /**
     * The LaunchDarkly ID of the member who maintains the trigger. The API will automatically apply the member associated with
     * your Terraform API key or the most recently-set maintainer
     * 
     */
    @Import(name="maintainerId")
    private @Nullable Output<String> maintainerId;

    /**
     * @return The LaunchDarkly ID of the member who maintains the trigger. The API will automatically apply the member associated with
     * your Terraform API key or the most recently-set maintainer
     * 
     */
    public Optional<Output<String>> maintainerId() {
        return Optional.ofNullable(this.maintainerId);
    }

    /**
     * The unique key of the project encompassing the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Import(name="projectKey")
    private @Nullable Output<String> projectKey;

    /**
     * @return The unique key of the project encompassing the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Optional<Output<String>> projectKey() {
        return Optional.ofNullable(this.projectKey);
    }

    /**
     * The unique trigger URL
     * 
     */
    @Import(name="triggerUrl")
    private @Nullable Output<String> triggerUrl;

    /**
     * @return The unique trigger URL
     * 
     */
    public Optional<Output<String>> triggerUrl() {
        return Optional.ofNullable(this.triggerUrl);
    }

    private FlagTriggerState() {}

    private FlagTriggerState(FlagTriggerState $) {
        this.enabled = $.enabled;
        this.envKey = $.envKey;
        this.flagKey = $.flagKey;
        this.instructions = $.instructions;
        this.integrationKey = $.integrationKey;
        this.maintainerId = $.maintainerId;
        this.projectKey = $.projectKey;
        this.triggerUrl = $.triggerUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlagTriggerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlagTriggerState $;

        public Builder() {
            $ = new FlagTriggerState();
        }

        public Builder(FlagTriggerState defaults) {
            $ = new FlagTriggerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether the trigger is currently active or not. This property defaults to true upon creation
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the trigger is currently active or not. This property defaults to true upon creation
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param envKey The unique key of the environment the flag trigger will work in. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder envKey(@Nullable Output<String> envKey) {
            $.envKey = envKey;
            return this;
        }

        /**
         * @param envKey The unique key of the environment the flag trigger will work in. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder envKey(String envKey) {
            return envKey(Output.of(envKey));
        }

        /**
         * @param flagKey The unique key of the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder flagKey(@Nullable Output<String> flagKey) {
            $.flagKey = flagKey;
            return this;
        }

        /**
         * @param flagKey The unique key of the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder flagKey(String flagKey) {
            return flagKey(Output.of(flagKey));
        }

        /**
         * @param instructions Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `&#34;turnFlagOn&#34;` and `&#34;turnFlagOff&#34;`. This must be passed as the key-value pair `{ kind = &#34;&lt;flag_action&gt;&#34; }`.
         * 
         * @return builder
         * 
         */
        public Builder instructions(@Nullable Output<FlagTriggerInstructionsArgs> instructions) {
            $.instructions = instructions;
            return this;
        }

        /**
         * @param instructions Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `&#34;turnFlagOn&#34;` and `&#34;turnFlagOff&#34;`. This must be passed as the key-value pair `{ kind = &#34;&lt;flag_action&gt;&#34; }`.
         * 
         * @return builder
         * 
         */
        public Builder instructions(FlagTriggerInstructionsArgs instructions) {
            return instructions(Output.of(instructions));
        }

        /**
         * @param integrationKey The unique identifier of the integration you intend to set your trigger up with. Currently supported are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;honeycomb&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, and `&#34;generic-trigger&#34;`. `&#34;generic-trigger&#34;` should be used for integrations not explicitly supported. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(@Nullable Output<String> integrationKey) {
            $.integrationKey = integrationKey;
            return this;
        }

        /**
         * @param integrationKey The unique identifier of the integration you intend to set your trigger up with. Currently supported are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;honeycomb&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, and `&#34;generic-trigger&#34;`. `&#34;generic-trigger&#34;` should be used for integrations not explicitly supported. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder integrationKey(String integrationKey) {
            return integrationKey(Output.of(integrationKey));
        }

        /**
         * @param maintainerId The LaunchDarkly ID of the member who maintains the trigger. The API will automatically apply the member associated with
         * your Terraform API key or the most recently-set maintainer
         * 
         * @return builder
         * 
         */
        public Builder maintainerId(@Nullable Output<String> maintainerId) {
            $.maintainerId = maintainerId;
            return this;
        }

        /**
         * @param maintainerId The LaunchDarkly ID of the member who maintains the trigger. The API will automatically apply the member associated with
         * your Terraform API key or the most recently-set maintainer
         * 
         * @return builder
         * 
         */
        public Builder maintainerId(String maintainerId) {
            return maintainerId(Output.of(maintainerId));
        }

        /**
         * @param projectKey The unique key of the project encompassing the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(@Nullable Output<String> projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param projectKey The unique key of the project encompassing the associated flag. A change in this field will force the destruction of the existing resource and the creation of a new one.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            return projectKey(Output.of(projectKey));
        }

        /**
         * @param triggerUrl The unique trigger URL
         * 
         * @return builder
         * 
         */
        public Builder triggerUrl(@Nullable Output<String> triggerUrl) {
            $.triggerUrl = triggerUrl;
            return this;
        }

        /**
         * @param triggerUrl The unique trigger URL
         * 
         * @return builder
         * 
         */
        public Builder triggerUrl(String triggerUrl) {
            return triggerUrl(Output.of(triggerUrl));
        }

        public FlagTriggerState build() {
            return $;
        }
    }

}
