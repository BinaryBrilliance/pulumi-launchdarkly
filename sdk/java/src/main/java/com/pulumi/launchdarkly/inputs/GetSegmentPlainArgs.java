// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.GetSegmentRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSegmentPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSegmentPlainArgs Empty = new GetSegmentPlainArgs();

    /**
     * The description of the segment&#39;s purpose.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the segment&#39;s purpose.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The segment&#39;s environment key.
     * 
     */
    @Import(name="envKey", required=true)
    private String envKey;

    /**
     * @return The segment&#39;s environment key.
     * 
     */
    public String envKey() {
        return this.envKey;
    }

    /**
     * List of user keys excluded from the segment.
     * 
     */
    @Import(name="excludeds")
    private @Nullable List<String> excludeds;

    /**
     * @return List of user keys excluded from the segment.
     * 
     */
    public Optional<List<String>> excludeds() {
        return Optional.ofNullable(this.excludeds);
    }

    /**
     * List of user keys included in the segment.
     * 
     */
    @Import(name="includeds")
    private @Nullable List<String> includeds;

    /**
     * @return List of user keys included in the segment.
     * 
     */
    public Optional<List<String>> includeds() {
        return Optional.ofNullable(this.includeds);
    }

    /**
     * The unique key that references the segment.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return The unique key that references the segment.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * The segment&#39;s project key.
     * 
     */
    @Import(name="projectKey", required=true)
    private String projectKey;

    /**
     * @return The segment&#39;s project key.
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }

    /**
     * List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
     * 
     */
    @Import(name="rules")
    private @Nullable List<GetSegmentRule> rules;

    /**
     * @return List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
     * 
     */
    public Optional<List<GetSegmentRule>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Set of tags for the segment.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return Set of tags for the segment.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetSegmentPlainArgs() {}

    private GetSegmentPlainArgs(GetSegmentPlainArgs $) {
        this.description = $.description;
        this.envKey = $.envKey;
        this.excludeds = $.excludeds;
        this.includeds = $.includeds;
        this.key = $.key;
        this.projectKey = $.projectKey;
        this.rules = $.rules;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSegmentPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSegmentPlainArgs $;

        public Builder() {
            $ = new GetSegmentPlainArgs();
        }

        public Builder(GetSegmentPlainArgs defaults) {
            $ = new GetSegmentPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the segment&#39;s purpose.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param envKey The segment&#39;s environment key.
         * 
         * @return builder
         * 
         */
        public Builder envKey(String envKey) {
            $.envKey = envKey;
            return this;
        }

        /**
         * @param excludeds List of user keys excluded from the segment.
         * 
         * @return builder
         * 
         */
        public Builder excludeds(@Nullable List<String> excludeds) {
            $.excludeds = excludeds;
            return this;
        }

        /**
         * @param excludeds List of user keys excluded from the segment.
         * 
         * @return builder
         * 
         */
        public Builder excludeds(String... excludeds) {
            return excludeds(List.of(excludeds));
        }

        /**
         * @param includeds List of user keys included in the segment.
         * 
         * @return builder
         * 
         */
        public Builder includeds(@Nullable List<String> includeds) {
            $.includeds = includeds;
            return this;
        }

        /**
         * @param includeds List of user keys included in the segment.
         * 
         * @return builder
         * 
         */
        public Builder includeds(String... includeds) {
            return includeds(List.of(includeds));
        }

        /**
         * @param key The unique key that references the segment.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param projectKey The segment&#39;s project key.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param rules List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable List<GetSegmentRule> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
         * 
         * @return builder
         * 
         */
        public Builder rules(GetSegmentRule... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param tags Set of tags for the segment.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Set of tags for the segment.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        public GetSegmentPlainArgs build() {
            $.envKey = Objects.requireNonNull($.envKey, "expected parameter 'envKey' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            return $;
        }
    }

}
