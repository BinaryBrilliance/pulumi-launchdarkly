// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.launchdarkly.outputs.GetFeatureFlagEnvironmentFallthrough;
import com.pulumi.launchdarkly.outputs.GetFeatureFlagEnvironmentPrerequisite;
import com.pulumi.launchdarkly.outputs.GetFeatureFlagEnvironmentRule;
import com.pulumi.launchdarkly.outputs.GetFeatureFlagEnvironmentTarget;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFeatureFlagEnvironmentResult {
    private String envKey;
    private @Nullable GetFeatureFlagEnvironmentFallthrough fallthrough;
    private String flagId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The index of the variation served when targeting is disabled.
     * 
     */
    private @Nullable Integer offVariation;
    /**
     * @return Whether targeting is enabled.
     * 
     */
    private @Nullable Boolean on;
    /**
     * @return List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     * 
     */
    private @Nullable List<GetFeatureFlagEnvironmentPrerequisite> prerequisites;
    /**
     * @return List of logical targeting rules. To learn more, read Nested Rules Blocks.
     * 
     */
    private @Nullable List<GetFeatureFlagEnvironmentRule> rules;
    private @Nullable List<GetFeatureFlagEnvironmentTarget> targets;
    /**
     * @return Whether event data will be sent back to LaunchDarkly.
     * 
     */
    private @Nullable Boolean trackEvents;

    private GetFeatureFlagEnvironmentResult() {}
    public String envKey() {
        return this.envKey;
    }
    public Optional<GetFeatureFlagEnvironmentFallthrough> fallthrough() {
        return Optional.ofNullable(this.fallthrough);
    }
    public String flagId() {
        return this.flagId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The index of the variation served when targeting is disabled.
     * 
     */
    public Optional<Integer> offVariation() {
        return Optional.ofNullable(this.offVariation);
    }
    /**
     * @return Whether targeting is enabled.
     * 
     */
    public Optional<Boolean> on() {
        return Optional.ofNullable(this.on);
    }
    /**
     * @return List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     * 
     */
    public List<GetFeatureFlagEnvironmentPrerequisite> prerequisites() {
        return this.prerequisites == null ? List.of() : this.prerequisites;
    }
    /**
     * @return List of logical targeting rules. To learn more, read Nested Rules Blocks.
     * 
     */
    public List<GetFeatureFlagEnvironmentRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }
    public List<GetFeatureFlagEnvironmentTarget> targets() {
        return this.targets == null ? List.of() : this.targets;
    }
    /**
     * @return Whether event data will be sent back to LaunchDarkly.
     * 
     */
    public Optional<Boolean> trackEvents() {
        return Optional.ofNullable(this.trackEvents);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFeatureFlagEnvironmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String envKey;
        private @Nullable GetFeatureFlagEnvironmentFallthrough fallthrough;
        private String flagId;
        private String id;
        private @Nullable Integer offVariation;
        private @Nullable Boolean on;
        private @Nullable List<GetFeatureFlagEnvironmentPrerequisite> prerequisites;
        private @Nullable List<GetFeatureFlagEnvironmentRule> rules;
        private @Nullable List<GetFeatureFlagEnvironmentTarget> targets;
        private @Nullable Boolean trackEvents;
        public Builder() {}
        public Builder(GetFeatureFlagEnvironmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.envKey = defaults.envKey;
    	      this.fallthrough = defaults.fallthrough;
    	      this.flagId = defaults.flagId;
    	      this.id = defaults.id;
    	      this.offVariation = defaults.offVariation;
    	      this.on = defaults.on;
    	      this.prerequisites = defaults.prerequisites;
    	      this.rules = defaults.rules;
    	      this.targets = defaults.targets;
    	      this.trackEvents = defaults.trackEvents;
        }

        @CustomType.Setter
        public Builder envKey(String envKey) {
            this.envKey = Objects.requireNonNull(envKey);
            return this;
        }
        @CustomType.Setter
        public Builder fallthrough(@Nullable GetFeatureFlagEnvironmentFallthrough fallthrough) {
            this.fallthrough = fallthrough;
            return this;
        }
        @CustomType.Setter
        public Builder flagId(String flagId) {
            this.flagId = Objects.requireNonNull(flagId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder offVariation(@Nullable Integer offVariation) {
            this.offVariation = offVariation;
            return this;
        }
        @CustomType.Setter
        public Builder on(@Nullable Boolean on) {
            this.on = on;
            return this;
        }
        @CustomType.Setter
        public Builder prerequisites(@Nullable List<GetFeatureFlagEnvironmentPrerequisite> prerequisites) {
            this.prerequisites = prerequisites;
            return this;
        }
        public Builder prerequisites(GetFeatureFlagEnvironmentPrerequisite... prerequisites) {
            return prerequisites(List.of(prerequisites));
        }
        @CustomType.Setter
        public Builder rules(@Nullable List<GetFeatureFlagEnvironmentRule> rules) {
            this.rules = rules;
            return this;
        }
        public Builder rules(GetFeatureFlagEnvironmentRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder targets(@Nullable List<GetFeatureFlagEnvironmentTarget> targets) {
            this.targets = targets;
            return this;
        }
        public Builder targets(GetFeatureFlagEnvironmentTarget... targets) {
            return targets(List.of(targets));
        }
        @CustomType.Setter
        public Builder trackEvents(@Nullable Boolean trackEvents) {
            this.trackEvents = trackEvents;
            return this;
        }
        public GetFeatureFlagEnvironmentResult build() {
            final var o = new GetFeatureFlagEnvironmentResult();
            o.envKey = envKey;
            o.fallthrough = fallthrough;
            o.flagId = flagId;
            o.id = id;
            o.offVariation = offVariation;
            o.on = on;
            o.prerequisites = prerequisites;
            o.rules = rules;
            o.targets = targets;
            o.trackEvents = trackEvents;
            return o;
        }
    }
}
