// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.launchdarkly.outputs.GetProjectClientSideAvailability;
import com.pulumi.launchdarkly.outputs.GetProjectDefaultClientSideAvailability;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    /**
     * @return **Deprecated** A map describing which client-side SDKs can use new flags by default. To learn more, read Nested Client-Side Availability Block.
     * Please migrate to `default_client_side_availability` to maintain future compatability.
     * 
     * @deprecated
     * &#39;client_side_availability&#39; is now deprecated. Please migrate to &#39;default_client_side_availability&#39; to maintain future compatability.
     * 
     */
    @Deprecated /* 'client_side_availability' is now deprecated. Please migrate to 'default_client_side_availability' to maintain future compatability. */
    private List<GetProjectClientSideAvailability> clientSideAvailabilities;
    /**
     * @return A block describing which client-side SDKs can use new flags by default. To learn more, read Nested Client-Side Availability Block.
     * 
     */
    private List<GetProjectDefaultClientSideAvailability> defaultClientSideAvailabilities;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String key;
    /**
     * @return The project&#39;s name.
     * 
     */
    private String name;
    /**
     * @return The project&#39;s set of tags.
     * 
     */
    private @Nullable List<String> tags;

    private GetProjectResult() {}
    /**
     * @return **Deprecated** A map describing which client-side SDKs can use new flags by default. To learn more, read Nested Client-Side Availability Block.
     * Please migrate to `default_client_side_availability` to maintain future compatability.
     * 
     * @deprecated
     * &#39;client_side_availability&#39; is now deprecated. Please migrate to &#39;default_client_side_availability&#39; to maintain future compatability.
     * 
     */
    @Deprecated /* 'client_side_availability' is now deprecated. Please migrate to 'default_client_side_availability' to maintain future compatability. */
    public List<GetProjectClientSideAvailability> clientSideAvailabilities() {
        return this.clientSideAvailabilities;
    }
    /**
     * @return A block describing which client-side SDKs can use new flags by default. To learn more, read Nested Client-Side Availability Block.
     * 
     */
    public List<GetProjectDefaultClientSideAvailability> defaultClientSideAvailabilities() {
        return this.defaultClientSideAvailabilities;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String key() {
        return this.key;
    }
    /**
     * @return The project&#39;s name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The project&#39;s set of tags.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetProjectClientSideAvailability> clientSideAvailabilities;
        private List<GetProjectDefaultClientSideAvailability> defaultClientSideAvailabilities;
        private String id;
        private String key;
        private String name;
        private @Nullable List<String> tags;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientSideAvailabilities = defaults.clientSideAvailabilities;
    	      this.defaultClientSideAvailabilities = defaults.defaultClientSideAvailabilities;
    	      this.id = defaults.id;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder clientSideAvailabilities(List<GetProjectClientSideAvailability> clientSideAvailabilities) {
            this.clientSideAvailabilities = Objects.requireNonNull(clientSideAvailabilities);
            return this;
        }
        public Builder clientSideAvailabilities(GetProjectClientSideAvailability... clientSideAvailabilities) {
            return clientSideAvailabilities(List.of(clientSideAvailabilities));
        }
        @CustomType.Setter
        public Builder defaultClientSideAvailabilities(List<GetProjectDefaultClientSideAvailability> defaultClientSideAvailabilities) {
            this.defaultClientSideAvailabilities = Objects.requireNonNull(defaultClientSideAvailabilities);
            return this;
        }
        public Builder defaultClientSideAvailabilities(GetProjectDefaultClientSideAvailability... defaultClientSideAvailabilities) {
            return defaultClientSideAvailabilities(List.of(defaultClientSideAvailabilities));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetProjectResult build() {
            final var o = new GetProjectResult();
            o.clientSideAvailabilities = clientSideAvailabilities;
            o.defaultClientSideAvailabilities = defaultClientSideAvailabilities;
            o.id = id;
            o.key = key;
            o.name = name;
            o.tags = tags;
            return o;
        }
    }
}
