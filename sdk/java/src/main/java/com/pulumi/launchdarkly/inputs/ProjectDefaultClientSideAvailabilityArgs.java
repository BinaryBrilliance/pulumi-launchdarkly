// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


public final class ProjectDefaultClientSideAvailabilityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectDefaultClientSideAvailabilityArgs Empty = new ProjectDefaultClientSideAvailabilityArgs();

    /**
     * Whether feature flags created under the project are available to JavaScript SDKs using the client-side ID by default. Defaults to `false` when not using `default_client_side_availability`.
     * 
     */
    @Import(name="usingEnvironmentId", required=true)
    private Output<Boolean> usingEnvironmentId;

    /**
     * @return Whether feature flags created under the project are available to JavaScript SDKs using the client-side ID by default. Defaults to `false` when not using `default_client_side_availability`.
     * 
     */
    public Output<Boolean> usingEnvironmentId() {
        return this.usingEnvironmentId;
    }

    /**
     * Whether feature flags created under the project are available to mobile SDKs, and other non-JavaScript SDKs, using a mobile key by default. Defaults to `true` when not using `default_client_side_availability`.
     * 
     */
    @Import(name="usingMobileKey", required=true)
    private Output<Boolean> usingMobileKey;

    /**
     * @return Whether feature flags created under the project are available to mobile SDKs, and other non-JavaScript SDKs, using a mobile key by default. Defaults to `true` when not using `default_client_side_availability`.
     * 
     */
    public Output<Boolean> usingMobileKey() {
        return this.usingMobileKey;
    }

    private ProjectDefaultClientSideAvailabilityArgs() {}

    private ProjectDefaultClientSideAvailabilityArgs(ProjectDefaultClientSideAvailabilityArgs $) {
        this.usingEnvironmentId = $.usingEnvironmentId;
        this.usingMobileKey = $.usingMobileKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectDefaultClientSideAvailabilityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectDefaultClientSideAvailabilityArgs $;

        public Builder() {
            $ = new ProjectDefaultClientSideAvailabilityArgs();
        }

        public Builder(ProjectDefaultClientSideAvailabilityArgs defaults) {
            $ = new ProjectDefaultClientSideAvailabilityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param usingEnvironmentId Whether feature flags created under the project are available to JavaScript SDKs using the client-side ID by default. Defaults to `false` when not using `default_client_side_availability`.
         * 
         * @return builder
         * 
         */
        public Builder usingEnvironmentId(Output<Boolean> usingEnvironmentId) {
            $.usingEnvironmentId = usingEnvironmentId;
            return this;
        }

        /**
         * @param usingEnvironmentId Whether feature flags created under the project are available to JavaScript SDKs using the client-side ID by default. Defaults to `false` when not using `default_client_side_availability`.
         * 
         * @return builder
         * 
         */
        public Builder usingEnvironmentId(Boolean usingEnvironmentId) {
            return usingEnvironmentId(Output.of(usingEnvironmentId));
        }

        /**
         * @param usingMobileKey Whether feature flags created under the project are available to mobile SDKs, and other non-JavaScript SDKs, using a mobile key by default. Defaults to `true` when not using `default_client_side_availability`.
         * 
         * @return builder
         * 
         */
        public Builder usingMobileKey(Output<Boolean> usingMobileKey) {
            $.usingMobileKey = usingMobileKey;
            return this;
        }

        /**
         * @param usingMobileKey Whether feature flags created under the project are available to mobile SDKs, and other non-JavaScript SDKs, using a mobile key by default. Defaults to `true` when not using `default_client_side_availability`.
         * 
         * @return builder
         * 
         */
        public Builder usingMobileKey(Boolean usingMobileKey) {
            return usingMobileKey(Output.of(usingMobileKey));
        }

        public ProjectDefaultClientSideAvailabilityArgs build() {
            $.usingEnvironmentId = Objects.requireNonNull($.usingEnvironmentId, "expected parameter 'usingEnvironmentId' to be non-null");
            $.usingMobileKey = Objects.requireNonNull($.usingMobileKey, "expected parameter 'usingMobileKey' to be non-null");
            return $;
        }
    }

}
