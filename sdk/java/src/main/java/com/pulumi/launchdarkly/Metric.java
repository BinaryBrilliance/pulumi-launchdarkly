// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.launchdarkly.MetricArgs;
import com.pulumi.launchdarkly.Utilities;
import com.pulumi.launchdarkly.inputs.MetricState;
import com.pulumi.launchdarkly.outputs.MetricUrl;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a LaunchDarkly metric resource.
 * 
 * This resource allows you to create and manage metrics within your LaunchDarkly organization.
 * 
 * To learn more about metrics and experimentation, read [Experimentation Documentation](https://docs.launchdarkly.com/home/experimentation).
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.launchdarkly.Metric;
 * import com.pulumi.launchdarkly.MetricArgs;
 * import com.pulumi.launchdarkly.inputs.MetricUrlArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Metric(&#34;example&#34;, MetricArgs.builder()        
 *             .projectKey(launchdarkly_project.example().key())
 *             .key(&#34;example-metric&#34;)
 *             .description(&#34;Metric description.&#34;)
 *             .kind(&#34;pageview&#34;)
 *             .tags(&#34;example&#34;)
 *             .urls(MetricUrlArgs.builder()
 *                 .kind(&#34;substring&#34;)
 *                 .substring(&#34;foo&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * LaunchDarkly metrics can be imported using the metric&#39;s ID in the form `project_key/metric_key`, e.g.
 * 
 * ```sh
 *  $ pulumi import launchdarkly:index/metric:Metric example example-project/example-metric-key
 * ```
 * 
 */
@ResourceType(type="launchdarkly:index/metric:Metric")
public class Metric extends com.pulumi.resources.CustomResource {
    /**
     * The description of the metric&#39;s purpose.
     * 
     */
    @Export(name="description", type=String.class, parameters={})
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the metric&#39;s purpose.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The event key to watch for `custom` metrics.
     * 
     */
    @Export(name="eventKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> eventKey;

    /**
     * @return The event key to watch for `custom` metrics.
     * 
     */
    public Output<Optional<String>> eventKey() {
        return Codegen.optional(this.eventKey);
    }
    /**
     * Whether the metric is active
     * 
     */
    @Export(name="isActive", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isActive;

    /**
     * @return Whether the metric is active
     * 
     */
    public Output<Optional<Boolean>> isActive() {
        return Codegen.optional(this.isActive);
    }
    /**
     * Whether the metric is numeric
     * 
     */
    @Export(name="isNumeric", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> isNumeric;

    /**
     * @return Whether the metric is numeric
     * 
     */
    public Output<Optional<Boolean>> isNumeric() {
        return Codegen.optional(this.isNumeric);
    }
    /**
     * The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Export(name="key", type=String.class, parameters={})
    private Output<String> key;

    /**
     * @return The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Output<String> key() {
        return this.key;
    }
    /**
     * The metric type. Available choices are `click`, `custom`, and `pageview`. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return The metric type. Available choices are `click`, `custom`, and `pageview`. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The LaunchDarkly ID of the user who will maintain the metric. If not set, the API will automatically apply the member
     * associated with your Terraform API key or the most recently-set maintainer
     * 
     */
    @Export(name="maintainerId", type=String.class, parameters={})
    private Output<String> maintainerId;

    /**
     * @return The LaunchDarkly ID of the user who will maintain the metric. If not set, the API will automatically apply the member
     * associated with your Terraform API key or the most recently-set maintainer
     * 
     */
    public Output<String> maintainerId() {
        return this.maintainerId;
    }
    /**
     * The human-friendly name for the metric.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The human-friendly name for the metric.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The metrics&#39;s project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Export(name="projectKey", type=String.class, parameters={})
    private Output<String> projectKey;

    /**
     * @return The metrics&#39;s project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Output<String> projectKey() {
        return this.projectKey;
    }
    /**
     * The CSS selector for `click` metrics.
     * 
     */
    @Export(name="selector", type=String.class, parameters={})
    private Output</* @Nullable */ String> selector;

    /**
     * @return The CSS selector for `click` metrics.
     * 
     */
    public Output<Optional<String>> selector() {
        return Codegen.optional(this.selector);
    }
    /**
     * The success criteria for numeric `custom` metrics.
     * 
     */
    @Export(name="successCriteria", type=String.class, parameters={})
    private Output</* @Nullable */ String> successCriteria;

    /**
     * @return The success criteria for numeric `custom` metrics.
     * 
     */
    public Output<Optional<String>> successCriteria() {
        return Codegen.optional(this.successCriteria);
    }
    /**
     * Set of tags for the metric.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Set of tags for the metric.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The unit for numeric `custom` metrics.
     * 
     */
    @Export(name="unit", type=String.class, parameters={})
    private Output</* @Nullable */ String> unit;

    /**
     * @return The unit for numeric `custom` metrics.
     * 
     */
    public Output<Optional<String>> unit() {
        return Codegen.optional(this.unit);
    }
    /**
     * A block determining which URLs the metric watches. To learn more, read Nested Urls Blocks.
     * 
     */
    @Export(name="urls", type=List.class, parameters={MetricUrl.class})
    private Output</* @Nullable */ List<MetricUrl>> urls;

    /**
     * @return A block determining which URLs the metric watches. To learn more, read Nested Urls Blocks.
     * 
     */
    public Output<Optional<List<MetricUrl>>> urls() {
        return Codegen.optional(this.urls);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Metric(String name) {
        this(name, MetricArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Metric(String name, MetricArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Metric(String name, MetricArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("launchdarkly:index/metric:Metric", name, args == null ? MetricArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Metric(String name, Output<String> id, @Nullable MetricState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("launchdarkly:index/metric:Metric", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Metric get(String name, Output<String> id, @Nullable MetricState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Metric(name, id, state, options);
    }
}
