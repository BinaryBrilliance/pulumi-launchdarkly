// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.launchdarkly.AuditLogSubscriptionArgs;
import com.pulumi.launchdarkly.Utilities;
import com.pulumi.launchdarkly.inputs.AuditLogSubscriptionState;
import com.pulumi.launchdarkly.outputs.AuditLogSubscriptionStatement;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a LaunchDarkly audit log subscription resource.
 * 
 * This resource allows you to create and manage LaunchDarkly audit log subscriptions.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.launchdarkly.AuditLogSubscription;
 * import com.pulumi.launchdarkly.AuditLogSubscriptionArgs;
 * import com.pulumi.launchdarkly.inputs.AuditLogSubscriptionStatementArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new AuditLogSubscription(&#34;example&#34;, AuditLogSubscriptionArgs.builder()        
 *             .config(Map.ofEntries(
 *                 Map.entry(&#34;api_key&#34;, &#34;yoursecretkey&#34;),
 *                 Map.entry(&#34;host_url&#34;, &#34;https://api.datadoghq.com&#34;)
 *             ))
 *             .integrationKey(&#34;datadog&#34;)
 *             .statements(AuditLogSubscriptionStatementArgs.builder()
 *                 .actions(&#34;*&#34;)
 *                 .effect(&#34;allow&#34;)
 *                 .resources(&#34;proj/*:env/*:flag/*&#34;)
 *                 .build())
 *             .tags(            
 *                 &#34;integrations&#34;,
 *                 &#34;terraform&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="launchdarkly:index/auditLogSubscription:AuditLogSubscription")
public class AuditLogSubscription extends com.pulumi.resources.CustomResource {
    @Export(name="config", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> config;

    public Output<Map<String,Object>> config() {
        return this.config;
    }
    /**
     * The integration key. As of January 2022, supported integrations are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;elastic&#34;`, `&#34;honeycomb&#34;`, `&#34;logdna&#34;`, `&#34;msteams&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, `&#34;slack&#34;`, and `&#34;splunk&#34;`. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    @Export(name="integrationKey", type=String.class, parameters={})
    private Output<String> integrationKey;

    /**
     * @return The integration key. As of January 2022, supported integrations are `&#34;datadog&#34;`, `&#34;dynatrace&#34;`, `&#34;elastic&#34;`, `&#34;honeycomb&#34;`, `&#34;logdna&#34;`, `&#34;msteams&#34;`, `&#34;new-relic-apm&#34;`, `&#34;signalfx&#34;`, `&#34;slack&#34;`, and `&#34;splunk&#34;`. A change in this field will force the destruction of the existing resource and the creation of a new one.
     * 
     */
    public Output<String> integrationKey() {
        return this.integrationKey;
    }
    /**
     * A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Whether or not you want your subscription enabled, i.e. to actively send events.
     * 
     */
    @Export(name="on", type=Boolean.class, parameters={})
    private Output<Boolean> on;

    /**
     * @return Whether or not you want your subscription enabled, i.e. to actively send events.
     * 
     */
    public Output<Boolean> on() {
        return this.on;
    }
    /**
     * A block representing the resources to which you wish to subscribe. To learn more about how to configure these blocks, read Nested Subscription Statements Blocks.
     * 
     */
    @Export(name="statements", type=List.class, parameters={AuditLogSubscriptionStatement.class})
    private Output<List<AuditLogSubscriptionStatement>> statements;

    /**
     * @return A block representing the resources to which you wish to subscribe. To learn more about how to configure these blocks, read Nested Subscription Statements Blocks.
     * 
     */
    public Output<List<AuditLogSubscriptionStatement>> statements() {
        return this.statements;
    }
    /**
     * Set of tags associated with the subscription object.
     * 
     */
    @Export(name="tags", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return Set of tags associated with the subscription object.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AuditLogSubscription(String name) {
        this(name, AuditLogSubscriptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AuditLogSubscription(String name, AuditLogSubscriptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AuditLogSubscription(String name, AuditLogSubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("launchdarkly:index/auditLogSubscription:AuditLogSubscription", name, args == null ? AuditLogSubscriptionArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private AuditLogSubscription(String name, Output<String> id, @Nullable AuditLogSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("launchdarkly:index/auditLogSubscription:AuditLogSubscription", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AuditLogSubscription get(String name, Output<String> id, @Nullable AuditLogSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AuditLogSubscription(name, id, state, options);
    }
}
