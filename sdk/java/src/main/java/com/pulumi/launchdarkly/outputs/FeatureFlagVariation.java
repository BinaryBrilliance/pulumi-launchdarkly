// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FeatureFlagVariation {
    /**
     * @return The variation&#39;s description.
     * 
     */
    private @Nullable String description;
    /**
     * @return The name of the variation.
     * 
     */
    private @Nullable String name;
    /**
     * @return The variation value. The value&#39;s type must correspond to the `variation_type` argument. For example: `variation_type = &#34;boolean&#34;` accepts only `true` or `false`. The `&#34;number&#34;` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`).
     * 
     */
    private String value;

    private FeatureFlagVariation() {}
    /**
     * @return The variation&#39;s description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The name of the variation.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The variation value. The value&#39;s type must correspond to the `variation_type` argument. For example: `variation_type = &#34;boolean&#34;` accepts only `true` or `false`. The `&#34;number&#34;` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`).
     * 
     */
    public String value() {
        return this.value;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FeatureFlagVariation defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private @Nullable String name;
        private String value;
        public Builder() {}
        public Builder(FeatureFlagVariation defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.value = defaults.value;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public FeatureFlagVariation build() {
            final var o = new FeatureFlagVariation();
            o.description = description;
            o.name = name;
            o.value = value;
            return o;
        }
    }
}
