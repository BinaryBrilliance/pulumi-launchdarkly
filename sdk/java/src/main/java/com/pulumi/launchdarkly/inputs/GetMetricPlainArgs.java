// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.launchdarkly.inputs.GetMetricUrl;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetMetricPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetMetricPlainArgs Empty = new GetMetricPlainArgs();

    /**
     * The description of the metric&#39;s purpose.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The description of the metric&#39;s purpose.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The event key to watch for `custom` metrics.
     * 
     */
    @Import(name="eventKey")
    private @Nullable String eventKey;

    /**
     * @return The event key to watch for `custom` metrics.
     * 
     */
    public Optional<String> eventKey() {
        return Optional.ofNullable(this.eventKey);
    }

    @Import(name="isActive")
    private @Nullable Boolean isActive;

    public Optional<Boolean> isActive() {
        return Optional.ofNullable(this.isActive);
    }

    @Import(name="isNumeric")
    private @Nullable Boolean isNumeric;

    public Optional<Boolean> isNumeric() {
        return Optional.ofNullable(this.isNumeric);
    }

    /**
     * The metric&#39;s unique key.
     * 
     */
    @Import(name="key", required=true)
    private String key;

    /**
     * @return The metric&#39;s unique key.
     * 
     */
    public String key() {
        return this.key;
    }

    /**
     * The metric type. Available choices are `click`, `custom`, and `pageview`.
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    /**
     * @return The metric type. Available choices are `click`, `custom`, and `pageview`.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    @Import(name="maintainerId")
    private @Nullable String maintainerId;

    public Optional<String> maintainerId() {
        return Optional.ofNullable(this.maintainerId);
    }

    /**
     * The name of the metric.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the metric.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The metric&#39;s project key.
     * 
     */
    @Import(name="projectKey", required=true)
    private String projectKey;

    /**
     * @return The metric&#39;s project key.
     * 
     */
    public String projectKey() {
        return this.projectKey;
    }

    /**
     * The CSS selector for `click` metrics.
     * 
     */
    @Import(name="selector")
    private @Nullable String selector;

    /**
     * @return The CSS selector for `click` metrics.
     * 
     */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * The success criteria for numeric `custom` metrics.
     * 
     */
    @Import(name="successCriteria")
    private @Nullable String successCriteria;

    /**
     * @return The success criteria for numeric `custom` metrics.
     * 
     */
    public Optional<String> successCriteria() {
        return Optional.ofNullable(this.successCriteria);
    }

    /**
     * Set of tags associated with the metric.
     * 
     */
    @Import(name="tags")
    private @Nullable List<String> tags;

    /**
     * @return Set of tags associated with the metric.
     * 
     */
    public Optional<List<String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The unit for numeric `custom` metrics.
     * 
     */
    @Import(name="unit")
    private @Nullable String unit;

    /**
     * @return The unit for numeric `custom` metrics.
     * 
     */
    public Optional<String> unit() {
        return Optional.ofNullable(this.unit);
    }

    /**
     * Which URLs the metric watches.
     * 
     */
    @Import(name="urls")
    private @Nullable List<GetMetricUrl> urls;

    /**
     * @return Which URLs the metric watches.
     * 
     */
    public Optional<List<GetMetricUrl>> urls() {
        return Optional.ofNullable(this.urls);
    }

    private GetMetricPlainArgs() {}

    private GetMetricPlainArgs(GetMetricPlainArgs $) {
        this.description = $.description;
        this.eventKey = $.eventKey;
        this.isActive = $.isActive;
        this.isNumeric = $.isNumeric;
        this.key = $.key;
        this.kind = $.kind;
        this.maintainerId = $.maintainerId;
        this.name = $.name;
        this.projectKey = $.projectKey;
        this.selector = $.selector;
        this.successCriteria = $.successCriteria;
        this.tags = $.tags;
        this.unit = $.unit;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetMetricPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetMetricPlainArgs $;

        public Builder() {
            $ = new GetMetricPlainArgs();
        }

        public Builder(GetMetricPlainArgs defaults) {
            $ = new GetMetricPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the metric&#39;s purpose.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param eventKey The event key to watch for `custom` metrics.
         * 
         * @return builder
         * 
         */
        public Builder eventKey(@Nullable String eventKey) {
            $.eventKey = eventKey;
            return this;
        }

        public Builder isActive(@Nullable Boolean isActive) {
            $.isActive = isActive;
            return this;
        }

        public Builder isNumeric(@Nullable Boolean isNumeric) {
            $.isNumeric = isNumeric;
            return this;
        }

        /**
         * @param key The metric&#39;s unique key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            $.key = key;
            return this;
        }

        /**
         * @param kind The metric type. Available choices are `click`, `custom`, and `pageview`.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        public Builder maintainerId(@Nullable String maintainerId) {
            $.maintainerId = maintainerId;
            return this;
        }

        /**
         * @param name The name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param projectKey The metric&#39;s project key.
         * 
         * @return builder
         * 
         */
        public Builder projectKey(String projectKey) {
            $.projectKey = projectKey;
            return this;
        }

        /**
         * @param selector The CSS selector for `click` metrics.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable String selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param successCriteria The success criteria for numeric `custom` metrics.
         * 
         * @return builder
         * 
         */
        public Builder successCriteria(@Nullable String successCriteria) {
            $.successCriteria = successCriteria;
            return this;
        }

        /**
         * @param tags Set of tags associated with the metric.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Set of tags associated with the metric.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param unit The unit for numeric `custom` metrics.
         * 
         * @return builder
         * 
         */
        public Builder unit(@Nullable String unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param urls Which URLs the metric watches.
         * 
         * @return builder
         * 
         */
        public Builder urls(@Nullable List<GetMetricUrl> urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param urls Which URLs the metric watches.
         * 
         * @return builder
         * 
         */
        public Builder urls(GetMetricUrl... urls) {
            return urls(List.of(urls));
        }

        public GetMetricPlainArgs build() {
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.projectKey = Objects.requireNonNull($.projectKey, "expected parameter 'projectKey' to be non-null");
            return $;
        }
    }

}
