// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.launchdarkly.outputs.GetSegmentRule;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSegmentResult {
    /**
     * @return The segment&#39;s creation date represented as a UNIX epoch timestamp.
     * 
     */
    private Integer creationDate;
    /**
     * @return The description of the segment&#39;s purpose.
     * 
     */
    private @Nullable String description;
    private String envKey;
    /**
     * @return List of user keys excluded from the segment.
     * 
     */
    private @Nullable List<String> excludeds;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return List of user keys included in the segment.
     * 
     */
    private @Nullable List<String> includeds;
    private String key;
    /**
     * @return The human-friendly name for the segment.
     * 
     */
    private String name;
    private String projectKey;
    /**
     * @return List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
     * 
     */
    private @Nullable List<GetSegmentRule> rules;
    /**
     * @return Set of tags for the segment.
     * 
     */
    private @Nullable List<String> tags;

    private GetSegmentResult() {}
    /**
     * @return The segment&#39;s creation date represented as a UNIX epoch timestamp.
     * 
     */
    public Integer creationDate() {
        return this.creationDate;
    }
    /**
     * @return The description of the segment&#39;s purpose.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    public String envKey() {
        return this.envKey;
    }
    /**
     * @return List of user keys excluded from the segment.
     * 
     */
    public List<String> excludeds() {
        return this.excludeds == null ? List.of() : this.excludeds;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of user keys included in the segment.
     * 
     */
    public List<String> includeds() {
        return this.includeds == null ? List.of() : this.includeds;
    }
    public String key() {
        return this.key;
    }
    /**
     * @return The human-friendly name for the segment.
     * 
     */
    public String name() {
        return this.name;
    }
    public String projectKey() {
        return this.projectKey;
    }
    /**
     * @return List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
     * 
     */
    public List<GetSegmentRule> rules() {
        return this.rules == null ? List.of() : this.rules;
    }
    /**
     * @return Set of tags for the segment.
     * 
     */
    public List<String> tags() {
        return this.tags == null ? List.of() : this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSegmentResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer creationDate;
        private @Nullable String description;
        private String envKey;
        private @Nullable List<String> excludeds;
        private String id;
        private @Nullable List<String> includeds;
        private String key;
        private String name;
        private String projectKey;
        private @Nullable List<GetSegmentRule> rules;
        private @Nullable List<String> tags;
        public Builder() {}
        public Builder(GetSegmentResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationDate = defaults.creationDate;
    	      this.description = defaults.description;
    	      this.envKey = defaults.envKey;
    	      this.excludeds = defaults.excludeds;
    	      this.id = defaults.id;
    	      this.includeds = defaults.includeds;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.projectKey = defaults.projectKey;
    	      this.rules = defaults.rules;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder creationDate(Integer creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder envKey(String envKey) {
            this.envKey = Objects.requireNonNull(envKey);
            return this;
        }
        @CustomType.Setter
        public Builder excludeds(@Nullable List<String> excludeds) {
            this.excludeds = excludeds;
            return this;
        }
        public Builder excludeds(String... excludeds) {
            return excludeds(List.of(excludeds));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder includeds(@Nullable List<String> includeds) {
            this.includeds = includeds;
            return this;
        }
        public Builder includeds(String... includeds) {
            return includeds(List.of(includeds));
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectKey(String projectKey) {
            this.projectKey = Objects.requireNonNull(projectKey);
            return this;
        }
        @CustomType.Setter
        public Builder rules(@Nullable List<GetSegmentRule> rules) {
            this.rules = rules;
            return this;
        }
        public Builder rules(GetSegmentRule... rules) {
            return rules(List.of(rules));
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public GetSegmentResult build() {
            final var o = new GetSegmentResult();
            o.creationDate = creationDate;
            o.description = description;
            o.envKey = envKey;
            o.excludeds = excludeds;
            o.id = id;
            o.includeds = includeds;
            o.key = key;
            o.name = name;
            o.projectKey = projectKey;
            o.rules = rules;
            o.tags = tags;
            return o;
        }
    }
}
