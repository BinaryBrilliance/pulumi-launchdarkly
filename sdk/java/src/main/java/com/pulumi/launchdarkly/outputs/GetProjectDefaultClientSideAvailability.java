// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.util.Objects;

@CustomType
public final class GetProjectDefaultClientSideAvailability {
    /**
     * @return When set to true, the flags in this project are available to SDKs using the client-side ID by default.
     * 
     */
    private Boolean usingEnvironmentId;
    /**
     * @return When set to true, the flags in this project are available to SDKs using a mobile key by default.
     * 
     */
    private Boolean usingMobileKey;

    private GetProjectDefaultClientSideAvailability() {}
    /**
     * @return When set to true, the flags in this project are available to SDKs using the client-side ID by default.
     * 
     */
    public Boolean usingEnvironmentId() {
        return this.usingEnvironmentId;
    }
    /**
     * @return When set to true, the flags in this project are available to SDKs using a mobile key by default.
     * 
     */
    public Boolean usingMobileKey() {
        return this.usingMobileKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectDefaultClientSideAvailability defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean usingEnvironmentId;
        private Boolean usingMobileKey;
        public Builder() {}
        public Builder(GetProjectDefaultClientSideAvailability defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.usingEnvironmentId = defaults.usingEnvironmentId;
    	      this.usingMobileKey = defaults.usingMobileKey;
        }

        @CustomType.Setter
        public Builder usingEnvironmentId(Boolean usingEnvironmentId) {
            this.usingEnvironmentId = Objects.requireNonNull(usingEnvironmentId);
            return this;
        }
        @CustomType.Setter
        public Builder usingMobileKey(Boolean usingMobileKey) {
            this.usingMobileKey = Objects.requireNonNull(usingMobileKey);
            return this;
        }
        public GetProjectDefaultClientSideAvailability build() {
            final var o = new GetProjectDefaultClientSideAvailability();
            o.usingEnvironmentId = usingEnvironmentId;
            o.usingMobileKey = usingMobileKey;
            return o;
        }
    }
}
