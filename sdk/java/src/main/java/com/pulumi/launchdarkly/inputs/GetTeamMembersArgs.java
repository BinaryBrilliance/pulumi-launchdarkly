// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.launchdarkly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTeamMembersArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTeamMembersArgs Empty = new GetTeamMembersArgs();

    /**
     * An array of unique email addresses associated with the team members.
     * 
     */
    @Import(name="emails", required=true)
    private Output<List<String>> emails;

    /**
     * @return An array of unique email addresses associated with the team members.
     * 
     */
    public Output<List<String>> emails() {
        return this.emails;
    }

    /**
     * A boolean to determine whether to ignore members that weren&#39;t found.
     * 
     */
    @Import(name="ignoreMissing")
    private @Nullable Output<Boolean> ignoreMissing;

    /**
     * @return A boolean to determine whether to ignore members that weren&#39;t found.
     * 
     */
    public Optional<Output<Boolean>> ignoreMissing() {
        return Optional.ofNullable(this.ignoreMissing);
    }

    private GetTeamMembersArgs() {}

    private GetTeamMembersArgs(GetTeamMembersArgs $) {
        this.emails = $.emails;
        this.ignoreMissing = $.ignoreMissing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTeamMembersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTeamMembersArgs $;

        public Builder() {
            $ = new GetTeamMembersArgs();
        }

        public Builder(GetTeamMembersArgs defaults) {
            $ = new GetTeamMembersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emails An array of unique email addresses associated with the team members.
         * 
         * @return builder
         * 
         */
        public Builder emails(Output<List<String>> emails) {
            $.emails = emails;
            return this;
        }

        /**
         * @param emails An array of unique email addresses associated with the team members.
         * 
         * @return builder
         * 
         */
        public Builder emails(List<String> emails) {
            return emails(Output.of(emails));
        }

        /**
         * @param emails An array of unique email addresses associated with the team members.
         * 
         * @return builder
         * 
         */
        public Builder emails(String... emails) {
            return emails(List.of(emails));
        }

        /**
         * @param ignoreMissing A boolean to determine whether to ignore members that weren&#39;t found.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissing(@Nullable Output<Boolean> ignoreMissing) {
            $.ignoreMissing = ignoreMissing;
            return this;
        }

        /**
         * @param ignoreMissing A boolean to determine whether to ignore members that weren&#39;t found.
         * 
         * @return builder
         * 
         */
        public Builder ignoreMissing(Boolean ignoreMissing) {
            return ignoreMissing(Output.of(ignoreMissing));
        }

        public GetTeamMembersArgs build() {
            $.emails = Objects.requireNonNull($.emails, "expected parameter 'emails' to be non-null");
            return $;
        }
    }

}
