// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Launchdarkly
{
    /// <summary>
    /// Provides a LaunchDarkly audit log subscription resource.
    /// 
    /// This resource allows you to create and manage LaunchDarkly audit log subscriptions.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Launchdarkly = Lbrlabs.PulumiPackage.Launchdarkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Launchdarkly.AuditLogSubscription("example", new()
    ///     {
    ///         Config = 
    ///         {
    ///             { "api_key", "yoursecretkey" },
    ///             { "host_url", "https://api.datadoghq.com" },
    ///         },
    ///         IntegrationKey = "datadog",
    ///         Statements = new[]
    ///         {
    ///             new Launchdarkly.Inputs.AuditLogSubscriptionStatementArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 Effect = "allow",
    ///                 Resources = new[]
    ///                 {
    ///                     "proj/*:env/*:flag/*",
    ///                 },
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "integrations",
    ///             "terraform",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [LaunchdarklyResourceType("launchdarkly:index/auditLogSubscription:AuditLogSubscription")]
    public partial class AuditLogSubscription : global::Pulumi.CustomResource
    {
        [Output("config")]
        public Output<ImmutableDictionary<string, object>> Config { get; private set; } = null!;

        /// <summary>
        /// The integration key. As of January 2022, supported integrations are `"datadog"`, `"dynatrace"`, `"elastic"`, `"honeycomb"`, `"logdna"`, `"msteams"`, `"new-relic-apm"`, `"signalfx"`, `"slack"`, and `"splunk"`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("integrationKey")]
        public Output<string> IntegrationKey { get; private set; } = null!;

        /// <summary>
        /// A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether or not you want your subscription enabled, i.e. to actively send events.
        /// </summary>
        [Output("on")]
        public Output<bool> On { get; private set; } = null!;

        /// <summary>
        /// A block representing the resources to which you wish to subscribe. To learn more about how to configure these blocks, read Nested Subscription Statements Blocks.
        /// </summary>
        [Output("statements")]
        public Output<ImmutableArray<Outputs.AuditLogSubscriptionStatement>> Statements { get; private set; } = null!;

        /// <summary>
        /// Set of tags associated with the subscription object.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a AuditLogSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuditLogSubscription(string name, AuditLogSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("launchdarkly:index/auditLogSubscription:AuditLogSubscription", name, args ?? new AuditLogSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuditLogSubscription(string name, Input<string> id, AuditLogSubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("launchdarkly:index/auditLogSubscription:AuditLogSubscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuditLogSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuditLogSubscription Get(string name, Input<string> id, AuditLogSubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new AuditLogSubscription(name, id, state, options);
        }
    }

    public sealed class AuditLogSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        [Input("config", required: true)]
        private InputMap<object>? _config;
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// The integration key. As of January 2022, supported integrations are `"datadog"`, `"dynatrace"`, `"elastic"`, `"honeycomb"`, `"logdna"`, `"msteams"`, `"new-relic-apm"`, `"signalfx"`, `"slack"`, and `"splunk"`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("integrationKey", required: true)]
        public Input<string> IntegrationKey { get; set; } = null!;

        /// <summary>
        /// A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether or not you want your subscription enabled, i.e. to actively send events.
        /// </summary>
        [Input("on", required: true)]
        public Input<bool> On { get; set; } = null!;

        [Input("statements", required: true)]
        private InputList<Inputs.AuditLogSubscriptionStatementArgs>? _statements;

        /// <summary>
        /// A block representing the resources to which you wish to subscribe. To learn more about how to configure these blocks, read Nested Subscription Statements Blocks.
        /// </summary>
        public InputList<Inputs.AuditLogSubscriptionStatementArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.AuditLogSubscriptionStatementArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags associated with the subscription object.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public AuditLogSubscriptionArgs()
        {
        }
        public static new AuditLogSubscriptionArgs Empty => new AuditLogSubscriptionArgs();
    }

    public sealed class AuditLogSubscriptionState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<object>? _config;
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// The integration key. As of January 2022, supported integrations are `"datadog"`, `"dynatrace"`, `"elastic"`, `"honeycomb"`, `"logdna"`, `"msteams"`, `"new-relic-apm"`, `"signalfx"`, `"slack"`, and `"splunk"`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("integrationKey")]
        public Input<string>? IntegrationKey { get; set; }

        /// <summary>
        /// A human-friendly name for your audit log subscription viewable from within the LaunchDarkly Integrations page.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether or not you want your subscription enabled, i.e. to actively send events.
        /// </summary>
        [Input("on")]
        public Input<bool>? On { get; set; }

        [Input("statements")]
        private InputList<Inputs.AuditLogSubscriptionStatementGetArgs>? _statements;

        /// <summary>
        /// A block representing the resources to which you wish to subscribe. To learn more about how to configure these blocks, read Nested Subscription Statements Blocks.
        /// </summary>
        public InputList<Inputs.AuditLogSubscriptionStatementGetArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.AuditLogSubscriptionStatementGetArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags associated with the subscription object.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public AuditLogSubscriptionState()
        {
        }
        public static new AuditLogSubscriptionState Empty => new AuditLogSubscriptionState();
    }
}
