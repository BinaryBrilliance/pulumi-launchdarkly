// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Launchdarkly
{
    public static class GetFeatureFlagEnvironment
    {
        /// <summary>
        /// Provides a LaunchDarkly environment-specific feature flag data source.
        /// 
        /// This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlagEnvironment.Invoke(new()
        ///     {
        ///         EnvKey = "example-env",
        ///         FlagId = "example-project/example-flag",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFeatureFlagEnvironmentResult> InvokeAsync(GetFeatureFlagEnvironmentArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFeatureFlagEnvironmentResult>("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", args ?? new GetFeatureFlagEnvironmentArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly environment-specific feature flag data source.
        /// 
        /// This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetFeatureFlagEnvironment.Invoke(new()
        ///     {
        ///         EnvKey = "example-env",
        ///         FlagId = "example-project/example-flag",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFeatureFlagEnvironmentResult> Invoke(GetFeatureFlagEnvironmentInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFeatureFlagEnvironmentResult>("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", args ?? new GetFeatureFlagEnvironmentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFeatureFlagEnvironmentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment key.
        /// </summary>
        [Input("envKey", required: true)]
        public string EnvKey { get; set; } = null!;

        [Input("fallthrough")]
        public Inputs.GetFeatureFlagEnvironmentFallthroughArgs? Fallthrough { get; set; }

        /// <summary>
        /// The feature flag's unique `id` in the format `project_key/flag_key`.
        /// </summary>
        [Input("flagId", required: true)]
        public string FlagId { get; set; } = null!;

        /// <summary>
        /// The index of the variation served when targeting is disabled.
        /// </summary>
        [Input("offVariation")]
        public int? OffVariation { get; set; }

        /// <summary>
        /// Whether targeting is enabled.
        /// </summary>
        [Input("on")]
        public bool? On { get; set; }

        [Input("prerequisites")]
        private List<Inputs.GetFeatureFlagEnvironmentPrerequisiteArgs>? _prerequisites;

        /// <summary>
        /// List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
        /// </summary>
        public List<Inputs.GetFeatureFlagEnvironmentPrerequisiteArgs> Prerequisites
        {
            get => _prerequisites ?? (_prerequisites = new List<Inputs.GetFeatureFlagEnvironmentPrerequisiteArgs>());
            set => _prerequisites = value;
        }

        [Input("rules")]
        private List<Inputs.GetFeatureFlagEnvironmentRuleArgs>? _rules;

        /// <summary>
        /// List of logical targeting rules. To learn more, read Nested Rules Blocks.
        /// </summary>
        public List<Inputs.GetFeatureFlagEnvironmentRuleArgs> Rules
        {
            get => _rules ?? (_rules = new List<Inputs.GetFeatureFlagEnvironmentRuleArgs>());
            set => _rules = value;
        }

        [Input("targets")]
        private List<Inputs.GetFeatureFlagEnvironmentTargetArgs>? _targets;
        public List<Inputs.GetFeatureFlagEnvironmentTargetArgs> Targets
        {
            get => _targets ?? (_targets = new List<Inputs.GetFeatureFlagEnvironmentTargetArgs>());
            set => _targets = value;
        }

        /// <summary>
        /// Whether event data will be sent back to LaunchDarkly.
        /// </summary>
        [Input("trackEvents")]
        public bool? TrackEvents { get; set; }

        public GetFeatureFlagEnvironmentArgs()
        {
        }
        public static new GetFeatureFlagEnvironmentArgs Empty => new GetFeatureFlagEnvironmentArgs();
    }

    public sealed class GetFeatureFlagEnvironmentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The environment key.
        /// </summary>
        [Input("envKey", required: true)]
        public Input<string> EnvKey { get; set; } = null!;

        [Input("fallthrough")]
        public Input<Inputs.GetFeatureFlagEnvironmentFallthroughInputArgs>? Fallthrough { get; set; }

        /// <summary>
        /// The feature flag's unique `id` in the format `project_key/flag_key`.
        /// </summary>
        [Input("flagId", required: true)]
        public Input<string> FlagId { get; set; } = null!;

        /// <summary>
        /// The index of the variation served when targeting is disabled.
        /// </summary>
        [Input("offVariation")]
        public Input<int>? OffVariation { get; set; }

        /// <summary>
        /// Whether targeting is enabled.
        /// </summary>
        [Input("on")]
        public Input<bool>? On { get; set; }

        [Input("prerequisites")]
        private InputList<Inputs.GetFeatureFlagEnvironmentPrerequisiteInputArgs>? _prerequisites;

        /// <summary>
        /// List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
        /// </summary>
        public InputList<Inputs.GetFeatureFlagEnvironmentPrerequisiteInputArgs> Prerequisites
        {
            get => _prerequisites ?? (_prerequisites = new InputList<Inputs.GetFeatureFlagEnvironmentPrerequisiteInputArgs>());
            set => _prerequisites = value;
        }

        [Input("rules")]
        private InputList<Inputs.GetFeatureFlagEnvironmentRuleInputArgs>? _rules;

        /// <summary>
        /// List of logical targeting rules. To learn more, read Nested Rules Blocks.
        /// </summary>
        public InputList<Inputs.GetFeatureFlagEnvironmentRuleInputArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.GetFeatureFlagEnvironmentRuleInputArgs>());
            set => _rules = value;
        }

        [Input("targets")]
        private InputList<Inputs.GetFeatureFlagEnvironmentTargetInputArgs>? _targets;
        public InputList<Inputs.GetFeatureFlagEnvironmentTargetInputArgs> Targets
        {
            get => _targets ?? (_targets = new InputList<Inputs.GetFeatureFlagEnvironmentTargetInputArgs>());
            set => _targets = value;
        }

        /// <summary>
        /// Whether event data will be sent back to LaunchDarkly.
        /// </summary>
        [Input("trackEvents")]
        public Input<bool>? TrackEvents { get; set; }

        public GetFeatureFlagEnvironmentInvokeArgs()
        {
        }
        public static new GetFeatureFlagEnvironmentInvokeArgs Empty => new GetFeatureFlagEnvironmentInvokeArgs();
    }


    [OutputType]
    public sealed class GetFeatureFlagEnvironmentResult
    {
        public readonly string EnvKey;
        public readonly Outputs.GetFeatureFlagEnvironmentFallthroughResult? Fallthrough;
        public readonly string FlagId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The index of the variation served when targeting is disabled.
        /// </summary>
        public readonly int? OffVariation;
        /// <summary>
        /// Whether targeting is enabled.
        /// </summary>
        public readonly bool? On;
        /// <summary>
        /// List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentPrerequisiteResult> Prerequisites;
        /// <summary>
        /// List of logical targeting rules. To learn more, read Nested Rules Blocks.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentRuleResult> Rules;
        public readonly ImmutableArray<Outputs.GetFeatureFlagEnvironmentTargetResult> Targets;
        /// <summary>
        /// Whether event data will be sent back to LaunchDarkly.
        /// </summary>
        public readonly bool? TrackEvents;

        [OutputConstructor]
        private GetFeatureFlagEnvironmentResult(
            string envKey,

            Outputs.GetFeatureFlagEnvironmentFallthroughResult? fallthrough,

            string flagId,

            string id,

            int? offVariation,

            bool? on,

            ImmutableArray<Outputs.GetFeatureFlagEnvironmentPrerequisiteResult> prerequisites,

            ImmutableArray<Outputs.GetFeatureFlagEnvironmentRuleResult> rules,

            ImmutableArray<Outputs.GetFeatureFlagEnvironmentTargetResult> targets,

            bool? trackEvents)
        {
            EnvKey = envKey;
            Fallthrough = fallthrough;
            FlagId = flagId;
            Id = id;
            OffVariation = offVariation;
            On = on;
            Prerequisites = prerequisites;
            Rules = rules;
            Targets = targets;
            TrackEvents = trackEvents;
        }
    }
}
