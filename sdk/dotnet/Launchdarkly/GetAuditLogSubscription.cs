// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Launchdarkly
{
    public static class GetAuditLogSubscription
    {
        /// <summary>
        /// Provides a LaunchDarkly audit log subscription data source.
        /// 
        /// This data source allows you to retrieve information about LaunchDarkly audit log subscriptions.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Launchdarkly.GetAuditLogSubscription.Invoke(new()
        ///     {
        ///         Id = "5f0cd446a77cba0b4c5644a7",
        ///         IntegrationKey = "msteams",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAuditLogSubscriptionResult> InvokeAsync(GetAuditLogSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuditLogSubscriptionResult>("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args ?? new GetAuditLogSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly audit log subscription data source.
        /// 
        /// This data source allows you to retrieve information about LaunchDarkly audit log subscriptions.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Launchdarkly.GetAuditLogSubscription.Invoke(new()
        ///     {
        ///         Id = "5f0cd446a77cba0b4c5644a7",
        ///         IntegrationKey = "msteams",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAuditLogSubscriptionResult> Invoke(GetAuditLogSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuditLogSubscriptionResult>("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args ?? new GetAuditLogSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuditLogSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        private Dictionary<string, object>? _config;

        /// <summary>
        /// A block of configuration fields associated with your integration type.
        /// </summary>
        public Dictionary<string, object> Config
        {
            get => _config ?? (_config = new Dictionary<string, object>());
            set => _config = value;
        }

        /// <summary>
        /// The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The integration key. As of February 2022, supported integrations are `"datadog"`, `"dynatrace"`, `"elastic"`, `"honeycomb"`, `"logdna"`, `"msteams"`, `"new-relic-apm"`, `"signalfx"`, `"slack"`, and `"splunk"`.
        /// </summary>
        [Input("integrationKey", required: true)]
        public string IntegrationKey { get; set; } = null!;

        /// <summary>
        /// The subscription's human-readable name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Whether the subscription is enabled.
        /// </summary>
        [Input("on")]
        public bool? On { get; set; }

        [Input("statements")]
        private List<Inputs.GetAuditLogSubscriptionStatementArgs>? _statements;

        /// <summary>
        /// The statement block used to filter subscription events. To learn more, read Statement Blocks.
        /// </summary>
        public List<Inputs.GetAuditLogSubscriptionStatementArgs> Statements
        {
            get => _statements ?? (_statements = new List<Inputs.GetAuditLogSubscriptionStatementArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// Set of tags associated with the subscription.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetAuditLogSubscriptionArgs()
        {
        }
        public static new GetAuditLogSubscriptionArgs Empty => new GetAuditLogSubscriptionArgs();
    }

    public sealed class GetAuditLogSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("config")]
        private InputMap<object>? _config;

        /// <summary>
        /// A block of configuration fields associated with your integration type.
        /// </summary>
        public InputMap<object> Config
        {
            get => _config ?? (_config = new InputMap<object>());
            set => _config = value;
        }

        /// <summary>
        /// The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The integration key. As of February 2022, supported integrations are `"datadog"`, `"dynatrace"`, `"elastic"`, `"honeycomb"`, `"logdna"`, `"msteams"`, `"new-relic-apm"`, `"signalfx"`, `"slack"`, and `"splunk"`.
        /// </summary>
        [Input("integrationKey", required: true)]
        public Input<string> IntegrationKey { get; set; } = null!;

        /// <summary>
        /// The subscription's human-readable name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the subscription is enabled.
        /// </summary>
        [Input("on")]
        public Input<bool>? On { get; set; }

        [Input("statements")]
        private InputList<Inputs.GetAuditLogSubscriptionStatementInputArgs>? _statements;

        /// <summary>
        /// The statement block used to filter subscription events. To learn more, read Statement Blocks.
        /// </summary>
        public InputList<Inputs.GetAuditLogSubscriptionStatementInputArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.GetAuditLogSubscriptionStatementInputArgs>());
            set => _statements = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags associated with the subscription.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetAuditLogSubscriptionInvokeArgs()
        {
        }
        public static new GetAuditLogSubscriptionInvokeArgs Empty => new GetAuditLogSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuditLogSubscriptionResult
    {
        /// <summary>
        /// A block of configuration fields associated with your integration type.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Config;
        public readonly string Id;
        public readonly string IntegrationKey;
        /// <summary>
        /// The subscription's human-readable name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Whether the subscription is enabled.
        /// </summary>
        public readonly bool? On;
        /// <summary>
        /// The statement block used to filter subscription events. To learn more, read Statement Blocks.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAuditLogSubscriptionStatementResult> Statements;
        /// <summary>
        /// Set of tags associated with the subscription.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetAuditLogSubscriptionResult(
            ImmutableDictionary<string, object>? config,

            string id,

            string integrationKey,

            string? name,

            bool? on,

            ImmutableArray<Outputs.GetAuditLogSubscriptionStatementResult> statements,

            ImmutableArray<string> tags)
        {
            Config = config;
            Id = id;
            IntegrationKey = integrationKey;
            Name = name;
            On = on;
            Statements = statements;
            Tags = tags;
        }
    }
}
