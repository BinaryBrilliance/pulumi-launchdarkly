// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Launchdarkly
{
    public static class GetMetric
    {
        /// <summary>
        /// Provides a LaunchDarkly metric data source.
        /// 
        /// This data source allows you to retrieve metric information from your LaunchDarkly organization.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetMetric.Invoke(new()
        ///     {
        ///         Key = "example-metric",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMetricResult> InvokeAsync(GetMetricArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMetricResult>("launchdarkly:index/getMetric:getMetric", args ?? new GetMetricArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly metric data source.
        /// 
        /// This data source allows you to retrieve metric information from your LaunchDarkly organization.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetMetric.Invoke(new()
        ///     {
        ///         Key = "example-metric",
        ///         ProjectKey = "example-project",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMetricResult> Invoke(GetMetricInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMetricResult>("launchdarkly:index/getMetric:getMetric", args ?? new GetMetricInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMetricArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The description of the metric's purpose.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// The event key to watch for `custom` metrics.
        /// </summary>
        [Input("eventKey")]
        public string? EventKey { get; set; }

        [Input("isActive")]
        public bool? IsActive { get; set; }

        [Input("isNumeric")]
        public bool? IsNumeric { get; set; }

        /// <summary>
        /// The metric's unique key.
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        /// <summary>
        /// The metric type. Available choices are `click`, `custom`, and `pageview`.
        /// </summary>
        [Input("kind")]
        public string? Kind { get; set; }

        [Input("maintainerId")]
        public string? MaintainerId { get; set; }

        /// <summary>
        /// The name of the metric.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The metric's project key.
        /// </summary>
        [Input("projectKey", required: true)]
        public string ProjectKey { get; set; } = null!;

        /// <summary>
        /// The CSS selector for `click` metrics.
        /// </summary>
        [Input("selector")]
        public string? Selector { get; set; }

        /// <summary>
        /// The success criteria for numeric `custom` metrics.
        /// </summary>
        [Input("successCriteria")]
        public string? SuccessCriteria { get; set; }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// Set of tags associated with the metric.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The unit for numeric `custom` metrics.
        /// </summary>
        [Input("unit")]
        public string? Unit { get; set; }

        [Input("urls")]
        private List<Inputs.GetMetricUrlArgs>? _urls;

        /// <summary>
        /// Which URLs the metric watches.
        /// </summary>
        public List<Inputs.GetMetricUrlArgs> Urls
        {
            get => _urls ?? (_urls = new List<Inputs.GetMetricUrlArgs>());
            set => _urls = value;
        }

        public GetMetricArgs()
        {
        }
        public static new GetMetricArgs Empty => new GetMetricArgs();
    }

    public sealed class GetMetricInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The description of the metric's purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The event key to watch for `custom` metrics.
        /// </summary>
        [Input("eventKey")]
        public Input<string>? EventKey { get; set; }

        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        [Input("isNumeric")]
        public Input<bool>? IsNumeric { get; set; }

        /// <summary>
        /// The metric's unique key.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The metric type. Available choices are `click`, `custom`, and `pageview`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The name of the metric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The metric's project key.
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        /// <summary>
        /// The CSS selector for `click` metrics.
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        /// <summary>
        /// The success criteria for numeric `custom` metrics.
        /// </summary>
        [Input("successCriteria")]
        public Input<string>? SuccessCriteria { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags associated with the metric.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The unit for numeric `custom` metrics.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        [Input("urls")]
        private InputList<Inputs.GetMetricUrlInputArgs>? _urls;

        /// <summary>
        /// Which URLs the metric watches.
        /// </summary>
        public InputList<Inputs.GetMetricUrlInputArgs> Urls
        {
            get => _urls ?? (_urls = new InputList<Inputs.GetMetricUrlInputArgs>());
            set => _urls = value;
        }

        public GetMetricInvokeArgs()
        {
        }
        public static new GetMetricInvokeArgs Empty => new GetMetricInvokeArgs();
    }


    [OutputType]
    public sealed class GetMetricResult
    {
        /// <summary>
        /// The description of the metric's purpose.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The event key to watch for `custom` metrics.
        /// </summary>
        public readonly string? EventKey;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsActive;
        public readonly bool? IsNumeric;
        public readonly string Key;
        /// <summary>
        /// The metric type. Available choices are `click`, `custom`, and `pageview`.
        /// </summary>
        public readonly string? Kind;
        public readonly string MaintainerId;
        /// <summary>
        /// The name of the metric.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The metrics's project key.
        /// </summary>
        public readonly string ProjectKey;
        /// <summary>
        /// The CSS selector for `click` metrics.
        /// </summary>
        public readonly string? Selector;
        /// <summary>
        /// The success criteria for numeric `custom` metrics.
        /// </summary>
        public readonly string? SuccessCriteria;
        /// <summary>
        /// Set of tags associated with the metric.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The unit for numeric `custom` metrics.
        /// </summary>
        public readonly string? Unit;
        /// <summary>
        /// Which URLs the metric watches.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMetricUrlResult> Urls;

        [OutputConstructor]
        private GetMetricResult(
            string? description,

            string? eventKey,

            string id,

            bool? isActive,

            bool? isNumeric,

            string key,

            string? kind,

            string maintainerId,

            string? name,

            string projectKey,

            string? selector,

            string? successCriteria,

            ImmutableArray<string> tags,

            string? unit,

            ImmutableArray<Outputs.GetMetricUrlResult> urls)
        {
            Description = description;
            EventKey = eventKey;
            Id = id;
            IsActive = isActive;
            IsNumeric = isNumeric;
            Key = key;
            Kind = kind;
            MaintainerId = maintainerId;
            Name = name;
            ProjectKey = projectKey;
            Selector = selector;
            SuccessCriteria = successCriteria;
            Tags = tags;
            Unit = unit;
            Urls = urls;
        }
    }
}
