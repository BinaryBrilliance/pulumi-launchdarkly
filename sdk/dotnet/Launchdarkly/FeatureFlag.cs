// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Launchdarkly
{
    /// <summary>
    /// Provides a LaunchDarkly feature flag resource.
    /// 
    /// This resource allows you to create and manage feature flags within your LaunchDarkly organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Launchdarkly = Lbrlabs.PulumiPackage.Launchdarkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var buildingMaterials = new Launchdarkly.FeatureFlag("buildingMaterials", new()
    ///     {
    ///         ProjectKey = launchdarkly_project.Example.Key,
    ///         Key = "building-materials",
    ///         Description = "this is a multivariate flag with string variations.",
    ///         VariationType = "string",
    ///         Variations = new[]
    ///         {
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Value = "straw",
    ///                 Name = "Straw",
    ///                 Description = "Watch out for wind.",
    ///             },
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Value = "sticks",
    ///                 Name = "Sticks",
    ///                 Description = "Sturdier than straw",
    ///             },
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Value = "bricks",
    ///                 Name = "Bricks",
    ///                 Description = "The strongest variation",
    ///             },
    ///         },
    ///         Defaults = new Launchdarkly.Inputs.FeatureFlagDefaultsArgs
    ///         {
    ///             OnVariation = 2,
    ///             OffVariation = 0,
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "example",
    ///             "terraform",
    ///             "multivariate",
    ///             "building-materials",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Launchdarkly = Lbrlabs.PulumiPackage.Launchdarkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var jsonExample = new Launchdarkly.FeatureFlag("jsonExample", new()
    ///     {
    ///         ProjectKey = "example-project",
    ///         Key = "json-example",
    ///         VariationType = "json",
    ///         Variations = new[]
    ///         {
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Name = "Single foo",
    ///                 Value = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["foo"] = "bar",
    ///                 }),
    ///             },
    ///             new Launchdarkly.Inputs.FeatureFlagVariationArgs
    ///             {
    ///                 Name = "Multiple foos",
    ///                 Value = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["foos"] = new[]
    ///                     {
    ///                         "bar1",
    ///                         "bar2",
    ///                     },
    ///                 }),
    ///             },
    ///         },
    ///         Defaults = new Launchdarkly.Inputs.FeatureFlagDefaultsArgs
    ///         {
    ///             OnVariation = 1,
    ///             OffVariation = 0,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can import a feature flag using the feature flag's ID in the format `project_key/flag_key`. For example
    /// 
    /// ```sh
    ///  $ pulumi import launchdarkly:index/featureFlag:FeatureFlag building_materials example-project/building-materials
    /// ```
    /// </summary>
    [LaunchdarklyResourceType("launchdarkly:index/featureFlag:FeatureFlag")]
    public partial class FeatureFlag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to archive the flag
        /// </summary>
        [Output("archived")]
        public Output<bool?> Archived { get; private set; } = null!;

        /// <summary>
        /// A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
        /// </summary>
        [Output("clientSideAvailabilities")]
        public Output<ImmutableArray<Outputs.FeatureFlagClientSideAvailability>> ClientSideAvailabilities { get; private set; } = null!;

        /// <summary>
        /// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
        /// </summary>
        [Output("customProperties")]
        public Output<ImmutableArray<Outputs.FeatureFlagCustomProperty>> CustomProperties { get; private set; } = null!;

        /// <summary>
        /// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
        /// </summary>
        [Output("defaults")]
        public Output<Outputs.FeatureFlagDefaults> Defaults { get; private set; } = null!;

        /// <summary>
        /// The feature flag's description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// **Deprecated** (Optional) Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatability.
        /// </summary>
        [Output("includeInSnippet")]
        public Output<bool> IncludeInSnippet { get; private set; } = null!;

        /// <summary>
        /// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The LaunchDarkly id of the user who will maintain the flag. If not set, the API will automatically apply the member
        /// associated with your Terraform API key or the most recently set maintainer
        /// </summary>
        [Output("maintainerId")]
        public Output<string> MaintainerId { get; private set; } = null!;

        /// <summary>
        /// The human-readable name of the feature flag.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("projectKey")]
        public Output<string> ProjectKey { get; private set; } = null!;

        /// <summary>
        /// Set of feature flag tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the flag is a temporary flag.
        /// </summary>
        [Output("temporary")]
        public Output<bool?> Temporary { get; private set; } = null!;

        /// <summary>
        /// The feature flag's variation type: `boolean`, `string`, `number` or `json`.
        /// </summary>
        [Output("variationType")]
        public Output<string> VariationType { get; private set; } = null!;

        /// <summary>
        /// List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
        /// </summary>
        [Output("variations")]
        public Output<ImmutableArray<Outputs.FeatureFlagVariation>> Variations { get; private set; } = null!;


        /// <summary>
        /// Create a FeatureFlag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FeatureFlag(string name, FeatureFlagArgs args, CustomResourceOptions? options = null)
            : base("launchdarkly:index/featureFlag:FeatureFlag", name, args ?? new FeatureFlagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FeatureFlag(string name, Input<string> id, FeatureFlagState? state = null, CustomResourceOptions? options = null)
            : base("launchdarkly:index/featureFlag:FeatureFlag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FeatureFlag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FeatureFlag Get(string name, Input<string> id, FeatureFlagState? state = null, CustomResourceOptions? options = null)
        {
            return new FeatureFlag(name, id, state, options);
        }
    }

    public sealed class FeatureFlagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to archive the flag
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        [Input("clientSideAvailabilities")]
        private InputList<Inputs.FeatureFlagClientSideAvailabilityArgs>? _clientSideAvailabilities;

        /// <summary>
        /// A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
        /// </summary>
        public InputList<Inputs.FeatureFlagClientSideAvailabilityArgs> ClientSideAvailabilities
        {
            get => _clientSideAvailabilities ?? (_clientSideAvailabilities = new InputList<Inputs.FeatureFlagClientSideAvailabilityArgs>());
            set => _clientSideAvailabilities = value;
        }

        [Input("customProperties")]
        private InputList<Inputs.FeatureFlagCustomPropertyArgs>? _customProperties;

        /// <summary>
        /// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
        /// </summary>
        public InputList<Inputs.FeatureFlagCustomPropertyArgs> CustomProperties
        {
            get => _customProperties ?? (_customProperties = new InputList<Inputs.FeatureFlagCustomPropertyArgs>());
            set => _customProperties = value;
        }

        /// <summary>
        /// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
        /// </summary>
        [Input("defaults")]
        public Input<Inputs.FeatureFlagDefaultsArgs>? Defaults { get; set; }

        /// <summary>
        /// The feature flag's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// **Deprecated** (Optional) Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatability.
        /// </summary>
        [Input("includeInSnippet")]
        public Input<bool>? IncludeInSnippet { get; set; }

        /// <summary>
        /// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The LaunchDarkly id of the user who will maintain the flag. If not set, the API will automatically apply the member
        /// associated with your Terraform API key or the most recently set maintainer
        /// </summary>
        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The human-readable name of the feature flag.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of feature flag tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies whether the flag is a temporary flag.
        /// </summary>
        [Input("temporary")]
        public Input<bool>? Temporary { get; set; }

        /// <summary>
        /// The feature flag's variation type: `boolean`, `string`, `number` or `json`.
        /// </summary>
        [Input("variationType", required: true)]
        public Input<string> VariationType { get; set; } = null!;

        [Input("variations")]
        private InputList<Inputs.FeatureFlagVariationArgs>? _variations;

        /// <summary>
        /// List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
        /// </summary>
        public InputList<Inputs.FeatureFlagVariationArgs> Variations
        {
            get => _variations ?? (_variations = new InputList<Inputs.FeatureFlagVariationArgs>());
            set => _variations = value;
        }

        public FeatureFlagArgs()
        {
        }
        public static new FeatureFlagArgs Empty => new FeatureFlagArgs();
    }

    public sealed class FeatureFlagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to archive the flag
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        [Input("clientSideAvailabilities")]
        private InputList<Inputs.FeatureFlagClientSideAvailabilityGetArgs>? _clientSideAvailabilities;

        /// <summary>
        /// A block describing whether this flag should be made available to the client-side JavaScript SDK using the client-side Id, mobile key, or both. This value gets its default from your project configuration if not set. To learn more, read Nested Client-Side Availability Block.
        /// </summary>
        public InputList<Inputs.FeatureFlagClientSideAvailabilityGetArgs> ClientSideAvailabilities
        {
            get => _clientSideAvailabilities ?? (_clientSideAvailabilities = new InputList<Inputs.FeatureFlagClientSideAvailabilityGetArgs>());
            set => _clientSideAvailabilities = value;
        }

        [Input("customProperties")]
        private InputList<Inputs.FeatureFlagCustomPropertyGetArgs>? _customProperties;

        /// <summary>
        /// List of nested blocks describing the feature flag's [custom properties](https://docs.launchdarkly.com/home/connecting/custom-properties). To learn more, read Nested Custom Properties.
        /// </summary>
        public InputList<Inputs.FeatureFlagCustomPropertyGetArgs> CustomProperties
        {
            get => _customProperties ?? (_customProperties = new InputList<Inputs.FeatureFlagCustomPropertyGetArgs>());
            set => _customProperties = value;
        }

        /// <summary>
        /// A block containing the indices of the variations to be used as the default on and off variations in all new environments. Flag configurations in existing environments will not be changed nor updated if the configuration block is removed. To learn more, read Nested Defaults Blocks.
        /// </summary>
        [Input("defaults")]
        public Input<Inputs.FeatureFlagDefaultsGetArgs>? Defaults { get; set; }

        /// <summary>
        /// The feature flag's description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// **Deprecated** (Optional) Specifies whether this flag should be made available to the client-side JavaScript SDK using the client-side Id. This value gets its default from your project configuration if not set. `include_in_snippet` is now deprecated. Please migrate to `client_side_availability.using_environment_id` to maintain future compatability.
        /// </summary>
        [Input("includeInSnippet")]
        public Input<bool>? IncludeInSnippet { get; set; }

        /// <summary>
        /// The unique feature flag key that references the flag in your application code. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The LaunchDarkly id of the user who will maintain the flag. If not set, the API will automatically apply the member
        /// associated with your Terraform API key or the most recently set maintainer
        /// </summary>
        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The human-readable name of the feature flag.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The feature flag's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of feature flag tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies whether the flag is a temporary flag.
        /// </summary>
        [Input("temporary")]
        public Input<bool>? Temporary { get; set; }

        /// <summary>
        /// The feature flag's variation type: `boolean`, `string`, `number` or `json`.
        /// </summary>
        [Input("variationType")]
        public Input<string>? VariationType { get; set; }

        [Input("variations")]
        private InputList<Inputs.FeatureFlagVariationGetArgs>? _variations;

        /// <summary>
        /// List of nested blocks describing the variations associated with the feature flag. You must specify at least two variations. To learn more, read Nested Variations Blocks.
        /// </summary>
        public InputList<Inputs.FeatureFlagVariationGetArgs> Variations
        {
            get => _variations ?? (_variations = new InputList<Inputs.FeatureFlagVariationGetArgs>());
            set => _variations = value;
        }

        public FeatureFlagState()
        {
        }
        public static new FeatureFlagState Empty => new FeatureFlagState();
    }
}
