// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly segment resource.
 *
 * This resource allows you to create and manage segments within your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@lbrlabs/pulumi-launchdarkly";
 *
 * const example = new launchdarkly.Segment("example", {
 *     key: "example-segment-key",
 *     projectKey: launchdarkly_project.example.key,
 *     envKey: launchdarkly_environment.example.key,
 *     description: "This segment is managed by Terraform",
 *     tags: [
 *         "segment-tag-1",
 *         "segment-tag-2",
 *     ],
 *     includeds: [
 *         "user1",
 *         "user2",
 *     ],
 *     excludeds: [
 *         "user3",
 *         "user4",
 *     ],
 *     rules: [{
 *         clauses: [{
 *             attribute: "country",
 *             op: "startsWith",
 *             values: [
 *                 "en",
 *                 "de",
 *                 "un",
 *             ],
 *             negate: false,
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * LaunchDarkly segments can be imported using the segment's ID in the form `project_key/env_key/segment_key`, e.g.
 *
 * ```sh
 *  $ pulumi import launchdarkly:index/segment:Segment example example-project/example-environment/example-segment-key
 * ```
 */
export class Segment extends pulumi.CustomResource {
    /**
     * Get an existing Segment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SegmentState, opts?: pulumi.CustomResourceOptions): Segment {
        return new Segment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'launchdarkly:index/segment:Segment';

    /**
     * Returns true if the given object is an instance of Segment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Segment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Segment.__pulumiType;
    }

    /**
     * The segment's creation date represented as a UNIX epoch timestamp.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<number>;
    /**
     * The description of the segment's purpose.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The segment's environment key.
     */
    public readonly envKey!: pulumi.Output<string>;
    /**
     * List of user keys excluded from the segment.
     */
    public readonly excludeds!: pulumi.Output<string[] | undefined>;
    /**
     * List of user keys included in the segment.
     */
    public readonly includeds!: pulumi.Output<string[] | undefined>;
    /**
     * The unique key that references the segment.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The human-friendly name for the segment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The segment's project key.
     */
    public readonly projectKey!: pulumi.Output<string>;
    /**
     * List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
     */
    public readonly rules!: pulumi.Output<outputs.SegmentRule[] | undefined>;
    /**
     * Set of tags for the segment.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Segment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SegmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SegmentArgs | SegmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SegmentState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["envKey"] = state ? state.envKey : undefined;
            resourceInputs["excludeds"] = state ? state.excludeds : undefined;
            resourceInputs["includeds"] = state ? state.includeds : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as SegmentArgs | undefined;
            if ((!args || args.envKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envKey'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.projectKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectKey'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envKey"] = args ? args.envKey : undefined;
            resourceInputs["excludeds"] = args ? args.excludeds : undefined;
            resourceInputs["includeds"] = args ? args.includeds : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Segment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Segment resources.
 */
export interface SegmentState {
    /**
     * The segment's creation date represented as a UNIX epoch timestamp.
     */
    creationDate?: pulumi.Input<number>;
    /**
     * The description of the segment's purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The segment's environment key.
     */
    envKey?: pulumi.Input<string>;
    /**
     * List of user keys excluded from the segment.
     */
    excludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user keys included in the segment.
     */
    includeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique key that references the segment.
     */
    key?: pulumi.Input<string>;
    /**
     * The human-friendly name for the segment.
     */
    name?: pulumi.Input<string>;
    /**
     * The segment's project key.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SegmentRule>[]>;
    /**
     * Set of tags for the segment.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Segment resource.
 */
export interface SegmentArgs {
    /**
     * The description of the segment's purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The segment's environment key.
     */
    envKey: pulumi.Input<string>;
    /**
     * List of user keys excluded from the segment.
     */
    excludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user keys included in the segment.
     */
    includeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique key that references the segment.
     */
    key: pulumi.Input<string>;
    /**
     * The human-friendly name for the segment.
     */
    name?: pulumi.Input<string>;
    /**
     * The segment's project key.
     */
    projectKey: pulumi.Input<string>;
    /**
     * List of nested custom rule blocks to apply to the segment. To learn more, read Nested Rules Blocks.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.SegmentRule>[]>;
    /**
     * Set of tags for the segment.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
