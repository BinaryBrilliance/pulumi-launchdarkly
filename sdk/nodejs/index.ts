// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./accessToken";
export * from "./customRole";
export * from "./destination";
export * from "./environment";
export * from "./featureFlag";
export * from "./featureFlagEnvironment";
export * from "./getEnvironment";
export * from "./getFeatureFlag";
export * from "./getFeatureFlagEnvironment";
export * from "./getProject";
export * from "./getSegment";
export * from "./getTeamMember";
export * from "./getWebhook";
export * from "./project";
export * from "./provider";
export * from "./segment";
export * from "./teamMember";
export * from "./webhook";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AccessToken } from "./accessToken";
import { CustomRole } from "./customRole";
import { Destination } from "./destination";
import { Environment } from "./environment";
import { FeatureFlag } from "./featureFlag";
import { FeatureFlagEnvironment } from "./featureFlagEnvironment";
import { Project } from "./project";
import { Segment } from "./segment";
import { TeamMember } from "./teamMember";
import { Webhook } from "./webhook";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "launchdarkly:index/accessToken:AccessToken":
                return new AccessToken(name, <any>undefined, { urn })
            case "launchdarkly:index/customRole:CustomRole":
                return new CustomRole(name, <any>undefined, { urn })
            case "launchdarkly:index/destination:Destination":
                return new Destination(name, <any>undefined, { urn })
            case "launchdarkly:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "launchdarkly:index/featureFlag:FeatureFlag":
                return new FeatureFlag(name, <any>undefined, { urn })
            case "launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment":
                return new FeatureFlagEnvironment(name, <any>undefined, { urn })
            case "launchdarkly:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "launchdarkly:index/segment:Segment":
                return new Segment(name, <any>undefined, { urn })
            case "launchdarkly:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            case "launchdarkly:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("launchdarkly", "index/accessToken", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/customRole", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/destination", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/environment", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/featureFlag", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/featureFlagEnvironment", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/project", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/segment", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/teamMember", _module)
pulumi.runtime.registerResourceModule("launchdarkly", "index/webhook", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("launchdarkly", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:launchdarkly") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
