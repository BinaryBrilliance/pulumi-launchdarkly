// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly environment-specific feature flag resource.
 *
 * This resource allows you to create and manage environment-specific feature flags attributes within your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi_launchdarkly from "@lbrlabs/pulumi-launchdarkly";
 *
 * const numberEnv = new launchdarkly.FeatureFlagEnvironment("numberEnv", {
 *     flagId: launchdarkly_feature_flag.number.id,
 *     envKey: launchdarkly_environment.staging.key,
 *     on: true,
 *     prerequisites: [{
 *         flagKey: launchdarkly_feature_flag.basic.key,
 *         variation: 0,
 *     }],
 *     targets: [
 *         {
 *             values: ["user0"],
 *             variation: 0,
 *         },
 *         {
 *             values: [
 *                 "user1",
 *                 "user2",
 *             ],
 *             variation: 1,
 *         },
 *     ],
 *     rules: [{
 *         clauses: [
 *             {
 *                 attribute: "country",
 *                 op: "startsWith",
 *                 values: [
 *                     "aus",
 *                     "de",
 *                     "united",
 *                 ],
 *                 negate: false,
 *             },
 *             {
 *                 attribute: "segmentMatch",
 *                 op: "segmentMatch",
 *                 values: [launchdarkly_segment.example.key],
 *                 negate: false,
 *             },
 *         ],
 *         variation: 0,
 *     }],
 *     fallthrough: {
 *         rolloutWeights: [
 *             60000,
 *             40000,
 *             0,
 *         ],
 *     },
 *     offVariation: 2,
 * });
 * ```
 *
 * ## Import
 *
 * LaunchDarkly feature flag environments can be imported using the resource's ID in the form `project_key/env_key/flag_key`, e.g.
 *
 * ```sh
 *  $ pulumi import launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment example example-project/example-env/example-flag-key
 * ```
 */
export class FeatureFlagEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing FeatureFlagEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FeatureFlagEnvironmentState, opts?: pulumi.CustomResourceOptions): FeatureFlagEnvironment {
        return new FeatureFlagEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'launchdarkly:index/featureFlagEnvironment:FeatureFlagEnvironment';

    /**
     * Returns true if the given object is an instance of FeatureFlagEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FeatureFlagEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FeatureFlagEnvironment.__pulumiType;
    }

    /**
     * The environment key.
     */
    public readonly envKey!: pulumi.Output<string>;
    /**
     * - (Required) Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.To learn more, read Nested Fallthrough Block.
     */
    public readonly fallthrough!: pulumi.Output<outputs.FeatureFlagEnvironmentFallthrough>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    public readonly flagId!: pulumi.Output<string>;
    /**
     * The index of the variation to serve if targeting is disabled.
     */
    public readonly offVariation!: pulumi.Output<number>;
    /**
     * - (Optional) Whether targeting is enabled. Defaults to `false` if not set.
     */
    public readonly on!: pulumi.Output<boolean | undefined>;
    /**
     * List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     */
    public readonly prerequisites!: pulumi.Output<outputs.FeatureFlagEnvironmentPrerequisite[] | undefined>;
    /**
     * List of logical targeting rules. To learn more, read Nested Rules Blocks.
     */
    public readonly rules!: pulumi.Output<outputs.FeatureFlagEnvironmentRule[] | undefined>;
    /**
     * - (Optional) Set of nested blocks describing the individual user targets for each variation. To learn more, read Nested Target Blocks.
     */
    public readonly targets!: pulumi.Output<outputs.FeatureFlagEnvironmentTarget[] | undefined>;
    /**
     * Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
     */
    public readonly trackEvents!: pulumi.Output<boolean | undefined>;

    /**
     * Create a FeatureFlagEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FeatureFlagEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FeatureFlagEnvironmentArgs | FeatureFlagEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FeatureFlagEnvironmentState | undefined;
            resourceInputs["envKey"] = state ? state.envKey : undefined;
            resourceInputs["fallthrough"] = state ? state.fallthrough : undefined;
            resourceInputs["flagId"] = state ? state.flagId : undefined;
            resourceInputs["offVariation"] = state ? state.offVariation : undefined;
            resourceInputs["on"] = state ? state.on : undefined;
            resourceInputs["prerequisites"] = state ? state.prerequisites : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["trackEvents"] = state ? state.trackEvents : undefined;
        } else {
            const args = argsOrState as FeatureFlagEnvironmentArgs | undefined;
            if ((!args || args.envKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envKey'");
            }
            if ((!args || args.fallthrough === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fallthrough'");
            }
            if ((!args || args.flagId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flagId'");
            }
            if ((!args || args.offVariation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offVariation'");
            }
            resourceInputs["envKey"] = args ? args.envKey : undefined;
            resourceInputs["fallthrough"] = args ? args.fallthrough : undefined;
            resourceInputs["flagId"] = args ? args.flagId : undefined;
            resourceInputs["offVariation"] = args ? args.offVariation : undefined;
            resourceInputs["on"] = args ? args.on : undefined;
            resourceInputs["prerequisites"] = args ? args.prerequisites : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["trackEvents"] = args ? args.trackEvents : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FeatureFlagEnvironment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FeatureFlagEnvironment resources.
 */
export interface FeatureFlagEnvironmentState {
    /**
     * The environment key.
     */
    envKey?: pulumi.Input<string>;
    /**
     * - (Required) Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.To learn more, read Nested Fallthrough Block.
     */
    fallthrough?: pulumi.Input<inputs.FeatureFlagEnvironmentFallthrough>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    flagId?: pulumi.Input<string>;
    /**
     * The index of the variation to serve if targeting is disabled.
     */
    offVariation?: pulumi.Input<number>;
    /**
     * - (Optional) Whether targeting is enabled. Defaults to `false` if not set.
     */
    on?: pulumi.Input<boolean>;
    /**
     * List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     */
    prerequisites?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentPrerequisite>[]>;
    /**
     * List of logical targeting rules. To learn more, read Nested Rules Blocks.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentRule>[]>;
    /**
     * - (Optional) Set of nested blocks describing the individual user targets for each variation. To learn more, read Nested Target Blocks.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentTarget>[]>;
    /**
     * Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
     */
    trackEvents?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FeatureFlagEnvironment resource.
 */
export interface FeatureFlagEnvironmentArgs {
    /**
     * The environment key.
     */
    envKey: pulumi.Input<string>;
    /**
     * - (Required) Nested block describing the default variation to serve if no `prerequisites`, `target`, or `rules` apply.To learn more, read Nested Fallthrough Block.
     */
    fallthrough: pulumi.Input<inputs.FeatureFlagEnvironmentFallthrough>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    flagId: pulumi.Input<string>;
    /**
     * The index of the variation to serve if targeting is disabled.
     */
    offVariation: pulumi.Input<number>;
    /**
     * - (Optional) Whether targeting is enabled. Defaults to `false` if not set.
     */
    on?: pulumi.Input<boolean>;
    /**
     * List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     */
    prerequisites?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentPrerequisite>[]>;
    /**
     * List of logical targeting rules. To learn more, read Nested Rules Blocks.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentRule>[]>;
    /**
     * - (Optional) Set of nested blocks describing the individual user targets for each variation. To learn more, read Nested Target Blocks.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.FeatureFlagEnvironmentTarget>[]>;
    /**
     * Whether to send event data back to LaunchDarkly. Defaults to `false` if not set.
     */
    trackEvents?: pulumi.Input<boolean>;
}
