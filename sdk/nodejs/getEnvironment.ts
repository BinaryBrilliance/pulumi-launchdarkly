// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly environment data source.
 *
 * This data source allows you to retrieve environment information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = pulumi.output(launchdarkly.getEnvironment({
 *     key: "example-env",
 *     projectKey: "example-project",
 * }));
 * ```
 */
export function getEnvironment(args: GetEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvironmentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("launchdarkly:index/getEnvironment:getEnvironment", {
        "approvalSettings": args.approvalSettings,
        "confirmChanges": args.confirmChanges,
        "defaultTrackEvents": args.defaultTrackEvents,
        "defaultTtl": args.defaultTtl,
        "key": args.key,
        "projectKey": args.projectKey,
        "requireComments": args.requireComments,
        "secureMode": args.secureMode,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getEnvironment.
 */
export interface GetEnvironmentArgs {
    approvalSettings?: inputs.GetEnvironmentApprovalSetting[];
    /**
     * A value of `true` indicates that this environment requires confirmation for flag and segment changes.
     */
    confirmChanges?: boolean;
    /**
     * A value of `true` enables data export for every flag created in this environment. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
     */
    defaultTrackEvents?: boolean;
    /**
     * The TTL for the environment. This will be a numeric value between 0 and 60 in minutes. The TTL setting only applies to environments using the PHP SDK. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
     */
    defaultTtl?: number;
    /**
     * The environment's unique key.
     */
    key: string;
    /**
     * The environment's project key.
     */
    projectKey: string;
    /**
     * A value of `true` indicates that this environment requires comments for flag and segment changes.
     */
    requireComments?: boolean;
    /**
     * A value of true `true` ensures a user of the client-side SDK cannot impersonate another user.
     */
    secureMode?: boolean;
    /**
     * Set of tags associated with the environment.
     */
    tags?: string[];
}

/**
 * A collection of values returned by getEnvironment.
 */
export interface GetEnvironmentResult {
    /**
     * The environment's SDK key.
     */
    readonly apiKey: string;
    readonly approvalSettings: outputs.GetEnvironmentApprovalSetting[];
    /**
     * The environment's client-side ID.
     */
    readonly clientSideId: string;
    /**
     * The color swatch as an RGB hex value with no leading `#`. For example: `000000`.
     */
    readonly color: string;
    /**
     * A value of `true` indicates that this environment requires confirmation for flag and segment changes.
     */
    readonly confirmChanges?: boolean;
    /**
     * A value of `true` enables data export for every flag created in this environment. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
     */
    readonly defaultTrackEvents?: boolean;
    /**
     * The TTL for the environment. This will be a numeric value between 0 and 60 in minutes. The TTL setting only applies to environments using the PHP SDK. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
     */
    readonly defaultTtl?: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly key: string;
    /**
     * The environment's mobile key.
     */
    readonly mobileKey: string;
    /**
     * The name of the environment.
     */
    readonly name: string;
    readonly projectKey: string;
    /**
     * A value of `true` indicates that this environment requires comments for flag and segment changes.
     */
    readonly requireComments?: boolean;
    /**
     * A value of true `true` ensures a user of the client-side SDK cannot impersonate another user.
     */
    readonly secureMode?: boolean;
    /**
     * Set of tags associated with the environment.
     */
    readonly tags?: string[];
}

export function getEnvironmentOutput(args: GetEnvironmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEnvironmentResult> {
    return pulumi.output(args).apply(a => getEnvironment(a, opts))
}

/**
 * A collection of arguments for invoking getEnvironment.
 */
export interface GetEnvironmentOutputArgs {
    approvalSettings?: pulumi.Input<pulumi.Input<inputs.GetEnvironmentApprovalSettingArgs>[]>;
    /**
     * A value of `true` indicates that this environment requires confirmation for flag and segment changes.
     */
    confirmChanges?: pulumi.Input<boolean>;
    /**
     * A value of `true` enables data export for every flag created in this environment. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
     */
    defaultTrackEvents?: pulumi.Input<boolean>;
    /**
     * The TTL for the environment. This will be a numeric value between 0 and 60 in minutes. The TTL setting only applies to environments using the PHP SDK. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
     */
    defaultTtl?: pulumi.Input<number>;
    /**
     * The environment's unique key.
     */
    key: pulumi.Input<string>;
    /**
     * The environment's project key.
     */
    projectKey: pulumi.Input<string>;
    /**
     * A value of `true` indicates that this environment requires comments for flag and segment changes.
     */
    requireComments?: pulumi.Input<boolean>;
    /**
     * A value of true `true` ensures a user of the client-side SDK cannot impersonate another user.
     */
    secureMode?: pulumi.Input<boolean>;
    /**
     * Set of tags associated with the environment.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
