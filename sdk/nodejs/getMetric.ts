// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly metric data source.
 *
 * This data source allows you to retrieve metric information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getMetric({
 *     key: "example-metric",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getMetric(args: GetMetricArgs, opts?: pulumi.InvokeOptions): Promise<GetMetricResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("launchdarkly:index/getMetric:getMetric", {
        "description": args.description,
        "eventKey": args.eventKey,
        "isActive": args.isActive,
        "isNumeric": args.isNumeric,
        "key": args.key,
        "kind": args.kind,
        "maintainerId": args.maintainerId,
        "name": args.name,
        "projectKey": args.projectKey,
        "selector": args.selector,
        "successCriteria": args.successCriteria,
        "tags": args.tags,
        "unit": args.unit,
        "urls": args.urls,
    }, opts);
}

/**
 * A collection of arguments for invoking getMetric.
 */
export interface GetMetricArgs {
    /**
     * The description of the metric's purpose.
     */
    description?: string;
    /**
     * The event key to watch for `custom` metrics.
     */
    eventKey?: string;
    isActive?: boolean;
    isNumeric?: boolean;
    /**
     * The metric's unique key.
     */
    key: string;
    /**
     * The metric type. Available choices are `click`, `custom`, and `pageview`.
     */
    kind?: string;
    maintainerId?: string;
    /**
     * The name of the metric.
     */
    name?: string;
    /**
     * The metric's project key.
     */
    projectKey: string;
    /**
     * The CSS selector for `click` metrics.
     */
    selector?: string;
    /**
     * The success criteria for numeric `custom` metrics.
     */
    successCriteria?: string;
    /**
     * Set of tags associated with the metric.
     */
    tags?: string[];
    /**
     * The unit for numeric `custom` metrics.
     */
    unit?: string;
    /**
     * Which URLs the metric watches.
     */
    urls?: inputs.GetMetricUrl[];
}

/**
 * A collection of values returned by getMetric.
 */
export interface GetMetricResult {
    /**
     * The description of the metric's purpose.
     */
    readonly description?: string;
    /**
     * The event key to watch for `custom` metrics.
     */
    readonly eventKey?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isActive?: boolean;
    readonly isNumeric?: boolean;
    readonly key: string;
    /**
     * The metric type. Available choices are `click`, `custom`, and `pageview`.
     */
    readonly kind?: string;
    readonly maintainerId: string;
    /**
     * The name of the metric.
     */
    readonly name?: string;
    /**
     * The metrics's project key.
     */
    readonly projectKey: string;
    /**
     * The CSS selector for `click` metrics.
     */
    readonly selector?: string;
    /**
     * The success criteria for numeric `custom` metrics.
     */
    readonly successCriteria?: string;
    /**
     * Set of tags associated with the metric.
     */
    readonly tags?: string[];
    /**
     * The unit for numeric `custom` metrics.
     */
    readonly unit?: string;
    /**
     * Which URLs the metric watches.
     */
    readonly urls?: outputs.GetMetricUrl[];
}
/**
 * Provides a LaunchDarkly metric data source.
 *
 * This data source allows you to retrieve metric information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getMetric({
 *     key: "example-metric",
 *     projectKey: "example-project",
 * });
 * ```
 */
export function getMetricOutput(args: GetMetricOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetricResult> {
    return pulumi.output(args).apply((a: any) => getMetric(a, opts))
}

/**
 * A collection of arguments for invoking getMetric.
 */
export interface GetMetricOutputArgs {
    /**
     * The description of the metric's purpose.
     */
    description?: pulumi.Input<string>;
    /**
     * The event key to watch for `custom` metrics.
     */
    eventKey?: pulumi.Input<string>;
    isActive?: pulumi.Input<boolean>;
    isNumeric?: pulumi.Input<boolean>;
    /**
     * The metric's unique key.
     */
    key: pulumi.Input<string>;
    /**
     * The metric type. Available choices are `click`, `custom`, and `pageview`.
     */
    kind?: pulumi.Input<string>;
    maintainerId?: pulumi.Input<string>;
    /**
     * The name of the metric.
     */
    name?: pulumi.Input<string>;
    /**
     * The metric's project key.
     */
    projectKey: pulumi.Input<string>;
    /**
     * The CSS selector for `click` metrics.
     */
    selector?: pulumi.Input<string>;
    /**
     * The success criteria for numeric `custom` metrics.
     */
    successCriteria?: pulumi.Input<string>;
    /**
     * Set of tags associated with the metric.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unit for numeric `custom` metrics.
     */
    unit?: pulumi.Input<string>;
    /**
     * Which URLs the metric watches.
     */
    urls?: pulumi.Input<pulumi.Input<inputs.GetMetricUrlArgs>[]>;
}
