// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly environment-specific feature flag data source.
 *
 * This data source allows you to retrieve environment-specific feature flag information from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = pulumi.output(launchdarkly.getFeatureFlagEnvironment({
 *     envKey: "example-env",
 *     flagId: "example-project/example-flag",
 * }));
 * ```
 */
export function getFeatureFlagEnvironment(args: GetFeatureFlagEnvironmentArgs, opts?: pulumi.InvokeOptions): Promise<GetFeatureFlagEnvironmentResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("launchdarkly:index/getFeatureFlagEnvironment:getFeatureFlagEnvironment", {
        "envKey": args.envKey,
        "fallthrough": args.fallthrough,
        "flagId": args.flagId,
        "offVariation": args.offVariation,
        "on": args.on,
        "prerequisites": args.prerequisites,
        "rules": args.rules,
        "targets": args.targets,
        "trackEvents": args.trackEvents,
    }, opts);
}

/**
 * A collection of arguments for invoking getFeatureFlagEnvironment.
 */
export interface GetFeatureFlagEnvironmentArgs {
    /**
     * The environment key.
     */
    envKey: string;
    fallthrough?: inputs.GetFeatureFlagEnvironmentFallthrough;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    flagId: string;
    /**
     * The index of the variation served when targeting is disabled.
     */
    offVariation?: number;
    /**
     * Whether targeting is enabled.
     */
    on?: boolean;
    /**
     * List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     */
    prerequisites?: inputs.GetFeatureFlagEnvironmentPrerequisite[];
    /**
     * List of logical targeting rules. To learn more, read Nested Rules Blocks.
     */
    rules?: inputs.GetFeatureFlagEnvironmentRule[];
    targets?: inputs.GetFeatureFlagEnvironmentTarget[];
    /**
     * Whether event data will be sent back to LaunchDarkly.
     */
    trackEvents?: boolean;
}

/**
 * A collection of values returned by getFeatureFlagEnvironment.
 */
export interface GetFeatureFlagEnvironmentResult {
    readonly envKey: string;
    readonly fallthrough?: outputs.GetFeatureFlagEnvironmentFallthrough;
    readonly flagId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The index of the variation served when targeting is disabled.
     */
    readonly offVariation?: number;
    /**
     * Whether targeting is enabled.
     */
    readonly on?: boolean;
    /**
     * List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     */
    readonly prerequisites?: outputs.GetFeatureFlagEnvironmentPrerequisite[];
    /**
     * List of logical targeting rules. To learn more, read Nested Rules Blocks.
     */
    readonly rules?: outputs.GetFeatureFlagEnvironmentRule[];
    readonly targets?: outputs.GetFeatureFlagEnvironmentTarget[];
    /**
     * Whether event data will be sent back to LaunchDarkly.
     */
    readonly trackEvents?: boolean;
}

export function getFeatureFlagEnvironmentOutput(args: GetFeatureFlagEnvironmentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFeatureFlagEnvironmentResult> {
    return pulumi.output(args).apply(a => getFeatureFlagEnvironment(a, opts))
}

/**
 * A collection of arguments for invoking getFeatureFlagEnvironment.
 */
export interface GetFeatureFlagEnvironmentOutputArgs {
    /**
     * The environment key.
     */
    envKey: pulumi.Input<string>;
    fallthrough?: pulumi.Input<inputs.GetFeatureFlagEnvironmentFallthroughArgs>;
    /**
     * The feature flag's unique `id` in the format `project_key/flag_key`.
     */
    flagId: pulumi.Input<string>;
    /**
     * The index of the variation served when targeting is disabled.
     */
    offVariation?: pulumi.Input<number>;
    /**
     * Whether targeting is enabled.
     */
    on?: pulumi.Input<boolean>;
    /**
     * List of nested blocks describing prerequisite feature flags rules. To learn more, read Nested Prequisites Blocks.
     */
    prerequisites?: pulumi.Input<pulumi.Input<inputs.GetFeatureFlagEnvironmentPrerequisiteArgs>[]>;
    /**
     * List of logical targeting rules. To learn more, read Nested Rules Blocks.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.GetFeatureFlagEnvironmentRuleArgs>[]>;
    targets?: pulumi.Input<pulumi.Input<inputs.GetFeatureFlagEnvironmentTargetArgs>[]>;
    /**
     * Whether event data will be sent back to LaunchDarkly.
     */
    trackEvents?: pulumi.Input<boolean>;
}
