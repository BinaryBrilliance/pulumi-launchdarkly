// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchdarkly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AccessTokenInlineRole struct {
	// The list of action specifiers defining the actions to which the statement applies.
	Actions []string `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect string `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions []string `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources []string `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the statement applies.
	Resources []string `pulumi:"resources"`
}

// AccessTokenInlineRoleInput is an input type that accepts AccessTokenInlineRoleArgs and AccessTokenInlineRoleOutput values.
// You can construct a concrete instance of `AccessTokenInlineRoleInput` via:
//
//	AccessTokenInlineRoleArgs{...}
type AccessTokenInlineRoleInput interface {
	pulumi.Input

	ToAccessTokenInlineRoleOutput() AccessTokenInlineRoleOutput
	ToAccessTokenInlineRoleOutputWithContext(context.Context) AccessTokenInlineRoleOutput
}

type AccessTokenInlineRoleArgs struct {
	// The list of action specifiers defining the actions to which the statement applies.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect pulumi.StringInput `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the statement applies.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (AccessTokenInlineRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenInlineRole)(nil)).Elem()
}

func (i AccessTokenInlineRoleArgs) ToAccessTokenInlineRoleOutput() AccessTokenInlineRoleOutput {
	return i.ToAccessTokenInlineRoleOutputWithContext(context.Background())
}

func (i AccessTokenInlineRoleArgs) ToAccessTokenInlineRoleOutputWithContext(ctx context.Context) AccessTokenInlineRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenInlineRoleOutput)
}

// AccessTokenInlineRoleArrayInput is an input type that accepts AccessTokenInlineRoleArray and AccessTokenInlineRoleArrayOutput values.
// You can construct a concrete instance of `AccessTokenInlineRoleArrayInput` via:
//
//	AccessTokenInlineRoleArray{ AccessTokenInlineRoleArgs{...} }
type AccessTokenInlineRoleArrayInput interface {
	pulumi.Input

	ToAccessTokenInlineRoleArrayOutput() AccessTokenInlineRoleArrayOutput
	ToAccessTokenInlineRoleArrayOutputWithContext(context.Context) AccessTokenInlineRoleArrayOutput
}

type AccessTokenInlineRoleArray []AccessTokenInlineRoleInput

func (AccessTokenInlineRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessTokenInlineRole)(nil)).Elem()
}

func (i AccessTokenInlineRoleArray) ToAccessTokenInlineRoleArrayOutput() AccessTokenInlineRoleArrayOutput {
	return i.ToAccessTokenInlineRoleArrayOutputWithContext(context.Background())
}

func (i AccessTokenInlineRoleArray) ToAccessTokenInlineRoleArrayOutputWithContext(ctx context.Context) AccessTokenInlineRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenInlineRoleArrayOutput)
}

type AccessTokenInlineRoleOutput struct{ *pulumi.OutputState }

func (AccessTokenInlineRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenInlineRole)(nil)).Elem()
}

func (o AccessTokenInlineRoleOutput) ToAccessTokenInlineRoleOutput() AccessTokenInlineRoleOutput {
	return o
}

func (o AccessTokenInlineRoleOutput) ToAccessTokenInlineRoleOutputWithContext(ctx context.Context) AccessTokenInlineRoleOutput {
	return o
}

// The list of action specifiers defining the actions to which the statement applies.
func (o AccessTokenInlineRoleOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenInlineRole) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o AccessTokenInlineRoleOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v AccessTokenInlineRole) string { return v.Effect }).(pulumi.StringOutput)
}

// The list of action specifiers defining the actions to which the statement does not apply.
func (o AccessTokenInlineRoleOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenInlineRole) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the statement does not apply.
func (o AccessTokenInlineRoleOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenInlineRole) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the statement applies.
func (o AccessTokenInlineRoleOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenInlineRole) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type AccessTokenInlineRoleArrayOutput struct{ *pulumi.OutputState }

func (AccessTokenInlineRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessTokenInlineRole)(nil)).Elem()
}

func (o AccessTokenInlineRoleArrayOutput) ToAccessTokenInlineRoleArrayOutput() AccessTokenInlineRoleArrayOutput {
	return o
}

func (o AccessTokenInlineRoleArrayOutput) ToAccessTokenInlineRoleArrayOutputWithContext(ctx context.Context) AccessTokenInlineRoleArrayOutput {
	return o
}

func (o AccessTokenInlineRoleArrayOutput) Index(i pulumi.IntInput) AccessTokenInlineRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessTokenInlineRole {
		return vs[0].([]AccessTokenInlineRole)[vs[1].(int)]
	}).(AccessTokenInlineRoleOutput)
}

type AccessTokenPolicyStatement struct {
	// The list of action specifiers defining the actions to which the statement applies.
	Actions []string `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect string `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions []string `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources []string `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the statement applies.
	Resources []string `pulumi:"resources"`
}

// AccessTokenPolicyStatementInput is an input type that accepts AccessTokenPolicyStatementArgs and AccessTokenPolicyStatementOutput values.
// You can construct a concrete instance of `AccessTokenPolicyStatementInput` via:
//
//	AccessTokenPolicyStatementArgs{...}
type AccessTokenPolicyStatementInput interface {
	pulumi.Input

	ToAccessTokenPolicyStatementOutput() AccessTokenPolicyStatementOutput
	ToAccessTokenPolicyStatementOutputWithContext(context.Context) AccessTokenPolicyStatementOutput
}

type AccessTokenPolicyStatementArgs struct {
	// The list of action specifiers defining the actions to which the statement applies.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect pulumi.StringInput `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the statement does not apply.
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the statement applies.
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (AccessTokenPolicyStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenPolicyStatement)(nil)).Elem()
}

func (i AccessTokenPolicyStatementArgs) ToAccessTokenPolicyStatementOutput() AccessTokenPolicyStatementOutput {
	return i.ToAccessTokenPolicyStatementOutputWithContext(context.Background())
}

func (i AccessTokenPolicyStatementArgs) ToAccessTokenPolicyStatementOutputWithContext(ctx context.Context) AccessTokenPolicyStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenPolicyStatementOutput)
}

// AccessTokenPolicyStatementArrayInput is an input type that accepts AccessTokenPolicyStatementArray and AccessTokenPolicyStatementArrayOutput values.
// You can construct a concrete instance of `AccessTokenPolicyStatementArrayInput` via:
//
//	AccessTokenPolicyStatementArray{ AccessTokenPolicyStatementArgs{...} }
type AccessTokenPolicyStatementArrayInput interface {
	pulumi.Input

	ToAccessTokenPolicyStatementArrayOutput() AccessTokenPolicyStatementArrayOutput
	ToAccessTokenPolicyStatementArrayOutputWithContext(context.Context) AccessTokenPolicyStatementArrayOutput
}

type AccessTokenPolicyStatementArray []AccessTokenPolicyStatementInput

func (AccessTokenPolicyStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessTokenPolicyStatement)(nil)).Elem()
}

func (i AccessTokenPolicyStatementArray) ToAccessTokenPolicyStatementArrayOutput() AccessTokenPolicyStatementArrayOutput {
	return i.ToAccessTokenPolicyStatementArrayOutputWithContext(context.Background())
}

func (i AccessTokenPolicyStatementArray) ToAccessTokenPolicyStatementArrayOutputWithContext(ctx context.Context) AccessTokenPolicyStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessTokenPolicyStatementArrayOutput)
}

type AccessTokenPolicyStatementOutput struct{ *pulumi.OutputState }

func (AccessTokenPolicyStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessTokenPolicyStatement)(nil)).Elem()
}

func (o AccessTokenPolicyStatementOutput) ToAccessTokenPolicyStatementOutput() AccessTokenPolicyStatementOutput {
	return o
}

func (o AccessTokenPolicyStatementOutput) ToAccessTokenPolicyStatementOutputWithContext(ctx context.Context) AccessTokenPolicyStatementOutput {
	return o
}

// The list of action specifiers defining the actions to which the statement applies.
func (o AccessTokenPolicyStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenPolicyStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o AccessTokenPolicyStatementOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v AccessTokenPolicyStatement) string { return v.Effect }).(pulumi.StringOutput)
}

// The list of action specifiers defining the actions to which the statement does not apply.
func (o AccessTokenPolicyStatementOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenPolicyStatement) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the statement does not apply.
func (o AccessTokenPolicyStatementOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenPolicyStatement) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the statement applies.
func (o AccessTokenPolicyStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessTokenPolicyStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type AccessTokenPolicyStatementArrayOutput struct{ *pulumi.OutputState }

func (AccessTokenPolicyStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessTokenPolicyStatement)(nil)).Elem()
}

func (o AccessTokenPolicyStatementArrayOutput) ToAccessTokenPolicyStatementArrayOutput() AccessTokenPolicyStatementArrayOutput {
	return o
}

func (o AccessTokenPolicyStatementArrayOutput) ToAccessTokenPolicyStatementArrayOutputWithContext(ctx context.Context) AccessTokenPolicyStatementArrayOutput {
	return o
}

func (o AccessTokenPolicyStatementArrayOutput) Index(i pulumi.IntInput) AccessTokenPolicyStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessTokenPolicyStatement {
		return vs[0].([]AccessTokenPolicyStatement)[vs[1].(int)]
	}).(AccessTokenPolicyStatementOutput)
}

type AuditLogSubscriptionStatement struct {
	// The list of action specifiers defining the actions to which the statement applies. For a list of available actions, read [Using actions](https://docs.launchdarkly.com/home/members/role-actions).
	Actions []string `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect string `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply. For a list of available actions, read [Using actions](https://docs.launchdarkly.com/home/members/role-actions).
	NotActions []string `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	NotResources []string `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	Resources []string `pulumi:"resources"`
}

// AuditLogSubscriptionStatementInput is an input type that accepts AuditLogSubscriptionStatementArgs and AuditLogSubscriptionStatementOutput values.
// You can construct a concrete instance of `AuditLogSubscriptionStatementInput` via:
//
//	AuditLogSubscriptionStatementArgs{...}
type AuditLogSubscriptionStatementInput interface {
	pulumi.Input

	ToAuditLogSubscriptionStatementOutput() AuditLogSubscriptionStatementOutput
	ToAuditLogSubscriptionStatementOutputWithContext(context.Context) AuditLogSubscriptionStatementOutput
}

type AuditLogSubscriptionStatementArgs struct {
	// The list of action specifiers defining the actions to which the statement applies. For a list of available actions, read [Using actions](https://docs.launchdarkly.com/home/members/role-actions).
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect pulumi.StringInput `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply. For a list of available actions, read [Using actions](https://docs.launchdarkly.com/home/members/role-actions).
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (AuditLogSubscriptionStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogSubscriptionStatement)(nil)).Elem()
}

func (i AuditLogSubscriptionStatementArgs) ToAuditLogSubscriptionStatementOutput() AuditLogSubscriptionStatementOutput {
	return i.ToAuditLogSubscriptionStatementOutputWithContext(context.Background())
}

func (i AuditLogSubscriptionStatementArgs) ToAuditLogSubscriptionStatementOutputWithContext(ctx context.Context) AuditLogSubscriptionStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogSubscriptionStatementOutput)
}

// AuditLogSubscriptionStatementArrayInput is an input type that accepts AuditLogSubscriptionStatementArray and AuditLogSubscriptionStatementArrayOutput values.
// You can construct a concrete instance of `AuditLogSubscriptionStatementArrayInput` via:
//
//	AuditLogSubscriptionStatementArray{ AuditLogSubscriptionStatementArgs{...} }
type AuditLogSubscriptionStatementArrayInput interface {
	pulumi.Input

	ToAuditLogSubscriptionStatementArrayOutput() AuditLogSubscriptionStatementArrayOutput
	ToAuditLogSubscriptionStatementArrayOutputWithContext(context.Context) AuditLogSubscriptionStatementArrayOutput
}

type AuditLogSubscriptionStatementArray []AuditLogSubscriptionStatementInput

func (AuditLogSubscriptionStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogSubscriptionStatement)(nil)).Elem()
}

func (i AuditLogSubscriptionStatementArray) ToAuditLogSubscriptionStatementArrayOutput() AuditLogSubscriptionStatementArrayOutput {
	return i.ToAuditLogSubscriptionStatementArrayOutputWithContext(context.Background())
}

func (i AuditLogSubscriptionStatementArray) ToAuditLogSubscriptionStatementArrayOutputWithContext(ctx context.Context) AuditLogSubscriptionStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogSubscriptionStatementArrayOutput)
}

type AuditLogSubscriptionStatementOutput struct{ *pulumi.OutputState }

func (AuditLogSubscriptionStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogSubscriptionStatement)(nil)).Elem()
}

func (o AuditLogSubscriptionStatementOutput) ToAuditLogSubscriptionStatementOutput() AuditLogSubscriptionStatementOutput {
	return o
}

func (o AuditLogSubscriptionStatementOutput) ToAuditLogSubscriptionStatementOutputWithContext(ctx context.Context) AuditLogSubscriptionStatementOutput {
	return o
}

// The list of action specifiers defining the actions to which the statement applies. For a list of available actions, read [Using actions](https://docs.launchdarkly.com/home/members/role-actions).
func (o AuditLogSubscriptionStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogSubscriptionStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o AuditLogSubscriptionStatementOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogSubscriptionStatement) string { return v.Effect }).(pulumi.StringOutput)
}

// The list of action specifiers defining the actions to which the statement does not apply. For a list of available actions, read [Using actions](https://docs.launchdarkly.com/home/members/role-actions).
func (o AuditLogSubscriptionStatementOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogSubscriptionStatement) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement does not apply. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
func (o AuditLogSubscriptionStatementOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogSubscriptionStatement) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement applies. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
func (o AuditLogSubscriptionStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogSubscriptionStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type AuditLogSubscriptionStatementArrayOutput struct{ *pulumi.OutputState }

func (AuditLogSubscriptionStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogSubscriptionStatement)(nil)).Elem()
}

func (o AuditLogSubscriptionStatementArrayOutput) ToAuditLogSubscriptionStatementArrayOutput() AuditLogSubscriptionStatementArrayOutput {
	return o
}

func (o AuditLogSubscriptionStatementArrayOutput) ToAuditLogSubscriptionStatementArrayOutputWithContext(ctx context.Context) AuditLogSubscriptionStatementArrayOutput {
	return o
}

func (o AuditLogSubscriptionStatementArrayOutput) Index(i pulumi.IntInput) AuditLogSubscriptionStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogSubscriptionStatement {
		return vs[0].([]AuditLogSubscriptionStatement)[vs[1].(int)]
	}).(AuditLogSubscriptionStatementOutput)
}

type CustomRolePolicy struct {
	// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []string `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect string `pulumi:"effect"`
	// - The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources []string `pulumi:"resources"`
}

// CustomRolePolicyInput is an input type that accepts CustomRolePolicyArgs and CustomRolePolicyOutput values.
// You can construct a concrete instance of `CustomRolePolicyInput` via:
//
//	CustomRolePolicyArgs{...}
type CustomRolePolicyInput interface {
	pulumi.Input

	ToCustomRolePolicyOutput() CustomRolePolicyOutput
	ToCustomRolePolicyOutputWithContext(context.Context) CustomRolePolicyOutput
}

type CustomRolePolicyArgs struct {
	// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect pulumi.StringInput `pulumi:"effect"`
	// - The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (CustomRolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRolePolicy)(nil)).Elem()
}

func (i CustomRolePolicyArgs) ToCustomRolePolicyOutput() CustomRolePolicyOutput {
	return i.ToCustomRolePolicyOutputWithContext(context.Background())
}

func (i CustomRolePolicyArgs) ToCustomRolePolicyOutputWithContext(ctx context.Context) CustomRolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRolePolicyOutput)
}

// CustomRolePolicyArrayInput is an input type that accepts CustomRolePolicyArray and CustomRolePolicyArrayOutput values.
// You can construct a concrete instance of `CustomRolePolicyArrayInput` via:
//
//	CustomRolePolicyArray{ CustomRolePolicyArgs{...} }
type CustomRolePolicyArrayInput interface {
	pulumi.Input

	ToCustomRolePolicyArrayOutput() CustomRolePolicyArrayOutput
	ToCustomRolePolicyArrayOutputWithContext(context.Context) CustomRolePolicyArrayOutput
}

type CustomRolePolicyArray []CustomRolePolicyInput

func (CustomRolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomRolePolicy)(nil)).Elem()
}

func (i CustomRolePolicyArray) ToCustomRolePolicyArrayOutput() CustomRolePolicyArrayOutput {
	return i.ToCustomRolePolicyArrayOutputWithContext(context.Background())
}

func (i CustomRolePolicyArray) ToCustomRolePolicyArrayOutputWithContext(ctx context.Context) CustomRolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRolePolicyArrayOutput)
}

type CustomRolePolicyOutput struct{ *pulumi.OutputState }

func (CustomRolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRolePolicy)(nil)).Elem()
}

func (o CustomRolePolicyOutput) ToCustomRolePolicyOutput() CustomRolePolicyOutput {
	return o
}

func (o CustomRolePolicyOutput) ToCustomRolePolicyOutputWithContext(ctx context.Context) CustomRolePolicyOutput {
	return o
}

// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
func (o CustomRolePolicyOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomRolePolicy) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o CustomRolePolicyOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v CustomRolePolicy) string { return v.Effect }).(pulumi.StringOutput)
}

// - The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o CustomRolePolicyOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomRolePolicy) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type CustomRolePolicyArrayOutput struct{ *pulumi.OutputState }

func (CustomRolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomRolePolicy)(nil)).Elem()
}

func (o CustomRolePolicyArrayOutput) ToCustomRolePolicyArrayOutput() CustomRolePolicyArrayOutput {
	return o
}

func (o CustomRolePolicyArrayOutput) ToCustomRolePolicyArrayOutputWithContext(ctx context.Context) CustomRolePolicyArrayOutput {
	return o
}

func (o CustomRolePolicyArrayOutput) Index(i pulumi.IntInput) CustomRolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomRolePolicy {
		return vs[0].([]CustomRolePolicy)[vs[1].(int)]
	}).(CustomRolePolicyOutput)
}

type CustomRolePolicyStatement struct {
	// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []string `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect string `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	NotActions []string `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the statement does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources []string `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources []string `pulumi:"resources"`
}

// CustomRolePolicyStatementInput is an input type that accepts CustomRolePolicyStatementArgs and CustomRolePolicyStatementOutput values.
// You can construct a concrete instance of `CustomRolePolicyStatementInput` via:
//
//	CustomRolePolicyStatementArgs{...}
type CustomRolePolicyStatementInput interface {
	pulumi.Input

	ToCustomRolePolicyStatementOutput() CustomRolePolicyStatementOutput
	ToCustomRolePolicyStatementOutputWithContext(context.Context) CustomRolePolicyStatementOutput
}

type CustomRolePolicyStatementArgs struct {
	// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect pulumi.StringInput `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the statement does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (CustomRolePolicyStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRolePolicyStatement)(nil)).Elem()
}

func (i CustomRolePolicyStatementArgs) ToCustomRolePolicyStatementOutput() CustomRolePolicyStatementOutput {
	return i.ToCustomRolePolicyStatementOutputWithContext(context.Background())
}

func (i CustomRolePolicyStatementArgs) ToCustomRolePolicyStatementOutputWithContext(ctx context.Context) CustomRolePolicyStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRolePolicyStatementOutput)
}

// CustomRolePolicyStatementArrayInput is an input type that accepts CustomRolePolicyStatementArray and CustomRolePolicyStatementArrayOutput values.
// You can construct a concrete instance of `CustomRolePolicyStatementArrayInput` via:
//
//	CustomRolePolicyStatementArray{ CustomRolePolicyStatementArgs{...} }
type CustomRolePolicyStatementArrayInput interface {
	pulumi.Input

	ToCustomRolePolicyStatementArrayOutput() CustomRolePolicyStatementArrayOutput
	ToCustomRolePolicyStatementArrayOutputWithContext(context.Context) CustomRolePolicyStatementArrayOutput
}

type CustomRolePolicyStatementArray []CustomRolePolicyStatementInput

func (CustomRolePolicyStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomRolePolicyStatement)(nil)).Elem()
}

func (i CustomRolePolicyStatementArray) ToCustomRolePolicyStatementArrayOutput() CustomRolePolicyStatementArrayOutput {
	return i.ToCustomRolePolicyStatementArrayOutputWithContext(context.Background())
}

func (i CustomRolePolicyStatementArray) ToCustomRolePolicyStatementArrayOutputWithContext(ctx context.Context) CustomRolePolicyStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomRolePolicyStatementArrayOutput)
}

type CustomRolePolicyStatementOutput struct{ *pulumi.OutputState }

func (CustomRolePolicyStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomRolePolicyStatement)(nil)).Elem()
}

func (o CustomRolePolicyStatementOutput) ToCustomRolePolicyStatementOutput() CustomRolePolicyStatementOutput {
	return o
}

func (o CustomRolePolicyStatementOutput) ToCustomRolePolicyStatementOutputWithContext(ctx context.Context) CustomRolePolicyStatementOutput {
	return o
}

// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
func (o CustomRolePolicyStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomRolePolicyStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// - Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o CustomRolePolicyStatementOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v CustomRolePolicyStatement) string { return v.Effect }).(pulumi.StringOutput)
}

// The list of action specifiers defining the actions to which the statement does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
func (o CustomRolePolicyStatementOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomRolePolicyStatement) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the statement does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o CustomRolePolicyStatementOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomRolePolicyStatement) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o CustomRolePolicyStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomRolePolicyStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type CustomRolePolicyStatementArrayOutput struct{ *pulumi.OutputState }

func (CustomRolePolicyStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomRolePolicyStatement)(nil)).Elem()
}

func (o CustomRolePolicyStatementArrayOutput) ToCustomRolePolicyStatementArrayOutput() CustomRolePolicyStatementArrayOutput {
	return o
}

func (o CustomRolePolicyStatementArrayOutput) ToCustomRolePolicyStatementArrayOutputWithContext(ctx context.Context) CustomRolePolicyStatementArrayOutput {
	return o
}

func (o CustomRolePolicyStatementArrayOutput) Index(i pulumi.IntInput) CustomRolePolicyStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomRolePolicyStatement {
		return vs[0].([]CustomRolePolicyStatement)[vs[1].(int)]
	}).(CustomRolePolicyStatementOutput)
}

type EnvironmentApprovalSetting struct {
	// Set to `true` if changes can be applied as long as the `minNumApprovals` is met, regardless of whether any reviewers have declined a request. Defaults to `true`.
	CanApplyDeclinedChanges *bool `pulumi:"canApplyDeclinedChanges"`
	// Set to `true` if requesters can approve or decline their own request. They may always comment. Defaults to `false`.
	CanReviewOwnRequest *bool `pulumi:"canReviewOwnRequest"`
	// The number of approvals required before an approval request can be applied. This number must be between 1 and 5. Defaults to 1.
	MinNumApprovals *int `pulumi:"minNumApprovals"`
	// Set to `true` for changes to flags in this environment to require approval. You may only set `required` to true if `requiredApprovalTags` is not set and vice versa. Defaults to `false`.
	Required *bool `pulumi:"required"`
	// An array of tags used to specify which flags with those tags require approval. You may only set `requiredApprovalTags` if `required` is not set to `true` and vice versa.
	RequiredApprovalTags []string `pulumi:"requiredApprovalTags"`
}

// EnvironmentApprovalSettingInput is an input type that accepts EnvironmentApprovalSettingArgs and EnvironmentApprovalSettingOutput values.
// You can construct a concrete instance of `EnvironmentApprovalSettingInput` via:
//
//	EnvironmentApprovalSettingArgs{...}
type EnvironmentApprovalSettingInput interface {
	pulumi.Input

	ToEnvironmentApprovalSettingOutput() EnvironmentApprovalSettingOutput
	ToEnvironmentApprovalSettingOutputWithContext(context.Context) EnvironmentApprovalSettingOutput
}

type EnvironmentApprovalSettingArgs struct {
	// Set to `true` if changes can be applied as long as the `minNumApprovals` is met, regardless of whether any reviewers have declined a request. Defaults to `true`.
	CanApplyDeclinedChanges pulumi.BoolPtrInput `pulumi:"canApplyDeclinedChanges"`
	// Set to `true` if requesters can approve or decline their own request. They may always comment. Defaults to `false`.
	CanReviewOwnRequest pulumi.BoolPtrInput `pulumi:"canReviewOwnRequest"`
	// The number of approvals required before an approval request can be applied. This number must be between 1 and 5. Defaults to 1.
	MinNumApprovals pulumi.IntPtrInput `pulumi:"minNumApprovals"`
	// Set to `true` for changes to flags in this environment to require approval. You may only set `required` to true if `requiredApprovalTags` is not set and vice versa. Defaults to `false`.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// An array of tags used to specify which flags with those tags require approval. You may only set `requiredApprovalTags` if `required` is not set to `true` and vice versa.
	RequiredApprovalTags pulumi.StringArrayInput `pulumi:"requiredApprovalTags"`
}

func (EnvironmentApprovalSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentApprovalSetting)(nil)).Elem()
}

func (i EnvironmentApprovalSettingArgs) ToEnvironmentApprovalSettingOutput() EnvironmentApprovalSettingOutput {
	return i.ToEnvironmentApprovalSettingOutputWithContext(context.Background())
}

func (i EnvironmentApprovalSettingArgs) ToEnvironmentApprovalSettingOutputWithContext(ctx context.Context) EnvironmentApprovalSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentApprovalSettingOutput)
}

// EnvironmentApprovalSettingArrayInput is an input type that accepts EnvironmentApprovalSettingArray and EnvironmentApprovalSettingArrayOutput values.
// You can construct a concrete instance of `EnvironmentApprovalSettingArrayInput` via:
//
//	EnvironmentApprovalSettingArray{ EnvironmentApprovalSettingArgs{...} }
type EnvironmentApprovalSettingArrayInput interface {
	pulumi.Input

	ToEnvironmentApprovalSettingArrayOutput() EnvironmentApprovalSettingArrayOutput
	ToEnvironmentApprovalSettingArrayOutputWithContext(context.Context) EnvironmentApprovalSettingArrayOutput
}

type EnvironmentApprovalSettingArray []EnvironmentApprovalSettingInput

func (EnvironmentApprovalSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentApprovalSetting)(nil)).Elem()
}

func (i EnvironmentApprovalSettingArray) ToEnvironmentApprovalSettingArrayOutput() EnvironmentApprovalSettingArrayOutput {
	return i.ToEnvironmentApprovalSettingArrayOutputWithContext(context.Background())
}

func (i EnvironmentApprovalSettingArray) ToEnvironmentApprovalSettingArrayOutputWithContext(ctx context.Context) EnvironmentApprovalSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentApprovalSettingArrayOutput)
}

type EnvironmentApprovalSettingOutput struct{ *pulumi.OutputState }

func (EnvironmentApprovalSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentApprovalSetting)(nil)).Elem()
}

func (o EnvironmentApprovalSettingOutput) ToEnvironmentApprovalSettingOutput() EnvironmentApprovalSettingOutput {
	return o
}

func (o EnvironmentApprovalSettingOutput) ToEnvironmentApprovalSettingOutputWithContext(ctx context.Context) EnvironmentApprovalSettingOutput {
	return o
}

// Set to `true` if changes can be applied as long as the `minNumApprovals` is met, regardless of whether any reviewers have declined a request. Defaults to `true`.
func (o EnvironmentApprovalSettingOutput) CanApplyDeclinedChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentApprovalSetting) *bool { return v.CanApplyDeclinedChanges }).(pulumi.BoolPtrOutput)
}

// Set to `true` if requesters can approve or decline their own request. They may always comment. Defaults to `false`.
func (o EnvironmentApprovalSettingOutput) CanReviewOwnRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentApprovalSetting) *bool { return v.CanReviewOwnRequest }).(pulumi.BoolPtrOutput)
}

// The number of approvals required before an approval request can be applied. This number must be between 1 and 5. Defaults to 1.
func (o EnvironmentApprovalSettingOutput) MinNumApprovals() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnvironmentApprovalSetting) *int { return v.MinNumApprovals }).(pulumi.IntPtrOutput)
}

// Set to `true` for changes to flags in this environment to require approval. You may only set `required` to true if `requiredApprovalTags` is not set and vice versa. Defaults to `false`.
func (o EnvironmentApprovalSettingOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentApprovalSetting) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// An array of tags used to specify which flags with those tags require approval. You may only set `requiredApprovalTags` if `required` is not set to `true` and vice versa.
func (o EnvironmentApprovalSettingOutput) RequiredApprovalTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnvironmentApprovalSetting) []string { return v.RequiredApprovalTags }).(pulumi.StringArrayOutput)
}

type EnvironmentApprovalSettingArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentApprovalSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentApprovalSetting)(nil)).Elem()
}

func (o EnvironmentApprovalSettingArrayOutput) ToEnvironmentApprovalSettingArrayOutput() EnvironmentApprovalSettingArrayOutput {
	return o
}

func (o EnvironmentApprovalSettingArrayOutput) ToEnvironmentApprovalSettingArrayOutputWithContext(ctx context.Context) EnvironmentApprovalSettingArrayOutput {
	return o
}

func (o EnvironmentApprovalSettingArrayOutput) Index(i pulumi.IntInput) EnvironmentApprovalSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentApprovalSetting {
		return vs[0].([]EnvironmentApprovalSetting)[vs[1].(int)]
	}).(EnvironmentApprovalSettingOutput)
}

type FeatureFlagClientSideAvailability struct {
	// Whether this flag is available to SDKs using the client-side ID.
	UsingEnvironmentId *bool `pulumi:"usingEnvironmentId"`
	// Whether this flag is available to SDKs using a mobile key.
	UsingMobileKey *bool `pulumi:"usingMobileKey"`
}

// FeatureFlagClientSideAvailabilityInput is an input type that accepts FeatureFlagClientSideAvailabilityArgs and FeatureFlagClientSideAvailabilityOutput values.
// You can construct a concrete instance of `FeatureFlagClientSideAvailabilityInput` via:
//
//	FeatureFlagClientSideAvailabilityArgs{...}
type FeatureFlagClientSideAvailabilityInput interface {
	pulumi.Input

	ToFeatureFlagClientSideAvailabilityOutput() FeatureFlagClientSideAvailabilityOutput
	ToFeatureFlagClientSideAvailabilityOutputWithContext(context.Context) FeatureFlagClientSideAvailabilityOutput
}

type FeatureFlagClientSideAvailabilityArgs struct {
	// Whether this flag is available to SDKs using the client-side ID.
	UsingEnvironmentId pulumi.BoolPtrInput `pulumi:"usingEnvironmentId"`
	// Whether this flag is available to SDKs using a mobile key.
	UsingMobileKey pulumi.BoolPtrInput `pulumi:"usingMobileKey"`
}

func (FeatureFlagClientSideAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagClientSideAvailability)(nil)).Elem()
}

func (i FeatureFlagClientSideAvailabilityArgs) ToFeatureFlagClientSideAvailabilityOutput() FeatureFlagClientSideAvailabilityOutput {
	return i.ToFeatureFlagClientSideAvailabilityOutputWithContext(context.Background())
}

func (i FeatureFlagClientSideAvailabilityArgs) ToFeatureFlagClientSideAvailabilityOutputWithContext(ctx context.Context) FeatureFlagClientSideAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagClientSideAvailabilityOutput)
}

// FeatureFlagClientSideAvailabilityArrayInput is an input type that accepts FeatureFlagClientSideAvailabilityArray and FeatureFlagClientSideAvailabilityArrayOutput values.
// You can construct a concrete instance of `FeatureFlagClientSideAvailabilityArrayInput` via:
//
//	FeatureFlagClientSideAvailabilityArray{ FeatureFlagClientSideAvailabilityArgs{...} }
type FeatureFlagClientSideAvailabilityArrayInput interface {
	pulumi.Input

	ToFeatureFlagClientSideAvailabilityArrayOutput() FeatureFlagClientSideAvailabilityArrayOutput
	ToFeatureFlagClientSideAvailabilityArrayOutputWithContext(context.Context) FeatureFlagClientSideAvailabilityArrayOutput
}

type FeatureFlagClientSideAvailabilityArray []FeatureFlagClientSideAvailabilityInput

func (FeatureFlagClientSideAvailabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagClientSideAvailability)(nil)).Elem()
}

func (i FeatureFlagClientSideAvailabilityArray) ToFeatureFlagClientSideAvailabilityArrayOutput() FeatureFlagClientSideAvailabilityArrayOutput {
	return i.ToFeatureFlagClientSideAvailabilityArrayOutputWithContext(context.Background())
}

func (i FeatureFlagClientSideAvailabilityArray) ToFeatureFlagClientSideAvailabilityArrayOutputWithContext(ctx context.Context) FeatureFlagClientSideAvailabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagClientSideAvailabilityArrayOutput)
}

type FeatureFlagClientSideAvailabilityOutput struct{ *pulumi.OutputState }

func (FeatureFlagClientSideAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagClientSideAvailability)(nil)).Elem()
}

func (o FeatureFlagClientSideAvailabilityOutput) ToFeatureFlagClientSideAvailabilityOutput() FeatureFlagClientSideAvailabilityOutput {
	return o
}

func (o FeatureFlagClientSideAvailabilityOutput) ToFeatureFlagClientSideAvailabilityOutputWithContext(ctx context.Context) FeatureFlagClientSideAvailabilityOutput {
	return o
}

// Whether this flag is available to SDKs using the client-side ID.
func (o FeatureFlagClientSideAvailabilityOutput) UsingEnvironmentId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeatureFlagClientSideAvailability) *bool { return v.UsingEnvironmentId }).(pulumi.BoolPtrOutput)
}

// Whether this flag is available to SDKs using a mobile key.
func (o FeatureFlagClientSideAvailabilityOutput) UsingMobileKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeatureFlagClientSideAvailability) *bool { return v.UsingMobileKey }).(pulumi.BoolPtrOutput)
}

type FeatureFlagClientSideAvailabilityArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagClientSideAvailabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagClientSideAvailability)(nil)).Elem()
}

func (o FeatureFlagClientSideAvailabilityArrayOutput) ToFeatureFlagClientSideAvailabilityArrayOutput() FeatureFlagClientSideAvailabilityArrayOutput {
	return o
}

func (o FeatureFlagClientSideAvailabilityArrayOutput) ToFeatureFlagClientSideAvailabilityArrayOutputWithContext(ctx context.Context) FeatureFlagClientSideAvailabilityArrayOutput {
	return o
}

func (o FeatureFlagClientSideAvailabilityArrayOutput) Index(i pulumi.IntInput) FeatureFlagClientSideAvailabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureFlagClientSideAvailability {
		return vs[0].([]FeatureFlagClientSideAvailability)[vs[1].(int)]
	}).(FeatureFlagClientSideAvailabilityOutput)
}

type FeatureFlagCustomProperty struct {
	// The unique custom property key.
	Key string `pulumi:"key"`
	// The name of the custom property.
	Name string `pulumi:"name"`
	// The list of custom property value strings.
	Values []string `pulumi:"values"`
}

// FeatureFlagCustomPropertyInput is an input type that accepts FeatureFlagCustomPropertyArgs and FeatureFlagCustomPropertyOutput values.
// You can construct a concrete instance of `FeatureFlagCustomPropertyInput` via:
//
//	FeatureFlagCustomPropertyArgs{...}
type FeatureFlagCustomPropertyInput interface {
	pulumi.Input

	ToFeatureFlagCustomPropertyOutput() FeatureFlagCustomPropertyOutput
	ToFeatureFlagCustomPropertyOutputWithContext(context.Context) FeatureFlagCustomPropertyOutput
}

type FeatureFlagCustomPropertyArgs struct {
	// The unique custom property key.
	Key pulumi.StringInput `pulumi:"key"`
	// The name of the custom property.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of custom property value strings.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (FeatureFlagCustomPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagCustomProperty)(nil)).Elem()
}

func (i FeatureFlagCustomPropertyArgs) ToFeatureFlagCustomPropertyOutput() FeatureFlagCustomPropertyOutput {
	return i.ToFeatureFlagCustomPropertyOutputWithContext(context.Background())
}

func (i FeatureFlagCustomPropertyArgs) ToFeatureFlagCustomPropertyOutputWithContext(ctx context.Context) FeatureFlagCustomPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagCustomPropertyOutput)
}

// FeatureFlagCustomPropertyArrayInput is an input type that accepts FeatureFlagCustomPropertyArray and FeatureFlagCustomPropertyArrayOutput values.
// You can construct a concrete instance of `FeatureFlagCustomPropertyArrayInput` via:
//
//	FeatureFlagCustomPropertyArray{ FeatureFlagCustomPropertyArgs{...} }
type FeatureFlagCustomPropertyArrayInput interface {
	pulumi.Input

	ToFeatureFlagCustomPropertyArrayOutput() FeatureFlagCustomPropertyArrayOutput
	ToFeatureFlagCustomPropertyArrayOutputWithContext(context.Context) FeatureFlagCustomPropertyArrayOutput
}

type FeatureFlagCustomPropertyArray []FeatureFlagCustomPropertyInput

func (FeatureFlagCustomPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagCustomProperty)(nil)).Elem()
}

func (i FeatureFlagCustomPropertyArray) ToFeatureFlagCustomPropertyArrayOutput() FeatureFlagCustomPropertyArrayOutput {
	return i.ToFeatureFlagCustomPropertyArrayOutputWithContext(context.Background())
}

func (i FeatureFlagCustomPropertyArray) ToFeatureFlagCustomPropertyArrayOutputWithContext(ctx context.Context) FeatureFlagCustomPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagCustomPropertyArrayOutput)
}

type FeatureFlagCustomPropertyOutput struct{ *pulumi.OutputState }

func (FeatureFlagCustomPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagCustomProperty)(nil)).Elem()
}

func (o FeatureFlagCustomPropertyOutput) ToFeatureFlagCustomPropertyOutput() FeatureFlagCustomPropertyOutput {
	return o
}

func (o FeatureFlagCustomPropertyOutput) ToFeatureFlagCustomPropertyOutputWithContext(ctx context.Context) FeatureFlagCustomPropertyOutput {
	return o
}

// The unique custom property key.
func (o FeatureFlagCustomPropertyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureFlagCustomProperty) string { return v.Key }).(pulumi.StringOutput)
}

// The name of the custom property.
func (o FeatureFlagCustomPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureFlagCustomProperty) string { return v.Name }).(pulumi.StringOutput)
}

// The list of custom property value strings.
func (o FeatureFlagCustomPropertyOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeatureFlagCustomProperty) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type FeatureFlagCustomPropertyArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagCustomPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagCustomProperty)(nil)).Elem()
}

func (o FeatureFlagCustomPropertyArrayOutput) ToFeatureFlagCustomPropertyArrayOutput() FeatureFlagCustomPropertyArrayOutput {
	return o
}

func (o FeatureFlagCustomPropertyArrayOutput) ToFeatureFlagCustomPropertyArrayOutputWithContext(ctx context.Context) FeatureFlagCustomPropertyArrayOutput {
	return o
}

func (o FeatureFlagCustomPropertyArrayOutput) Index(i pulumi.IntInput) FeatureFlagCustomPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureFlagCustomProperty {
		return vs[0].([]FeatureFlagCustomProperty)[vs[1].(int)]
	}).(FeatureFlagCustomPropertyOutput)
}

type FeatureFlagDefaults struct {
	// The index of the variation the flag will default to in all new environments when off.
	OffVariation int `pulumi:"offVariation"`
	// The index of the variation the flag will default to in all new environments when on.
	OnVariation int `pulumi:"onVariation"`
}

// FeatureFlagDefaultsInput is an input type that accepts FeatureFlagDefaultsArgs and FeatureFlagDefaultsOutput values.
// You can construct a concrete instance of `FeatureFlagDefaultsInput` via:
//
//	FeatureFlagDefaultsArgs{...}
type FeatureFlagDefaultsInput interface {
	pulumi.Input

	ToFeatureFlagDefaultsOutput() FeatureFlagDefaultsOutput
	ToFeatureFlagDefaultsOutputWithContext(context.Context) FeatureFlagDefaultsOutput
}

type FeatureFlagDefaultsArgs struct {
	// The index of the variation the flag will default to in all new environments when off.
	OffVariation pulumi.IntInput `pulumi:"offVariation"`
	// The index of the variation the flag will default to in all new environments when on.
	OnVariation pulumi.IntInput `pulumi:"onVariation"`
}

func (FeatureFlagDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagDefaults)(nil)).Elem()
}

func (i FeatureFlagDefaultsArgs) ToFeatureFlagDefaultsOutput() FeatureFlagDefaultsOutput {
	return i.ToFeatureFlagDefaultsOutputWithContext(context.Background())
}

func (i FeatureFlagDefaultsArgs) ToFeatureFlagDefaultsOutputWithContext(ctx context.Context) FeatureFlagDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagDefaultsOutput)
}

func (i FeatureFlagDefaultsArgs) ToFeatureFlagDefaultsPtrOutput() FeatureFlagDefaultsPtrOutput {
	return i.ToFeatureFlagDefaultsPtrOutputWithContext(context.Background())
}

func (i FeatureFlagDefaultsArgs) ToFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) FeatureFlagDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagDefaultsOutput).ToFeatureFlagDefaultsPtrOutputWithContext(ctx)
}

// FeatureFlagDefaultsPtrInput is an input type that accepts FeatureFlagDefaultsArgs, FeatureFlagDefaultsPtr and FeatureFlagDefaultsPtrOutput values.
// You can construct a concrete instance of `FeatureFlagDefaultsPtrInput` via:
//
//	        FeatureFlagDefaultsArgs{...}
//
//	or:
//
//	        nil
type FeatureFlagDefaultsPtrInput interface {
	pulumi.Input

	ToFeatureFlagDefaultsPtrOutput() FeatureFlagDefaultsPtrOutput
	ToFeatureFlagDefaultsPtrOutputWithContext(context.Context) FeatureFlagDefaultsPtrOutput
}

type featureFlagDefaultsPtrType FeatureFlagDefaultsArgs

func FeatureFlagDefaultsPtr(v *FeatureFlagDefaultsArgs) FeatureFlagDefaultsPtrInput {
	return (*featureFlagDefaultsPtrType)(v)
}

func (*featureFlagDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagDefaults)(nil)).Elem()
}

func (i *featureFlagDefaultsPtrType) ToFeatureFlagDefaultsPtrOutput() FeatureFlagDefaultsPtrOutput {
	return i.ToFeatureFlagDefaultsPtrOutputWithContext(context.Background())
}

func (i *featureFlagDefaultsPtrType) ToFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) FeatureFlagDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagDefaultsPtrOutput)
}

type FeatureFlagDefaultsOutput struct{ *pulumi.OutputState }

func (FeatureFlagDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagDefaults)(nil)).Elem()
}

func (o FeatureFlagDefaultsOutput) ToFeatureFlagDefaultsOutput() FeatureFlagDefaultsOutput {
	return o
}

func (o FeatureFlagDefaultsOutput) ToFeatureFlagDefaultsOutputWithContext(ctx context.Context) FeatureFlagDefaultsOutput {
	return o
}

func (o FeatureFlagDefaultsOutput) ToFeatureFlagDefaultsPtrOutput() FeatureFlagDefaultsPtrOutput {
	return o.ToFeatureFlagDefaultsPtrOutputWithContext(context.Background())
}

func (o FeatureFlagDefaultsOutput) ToFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) FeatureFlagDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureFlagDefaults) *FeatureFlagDefaults {
		return &v
	}).(FeatureFlagDefaultsPtrOutput)
}

// The index of the variation the flag will default to in all new environments when off.
func (o FeatureFlagDefaultsOutput) OffVariation() pulumi.IntOutput {
	return o.ApplyT(func(v FeatureFlagDefaults) int { return v.OffVariation }).(pulumi.IntOutput)
}

// The index of the variation the flag will default to in all new environments when on.
func (o FeatureFlagDefaultsOutput) OnVariation() pulumi.IntOutput {
	return o.ApplyT(func(v FeatureFlagDefaults) int { return v.OnVariation }).(pulumi.IntOutput)
}

type FeatureFlagDefaultsPtrOutput struct{ *pulumi.OutputState }

func (FeatureFlagDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagDefaults)(nil)).Elem()
}

func (o FeatureFlagDefaultsPtrOutput) ToFeatureFlagDefaultsPtrOutput() FeatureFlagDefaultsPtrOutput {
	return o
}

func (o FeatureFlagDefaultsPtrOutput) ToFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) FeatureFlagDefaultsPtrOutput {
	return o
}

func (o FeatureFlagDefaultsPtrOutput) Elem() FeatureFlagDefaultsOutput {
	return o.ApplyT(func(v *FeatureFlagDefaults) FeatureFlagDefaults {
		if v != nil {
			return *v
		}
		var ret FeatureFlagDefaults
		return ret
	}).(FeatureFlagDefaultsOutput)
}

// The index of the variation the flag will default to in all new environments when off.
func (o FeatureFlagDefaultsPtrOutput) OffVariation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FeatureFlagDefaults) *int {
		if v == nil {
			return nil
		}
		return &v.OffVariation
	}).(pulumi.IntPtrOutput)
}

// The index of the variation the flag will default to in all new environments when on.
func (o FeatureFlagDefaultsPtrOutput) OnVariation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FeatureFlagDefaults) *int {
		if v == nil {
			return nil
		}
		return &v.OnVariation
	}).(pulumi.IntPtrOutput)
}

type FeatureFlagEnvironmentFallthrough struct {
	// Group percentage rollout by a custom attribute. This argument is only valid if `rolloutWeights` is also specified.
	BucketBy *string `pulumi:"bucketBy"`
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rolloutWeights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rolloutWeights`.
	RolloutWeights []int `pulumi:"rolloutWeights"`
	// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rolloutWeights`.
	Variation *int `pulumi:"variation"`
}

// FeatureFlagEnvironmentFallthroughInput is an input type that accepts FeatureFlagEnvironmentFallthroughArgs and FeatureFlagEnvironmentFallthroughOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentFallthroughInput` via:
//
//	FeatureFlagEnvironmentFallthroughArgs{...}
type FeatureFlagEnvironmentFallthroughInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentFallthroughOutput() FeatureFlagEnvironmentFallthroughOutput
	ToFeatureFlagEnvironmentFallthroughOutputWithContext(context.Context) FeatureFlagEnvironmentFallthroughOutput
}

type FeatureFlagEnvironmentFallthroughArgs struct {
	// Group percentage rollout by a custom attribute. This argument is only valid if `rolloutWeights` is also specified.
	BucketBy pulumi.StringPtrInput `pulumi:"bucketBy"`
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rolloutWeights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rolloutWeights`.
	RolloutWeights pulumi.IntArrayInput `pulumi:"rolloutWeights"`
	// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rolloutWeights`.
	Variation pulumi.IntPtrInput `pulumi:"variation"`
}

func (FeatureFlagEnvironmentFallthroughArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (i FeatureFlagEnvironmentFallthroughArgs) ToFeatureFlagEnvironmentFallthroughOutput() FeatureFlagEnvironmentFallthroughOutput {
	return i.ToFeatureFlagEnvironmentFallthroughOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentFallthroughArgs) ToFeatureFlagEnvironmentFallthroughOutputWithContext(ctx context.Context) FeatureFlagEnvironmentFallthroughOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentFallthroughOutput)
}

func (i FeatureFlagEnvironmentFallthroughArgs) ToFeatureFlagEnvironmentFallthroughPtrOutput() FeatureFlagEnvironmentFallthroughPtrOutput {
	return i.ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentFallthroughArgs) ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) FeatureFlagEnvironmentFallthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentFallthroughOutput).ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx)
}

// FeatureFlagEnvironmentFallthroughPtrInput is an input type that accepts FeatureFlagEnvironmentFallthroughArgs, FeatureFlagEnvironmentFallthroughPtr and FeatureFlagEnvironmentFallthroughPtrOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentFallthroughPtrInput` via:
//
//	        FeatureFlagEnvironmentFallthroughArgs{...}
//
//	or:
//
//	        nil
type FeatureFlagEnvironmentFallthroughPtrInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentFallthroughPtrOutput() FeatureFlagEnvironmentFallthroughPtrOutput
	ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Context) FeatureFlagEnvironmentFallthroughPtrOutput
}

type featureFlagEnvironmentFallthroughPtrType FeatureFlagEnvironmentFallthroughArgs

func FeatureFlagEnvironmentFallthroughPtr(v *FeatureFlagEnvironmentFallthroughArgs) FeatureFlagEnvironmentFallthroughPtrInput {
	return (*featureFlagEnvironmentFallthroughPtrType)(v)
}

func (*featureFlagEnvironmentFallthroughPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (i *featureFlagEnvironmentFallthroughPtrType) ToFeatureFlagEnvironmentFallthroughPtrOutput() FeatureFlagEnvironmentFallthroughPtrOutput {
	return i.ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Background())
}

func (i *featureFlagEnvironmentFallthroughPtrType) ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) FeatureFlagEnvironmentFallthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentFallthroughPtrOutput)
}

type FeatureFlagEnvironmentFallthroughOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentFallthroughOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (o FeatureFlagEnvironmentFallthroughOutput) ToFeatureFlagEnvironmentFallthroughOutput() FeatureFlagEnvironmentFallthroughOutput {
	return o
}

func (o FeatureFlagEnvironmentFallthroughOutput) ToFeatureFlagEnvironmentFallthroughOutputWithContext(ctx context.Context) FeatureFlagEnvironmentFallthroughOutput {
	return o
}

func (o FeatureFlagEnvironmentFallthroughOutput) ToFeatureFlagEnvironmentFallthroughPtrOutput() FeatureFlagEnvironmentFallthroughPtrOutput {
	return o.ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Background())
}

func (o FeatureFlagEnvironmentFallthroughOutput) ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) FeatureFlagEnvironmentFallthroughPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureFlagEnvironmentFallthrough) *FeatureFlagEnvironmentFallthrough {
		return &v
	}).(FeatureFlagEnvironmentFallthroughPtrOutput)
}

// Group percentage rollout by a custom attribute. This argument is only valid if `rolloutWeights` is also specified.
func (o FeatureFlagEnvironmentFallthroughOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentFallthrough) *string { return v.BucketBy }).(pulumi.StringPtrOutput)
}

// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rolloutWeights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rolloutWeights`.
func (o FeatureFlagEnvironmentFallthroughOutput) RolloutWeights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentFallthrough) []int { return v.RolloutWeights }).(pulumi.IntArrayOutput)
}

// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rolloutWeights`.
func (o FeatureFlagEnvironmentFallthroughOutput) Variation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentFallthrough) *int { return v.Variation }).(pulumi.IntPtrOutput)
}

type FeatureFlagEnvironmentFallthroughPtrOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentFallthroughPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (o FeatureFlagEnvironmentFallthroughPtrOutput) ToFeatureFlagEnvironmentFallthroughPtrOutput() FeatureFlagEnvironmentFallthroughPtrOutput {
	return o
}

func (o FeatureFlagEnvironmentFallthroughPtrOutput) ToFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) FeatureFlagEnvironmentFallthroughPtrOutput {
	return o
}

func (o FeatureFlagEnvironmentFallthroughPtrOutput) Elem() FeatureFlagEnvironmentFallthroughOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironmentFallthrough) FeatureFlagEnvironmentFallthrough {
		if v != nil {
			return *v
		}
		var ret FeatureFlagEnvironmentFallthrough
		return ret
	}).(FeatureFlagEnvironmentFallthroughOutput)
}

// Group percentage rollout by a custom attribute. This argument is only valid if `rolloutWeights` is also specified.
func (o FeatureFlagEnvironmentFallthroughPtrOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironmentFallthrough) *string {
		if v == nil {
			return nil
		}
		return v.BucketBy
	}).(pulumi.StringPtrOutput)
}

// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rolloutWeights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rolloutWeights`.
func (o FeatureFlagEnvironmentFallthroughPtrOutput) RolloutWeights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironmentFallthrough) []int {
		if v == nil {
			return nil
		}
		return v.RolloutWeights
	}).(pulumi.IntArrayOutput)
}

// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rolloutWeights`.
func (o FeatureFlagEnvironmentFallthroughPtrOutput) Variation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FeatureFlagEnvironmentFallthrough) *int {
		if v == nil {
			return nil
		}
		return v.Variation
	}).(pulumi.IntPtrOutput)
}

type FeatureFlagEnvironmentPrerequisite struct {
	// The prerequisite feature flag's `key`.
	FlagKey string `pulumi:"flagKey"`
	// The index of the prerequisite feature flag's variation to target.
	Variation int `pulumi:"variation"`
}

// FeatureFlagEnvironmentPrerequisiteInput is an input type that accepts FeatureFlagEnvironmentPrerequisiteArgs and FeatureFlagEnvironmentPrerequisiteOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentPrerequisiteInput` via:
//
//	FeatureFlagEnvironmentPrerequisiteArgs{...}
type FeatureFlagEnvironmentPrerequisiteInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentPrerequisiteOutput() FeatureFlagEnvironmentPrerequisiteOutput
	ToFeatureFlagEnvironmentPrerequisiteOutputWithContext(context.Context) FeatureFlagEnvironmentPrerequisiteOutput
}

type FeatureFlagEnvironmentPrerequisiteArgs struct {
	// The prerequisite feature flag's `key`.
	FlagKey pulumi.StringInput `pulumi:"flagKey"`
	// The index of the prerequisite feature flag's variation to target.
	Variation pulumi.IntInput `pulumi:"variation"`
}

func (FeatureFlagEnvironmentPrerequisiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (i FeatureFlagEnvironmentPrerequisiteArgs) ToFeatureFlagEnvironmentPrerequisiteOutput() FeatureFlagEnvironmentPrerequisiteOutput {
	return i.ToFeatureFlagEnvironmentPrerequisiteOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentPrerequisiteArgs) ToFeatureFlagEnvironmentPrerequisiteOutputWithContext(ctx context.Context) FeatureFlagEnvironmentPrerequisiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentPrerequisiteOutput)
}

// FeatureFlagEnvironmentPrerequisiteArrayInput is an input type that accepts FeatureFlagEnvironmentPrerequisiteArray and FeatureFlagEnvironmentPrerequisiteArrayOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentPrerequisiteArrayInput` via:
//
//	FeatureFlagEnvironmentPrerequisiteArray{ FeatureFlagEnvironmentPrerequisiteArgs{...} }
type FeatureFlagEnvironmentPrerequisiteArrayInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentPrerequisiteArrayOutput() FeatureFlagEnvironmentPrerequisiteArrayOutput
	ToFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(context.Context) FeatureFlagEnvironmentPrerequisiteArrayOutput
}

type FeatureFlagEnvironmentPrerequisiteArray []FeatureFlagEnvironmentPrerequisiteInput

func (FeatureFlagEnvironmentPrerequisiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (i FeatureFlagEnvironmentPrerequisiteArray) ToFeatureFlagEnvironmentPrerequisiteArrayOutput() FeatureFlagEnvironmentPrerequisiteArrayOutput {
	return i.ToFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentPrerequisiteArray) ToFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentPrerequisiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentPrerequisiteArrayOutput)
}

type FeatureFlagEnvironmentPrerequisiteOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentPrerequisiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (o FeatureFlagEnvironmentPrerequisiteOutput) ToFeatureFlagEnvironmentPrerequisiteOutput() FeatureFlagEnvironmentPrerequisiteOutput {
	return o
}

func (o FeatureFlagEnvironmentPrerequisiteOutput) ToFeatureFlagEnvironmentPrerequisiteOutputWithContext(ctx context.Context) FeatureFlagEnvironmentPrerequisiteOutput {
	return o
}

// The prerequisite feature flag's `key`.
func (o FeatureFlagEnvironmentPrerequisiteOutput) FlagKey() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentPrerequisite) string { return v.FlagKey }).(pulumi.StringOutput)
}

// The index of the prerequisite feature flag's variation to target.
func (o FeatureFlagEnvironmentPrerequisiteOutput) Variation() pulumi.IntOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentPrerequisite) int { return v.Variation }).(pulumi.IntOutput)
}

type FeatureFlagEnvironmentPrerequisiteArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentPrerequisiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (o FeatureFlagEnvironmentPrerequisiteArrayOutput) ToFeatureFlagEnvironmentPrerequisiteArrayOutput() FeatureFlagEnvironmentPrerequisiteArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentPrerequisiteArrayOutput) ToFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentPrerequisiteArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentPrerequisiteArrayOutput) Index(i pulumi.IntInput) FeatureFlagEnvironmentPrerequisiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureFlagEnvironmentPrerequisite {
		return vs[0].([]FeatureFlagEnvironmentPrerequisite)[vs[1].(int)]
	}).(FeatureFlagEnvironmentPrerequisiteOutput)
}

type FeatureFlagEnvironmentRule struct {
	// Group percentage rollout by a custom attribute. This argument is only valid if `rolloutWeights` is also specified.
	BucketBy *string `pulumi:"bucketBy"`
	// List of nested blocks specifying the logical clauses to evaluate. To learn more, read Nested Clauses Blocks.
	Clauses []FeatureFlagEnvironmentRuleClause `pulumi:"clauses"`
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rolloutWeights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rolloutWeights`.
	RolloutWeights []int `pulumi:"rolloutWeights"`
	// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rolloutWeights`.
	Variation *int `pulumi:"variation"`
}

// FeatureFlagEnvironmentRuleInput is an input type that accepts FeatureFlagEnvironmentRuleArgs and FeatureFlagEnvironmentRuleOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentRuleInput` via:
//
//	FeatureFlagEnvironmentRuleArgs{...}
type FeatureFlagEnvironmentRuleInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentRuleOutput() FeatureFlagEnvironmentRuleOutput
	ToFeatureFlagEnvironmentRuleOutputWithContext(context.Context) FeatureFlagEnvironmentRuleOutput
}

type FeatureFlagEnvironmentRuleArgs struct {
	// Group percentage rollout by a custom attribute. This argument is only valid if `rolloutWeights` is also specified.
	BucketBy pulumi.StringPtrInput `pulumi:"bucketBy"`
	// List of nested blocks specifying the logical clauses to evaluate. To learn more, read Nested Clauses Blocks.
	Clauses FeatureFlagEnvironmentRuleClauseArrayInput `pulumi:"clauses"`
	// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rolloutWeights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rolloutWeights`.
	RolloutWeights pulumi.IntArrayInput `pulumi:"rolloutWeights"`
	// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rolloutWeights`.
	Variation pulumi.IntPtrInput `pulumi:"variation"`
}

func (FeatureFlagEnvironmentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentRule)(nil)).Elem()
}

func (i FeatureFlagEnvironmentRuleArgs) ToFeatureFlagEnvironmentRuleOutput() FeatureFlagEnvironmentRuleOutput {
	return i.ToFeatureFlagEnvironmentRuleOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentRuleArgs) ToFeatureFlagEnvironmentRuleOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentRuleOutput)
}

// FeatureFlagEnvironmentRuleArrayInput is an input type that accepts FeatureFlagEnvironmentRuleArray and FeatureFlagEnvironmentRuleArrayOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentRuleArrayInput` via:
//
//	FeatureFlagEnvironmentRuleArray{ FeatureFlagEnvironmentRuleArgs{...} }
type FeatureFlagEnvironmentRuleArrayInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentRuleArrayOutput() FeatureFlagEnvironmentRuleArrayOutput
	ToFeatureFlagEnvironmentRuleArrayOutputWithContext(context.Context) FeatureFlagEnvironmentRuleArrayOutput
}

type FeatureFlagEnvironmentRuleArray []FeatureFlagEnvironmentRuleInput

func (FeatureFlagEnvironmentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentRule)(nil)).Elem()
}

func (i FeatureFlagEnvironmentRuleArray) ToFeatureFlagEnvironmentRuleArrayOutput() FeatureFlagEnvironmentRuleArrayOutput {
	return i.ToFeatureFlagEnvironmentRuleArrayOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentRuleArray) ToFeatureFlagEnvironmentRuleArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentRuleArrayOutput)
}

type FeatureFlagEnvironmentRuleOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentRule)(nil)).Elem()
}

func (o FeatureFlagEnvironmentRuleOutput) ToFeatureFlagEnvironmentRuleOutput() FeatureFlagEnvironmentRuleOutput {
	return o
}

func (o FeatureFlagEnvironmentRuleOutput) ToFeatureFlagEnvironmentRuleOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleOutput {
	return o
}

// Group percentage rollout by a custom attribute. This argument is only valid if `rolloutWeights` is also specified.
func (o FeatureFlagEnvironmentRuleOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRule) *string { return v.BucketBy }).(pulumi.StringPtrOutput)
}

// List of nested blocks specifying the logical clauses to evaluate. To learn more, read Nested Clauses Blocks.
func (o FeatureFlagEnvironmentRuleOutput) Clauses() FeatureFlagEnvironmentRuleClauseArrayOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRule) []FeatureFlagEnvironmentRuleClause { return v.Clauses }).(FeatureFlagEnvironmentRuleClauseArrayOutput)
}

// List of integer percentage rollout weights (in thousandths of a percent) to apply to each variation if the rule clauses evaluates to `true`. The sum of the `rolloutWeights` must equal 100000 and the number of rollout weights specified in the array must match the number of flag variations. You must specify either `variation` or `rolloutWeights`.
func (o FeatureFlagEnvironmentRuleOutput) RolloutWeights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRule) []int { return v.RolloutWeights }).(pulumi.IntArrayOutput)
}

// The integer variation index to serve if the rule clauses evaluate to `true`. You must specify either `variation` or `rolloutWeights`.
func (o FeatureFlagEnvironmentRuleOutput) Variation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRule) *int { return v.Variation }).(pulumi.IntPtrOutput)
}

type FeatureFlagEnvironmentRuleArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentRule)(nil)).Elem()
}

func (o FeatureFlagEnvironmentRuleArrayOutput) ToFeatureFlagEnvironmentRuleArrayOutput() FeatureFlagEnvironmentRuleArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentRuleArrayOutput) ToFeatureFlagEnvironmentRuleArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentRuleArrayOutput) Index(i pulumi.IntInput) FeatureFlagEnvironmentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureFlagEnvironmentRule {
		return vs[0].([]FeatureFlagEnvironmentRule)[vs[1].(int)]
	}).(FeatureFlagEnvironmentRuleOutput)
}

type FeatureFlagEnvironmentRuleClause struct {
	// The user attribute to operate on.
	Attribute string `pulumi:"attribute"`
	// Whether to negate the rule clause.
	Negate *bool `pulumi:"negate"`
	// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op string `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `valueType` defaults to `string`.
	ValueType *string `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values []string `pulumi:"values"`
}

// FeatureFlagEnvironmentRuleClauseInput is an input type that accepts FeatureFlagEnvironmentRuleClauseArgs and FeatureFlagEnvironmentRuleClauseOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentRuleClauseInput` via:
//
//	FeatureFlagEnvironmentRuleClauseArgs{...}
type FeatureFlagEnvironmentRuleClauseInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentRuleClauseOutput() FeatureFlagEnvironmentRuleClauseOutput
	ToFeatureFlagEnvironmentRuleClauseOutputWithContext(context.Context) FeatureFlagEnvironmentRuleClauseOutput
}

type FeatureFlagEnvironmentRuleClauseArgs struct {
	// The user attribute to operate on.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Whether to negate the rule clause.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op pulumi.StringInput `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `valueType` defaults to `string`.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (FeatureFlagEnvironmentRuleClauseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (i FeatureFlagEnvironmentRuleClauseArgs) ToFeatureFlagEnvironmentRuleClauseOutput() FeatureFlagEnvironmentRuleClauseOutput {
	return i.ToFeatureFlagEnvironmentRuleClauseOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentRuleClauseArgs) ToFeatureFlagEnvironmentRuleClauseOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleClauseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentRuleClauseOutput)
}

// FeatureFlagEnvironmentRuleClauseArrayInput is an input type that accepts FeatureFlagEnvironmentRuleClauseArray and FeatureFlagEnvironmentRuleClauseArrayOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentRuleClauseArrayInput` via:
//
//	FeatureFlagEnvironmentRuleClauseArray{ FeatureFlagEnvironmentRuleClauseArgs{...} }
type FeatureFlagEnvironmentRuleClauseArrayInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentRuleClauseArrayOutput() FeatureFlagEnvironmentRuleClauseArrayOutput
	ToFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(context.Context) FeatureFlagEnvironmentRuleClauseArrayOutput
}

type FeatureFlagEnvironmentRuleClauseArray []FeatureFlagEnvironmentRuleClauseInput

func (FeatureFlagEnvironmentRuleClauseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (i FeatureFlagEnvironmentRuleClauseArray) ToFeatureFlagEnvironmentRuleClauseArrayOutput() FeatureFlagEnvironmentRuleClauseArrayOutput {
	return i.ToFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentRuleClauseArray) ToFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleClauseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentRuleClauseArrayOutput)
}

type FeatureFlagEnvironmentRuleClauseOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentRuleClauseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (o FeatureFlagEnvironmentRuleClauseOutput) ToFeatureFlagEnvironmentRuleClauseOutput() FeatureFlagEnvironmentRuleClauseOutput {
	return o
}

func (o FeatureFlagEnvironmentRuleClauseOutput) ToFeatureFlagEnvironmentRuleClauseOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleClauseOutput {
	return o
}

// The user attribute to operate on.
func (o FeatureFlagEnvironmentRuleClauseOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRuleClause) string { return v.Attribute }).(pulumi.StringOutput)
}

// Whether to negate the rule clause.
func (o FeatureFlagEnvironmentRuleClauseOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRuleClause) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
func (o FeatureFlagEnvironmentRuleClauseOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRuleClause) string { return v.Op }).(pulumi.StringOutput)
}

// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `valueType` defaults to `string`.
func (o FeatureFlagEnvironmentRuleClauseOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRuleClause) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

// The list of values associated with the rule clause.
func (o FeatureFlagEnvironmentRuleClauseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentRuleClause) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type FeatureFlagEnvironmentRuleClauseArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentRuleClauseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (o FeatureFlagEnvironmentRuleClauseArrayOutput) ToFeatureFlagEnvironmentRuleClauseArrayOutput() FeatureFlagEnvironmentRuleClauseArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentRuleClauseArrayOutput) ToFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentRuleClauseArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentRuleClauseArrayOutput) Index(i pulumi.IntInput) FeatureFlagEnvironmentRuleClauseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureFlagEnvironmentRuleClause {
		return vs[0].([]FeatureFlagEnvironmentRuleClause)[vs[1].(int)]
	}).(FeatureFlagEnvironmentRuleClauseOutput)
}

type FeatureFlagEnvironmentTarget struct {
	// List of `user` strings to target.
	Values []string `pulumi:"values"`
	// The index of the variation to serve is a user target value is matched.
	Variation int `pulumi:"variation"`
}

// FeatureFlagEnvironmentTargetInput is an input type that accepts FeatureFlagEnvironmentTargetArgs and FeatureFlagEnvironmentTargetOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentTargetInput` via:
//
//	FeatureFlagEnvironmentTargetArgs{...}
type FeatureFlagEnvironmentTargetInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentTargetOutput() FeatureFlagEnvironmentTargetOutput
	ToFeatureFlagEnvironmentTargetOutputWithContext(context.Context) FeatureFlagEnvironmentTargetOutput
}

type FeatureFlagEnvironmentTargetArgs struct {
	// List of `user` strings to target.
	Values pulumi.StringArrayInput `pulumi:"values"`
	// The index of the variation to serve is a user target value is matched.
	Variation pulumi.IntInput `pulumi:"variation"`
}

func (FeatureFlagEnvironmentTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (i FeatureFlagEnvironmentTargetArgs) ToFeatureFlagEnvironmentTargetOutput() FeatureFlagEnvironmentTargetOutput {
	return i.ToFeatureFlagEnvironmentTargetOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentTargetArgs) ToFeatureFlagEnvironmentTargetOutputWithContext(ctx context.Context) FeatureFlagEnvironmentTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentTargetOutput)
}

// FeatureFlagEnvironmentTargetArrayInput is an input type that accepts FeatureFlagEnvironmentTargetArray and FeatureFlagEnvironmentTargetArrayOutput values.
// You can construct a concrete instance of `FeatureFlagEnvironmentTargetArrayInput` via:
//
//	FeatureFlagEnvironmentTargetArray{ FeatureFlagEnvironmentTargetArgs{...} }
type FeatureFlagEnvironmentTargetArrayInput interface {
	pulumi.Input

	ToFeatureFlagEnvironmentTargetArrayOutput() FeatureFlagEnvironmentTargetArrayOutput
	ToFeatureFlagEnvironmentTargetArrayOutputWithContext(context.Context) FeatureFlagEnvironmentTargetArrayOutput
}

type FeatureFlagEnvironmentTargetArray []FeatureFlagEnvironmentTargetInput

func (FeatureFlagEnvironmentTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (i FeatureFlagEnvironmentTargetArray) ToFeatureFlagEnvironmentTargetArrayOutput() FeatureFlagEnvironmentTargetArrayOutput {
	return i.ToFeatureFlagEnvironmentTargetArrayOutputWithContext(context.Background())
}

func (i FeatureFlagEnvironmentTargetArray) ToFeatureFlagEnvironmentTargetArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagEnvironmentTargetArrayOutput)
}

type FeatureFlagEnvironmentTargetOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (o FeatureFlagEnvironmentTargetOutput) ToFeatureFlagEnvironmentTargetOutput() FeatureFlagEnvironmentTargetOutput {
	return o
}

func (o FeatureFlagEnvironmentTargetOutput) ToFeatureFlagEnvironmentTargetOutputWithContext(ctx context.Context) FeatureFlagEnvironmentTargetOutput {
	return o
}

// List of `user` strings to target.
func (o FeatureFlagEnvironmentTargetOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentTarget) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// The index of the variation to serve is a user target value is matched.
func (o FeatureFlagEnvironmentTargetOutput) Variation() pulumi.IntOutput {
	return o.ApplyT(func(v FeatureFlagEnvironmentTarget) int { return v.Variation }).(pulumi.IntOutput)
}

type FeatureFlagEnvironmentTargetArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagEnvironmentTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (o FeatureFlagEnvironmentTargetArrayOutput) ToFeatureFlagEnvironmentTargetArrayOutput() FeatureFlagEnvironmentTargetArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentTargetArrayOutput) ToFeatureFlagEnvironmentTargetArrayOutputWithContext(ctx context.Context) FeatureFlagEnvironmentTargetArrayOutput {
	return o
}

func (o FeatureFlagEnvironmentTargetArrayOutput) Index(i pulumi.IntInput) FeatureFlagEnvironmentTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureFlagEnvironmentTarget {
		return vs[0].([]FeatureFlagEnvironmentTarget)[vs[1].(int)]
	}).(FeatureFlagEnvironmentTargetOutput)
}

type FeatureFlagVariation struct {
	// The variation's description.
	Description *string `pulumi:"description"`
	// The name of the variation.
	Name *string `pulumi:"name"`
	// The variation value. The value's type must correspond to the `variationType` argument. For example: `variationType = "boolean"` accepts only `true` or `false`. The `"number"` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`).
	Value string `pulumi:"value"`
}

// FeatureFlagVariationInput is an input type that accepts FeatureFlagVariationArgs and FeatureFlagVariationOutput values.
// You can construct a concrete instance of `FeatureFlagVariationInput` via:
//
//	FeatureFlagVariationArgs{...}
type FeatureFlagVariationInput interface {
	pulumi.Input

	ToFeatureFlagVariationOutput() FeatureFlagVariationOutput
	ToFeatureFlagVariationOutputWithContext(context.Context) FeatureFlagVariationOutput
}

type FeatureFlagVariationArgs struct {
	// The variation's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the variation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The variation value. The value's type must correspond to the `variationType` argument. For example: `variationType = "boolean"` accepts only `true` or `false`. The `"number"` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`).
	Value pulumi.StringInput `pulumi:"value"`
}

func (FeatureFlagVariationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagVariation)(nil)).Elem()
}

func (i FeatureFlagVariationArgs) ToFeatureFlagVariationOutput() FeatureFlagVariationOutput {
	return i.ToFeatureFlagVariationOutputWithContext(context.Background())
}

func (i FeatureFlagVariationArgs) ToFeatureFlagVariationOutputWithContext(ctx context.Context) FeatureFlagVariationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagVariationOutput)
}

// FeatureFlagVariationArrayInput is an input type that accepts FeatureFlagVariationArray and FeatureFlagVariationArrayOutput values.
// You can construct a concrete instance of `FeatureFlagVariationArrayInput` via:
//
//	FeatureFlagVariationArray{ FeatureFlagVariationArgs{...} }
type FeatureFlagVariationArrayInput interface {
	pulumi.Input

	ToFeatureFlagVariationArrayOutput() FeatureFlagVariationArrayOutput
	ToFeatureFlagVariationArrayOutputWithContext(context.Context) FeatureFlagVariationArrayOutput
}

type FeatureFlagVariationArray []FeatureFlagVariationInput

func (FeatureFlagVariationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagVariation)(nil)).Elem()
}

func (i FeatureFlagVariationArray) ToFeatureFlagVariationArrayOutput() FeatureFlagVariationArrayOutput {
	return i.ToFeatureFlagVariationArrayOutputWithContext(context.Background())
}

func (i FeatureFlagVariationArray) ToFeatureFlagVariationArrayOutputWithContext(ctx context.Context) FeatureFlagVariationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureFlagVariationArrayOutput)
}

type FeatureFlagVariationOutput struct{ *pulumi.OutputState }

func (FeatureFlagVariationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureFlagVariation)(nil)).Elem()
}

func (o FeatureFlagVariationOutput) ToFeatureFlagVariationOutput() FeatureFlagVariationOutput {
	return o
}

func (o FeatureFlagVariationOutput) ToFeatureFlagVariationOutputWithContext(ctx context.Context) FeatureFlagVariationOutput {
	return o
}

// The variation's description.
func (o FeatureFlagVariationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureFlagVariation) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the variation.
func (o FeatureFlagVariationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureFlagVariation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The variation value. The value's type must correspond to the `variationType` argument. For example: `variationType = "boolean"` accepts only `true` or `false`. The `"number"` variation type accepts both floats and ints, but please note that any trailing zeroes on floats will be trimmed (i.e. `1.1` and `1.100` will both be converted to `1.1`).
func (o FeatureFlagVariationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureFlagVariation) string { return v.Value }).(pulumi.StringOutput)
}

type FeatureFlagVariationArrayOutput struct{ *pulumi.OutputState }

func (FeatureFlagVariationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureFlagVariation)(nil)).Elem()
}

func (o FeatureFlagVariationArrayOutput) ToFeatureFlagVariationArrayOutput() FeatureFlagVariationArrayOutput {
	return o
}

func (o FeatureFlagVariationArrayOutput) ToFeatureFlagVariationArrayOutputWithContext(ctx context.Context) FeatureFlagVariationArrayOutput {
	return o
}

func (o FeatureFlagVariationArrayOutput) Index(i pulumi.IntInput) FeatureFlagVariationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureFlagVariation {
		return vs[0].([]FeatureFlagVariation)[vs[1].(int)]
	}).(FeatureFlagVariationOutput)
}

type FlagTriggerInstructions struct {
	Kind string `pulumi:"kind"`
}

// FlagTriggerInstructionsInput is an input type that accepts FlagTriggerInstructionsArgs and FlagTriggerInstructionsOutput values.
// You can construct a concrete instance of `FlagTriggerInstructionsInput` via:
//
//	FlagTriggerInstructionsArgs{...}
type FlagTriggerInstructionsInput interface {
	pulumi.Input

	ToFlagTriggerInstructionsOutput() FlagTriggerInstructionsOutput
	ToFlagTriggerInstructionsOutputWithContext(context.Context) FlagTriggerInstructionsOutput
}

type FlagTriggerInstructionsArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
}

func (FlagTriggerInstructionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlagTriggerInstructions)(nil)).Elem()
}

func (i FlagTriggerInstructionsArgs) ToFlagTriggerInstructionsOutput() FlagTriggerInstructionsOutput {
	return i.ToFlagTriggerInstructionsOutputWithContext(context.Background())
}

func (i FlagTriggerInstructionsArgs) ToFlagTriggerInstructionsOutputWithContext(ctx context.Context) FlagTriggerInstructionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlagTriggerInstructionsOutput)
}

func (i FlagTriggerInstructionsArgs) ToFlagTriggerInstructionsPtrOutput() FlagTriggerInstructionsPtrOutput {
	return i.ToFlagTriggerInstructionsPtrOutputWithContext(context.Background())
}

func (i FlagTriggerInstructionsArgs) ToFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) FlagTriggerInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlagTriggerInstructionsOutput).ToFlagTriggerInstructionsPtrOutputWithContext(ctx)
}

// FlagTriggerInstructionsPtrInput is an input type that accepts FlagTriggerInstructionsArgs, FlagTriggerInstructionsPtr and FlagTriggerInstructionsPtrOutput values.
// You can construct a concrete instance of `FlagTriggerInstructionsPtrInput` via:
//
//	        FlagTriggerInstructionsArgs{...}
//
//	or:
//
//	        nil
type FlagTriggerInstructionsPtrInput interface {
	pulumi.Input

	ToFlagTriggerInstructionsPtrOutput() FlagTriggerInstructionsPtrOutput
	ToFlagTriggerInstructionsPtrOutputWithContext(context.Context) FlagTriggerInstructionsPtrOutput
}

type flagTriggerInstructionsPtrType FlagTriggerInstructionsArgs

func FlagTriggerInstructionsPtr(v *FlagTriggerInstructionsArgs) FlagTriggerInstructionsPtrInput {
	return (*flagTriggerInstructionsPtrType)(v)
}

func (*flagTriggerInstructionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlagTriggerInstructions)(nil)).Elem()
}

func (i *flagTriggerInstructionsPtrType) ToFlagTriggerInstructionsPtrOutput() FlagTriggerInstructionsPtrOutput {
	return i.ToFlagTriggerInstructionsPtrOutputWithContext(context.Background())
}

func (i *flagTriggerInstructionsPtrType) ToFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) FlagTriggerInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlagTriggerInstructionsPtrOutput)
}

type FlagTriggerInstructionsOutput struct{ *pulumi.OutputState }

func (FlagTriggerInstructionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlagTriggerInstructions)(nil)).Elem()
}

func (o FlagTriggerInstructionsOutput) ToFlagTriggerInstructionsOutput() FlagTriggerInstructionsOutput {
	return o
}

func (o FlagTriggerInstructionsOutput) ToFlagTriggerInstructionsOutputWithContext(ctx context.Context) FlagTriggerInstructionsOutput {
	return o
}

func (o FlagTriggerInstructionsOutput) ToFlagTriggerInstructionsPtrOutput() FlagTriggerInstructionsPtrOutput {
	return o.ToFlagTriggerInstructionsPtrOutputWithContext(context.Background())
}

func (o FlagTriggerInstructionsOutput) ToFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) FlagTriggerInstructionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlagTriggerInstructions) *FlagTriggerInstructions {
		return &v
	}).(FlagTriggerInstructionsPtrOutput)
}

func (o FlagTriggerInstructionsOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v FlagTriggerInstructions) string { return v.Kind }).(pulumi.StringOutput)
}

type FlagTriggerInstructionsPtrOutput struct{ *pulumi.OutputState }

func (FlagTriggerInstructionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlagTriggerInstructions)(nil)).Elem()
}

func (o FlagTriggerInstructionsPtrOutput) ToFlagTriggerInstructionsPtrOutput() FlagTriggerInstructionsPtrOutput {
	return o
}

func (o FlagTriggerInstructionsPtrOutput) ToFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) FlagTriggerInstructionsPtrOutput {
	return o
}

func (o FlagTriggerInstructionsPtrOutput) Elem() FlagTriggerInstructionsOutput {
	return o.ApplyT(func(v *FlagTriggerInstructions) FlagTriggerInstructions {
		if v != nil {
			return *v
		}
		var ret FlagTriggerInstructions
		return ret
	}).(FlagTriggerInstructionsOutput)
}

func (o FlagTriggerInstructionsPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlagTriggerInstructions) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

type MetricUrl struct {
	// The URL type. Available choices are `exact`, `canonical`, `substring` and `regex`.
	Kind string `pulumi:"kind"`
	// The regex pattern to match by.
	Pattern *string `pulumi:"pattern"`
	// The URL substring to match by.
	Substring *string `pulumi:"substring"`
	// The exact or canonical URL.
	Url *string `pulumi:"url"`
}

// MetricUrlInput is an input type that accepts MetricUrlArgs and MetricUrlOutput values.
// You can construct a concrete instance of `MetricUrlInput` via:
//
//	MetricUrlArgs{...}
type MetricUrlInput interface {
	pulumi.Input

	ToMetricUrlOutput() MetricUrlOutput
	ToMetricUrlOutputWithContext(context.Context) MetricUrlOutput
}

type MetricUrlArgs struct {
	// The URL type. Available choices are `exact`, `canonical`, `substring` and `regex`.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The regex pattern to match by.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// The URL substring to match by.
	Substring pulumi.StringPtrInput `pulumi:"substring"`
	// The exact or canonical URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (MetricUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricUrl)(nil)).Elem()
}

func (i MetricUrlArgs) ToMetricUrlOutput() MetricUrlOutput {
	return i.ToMetricUrlOutputWithContext(context.Background())
}

func (i MetricUrlArgs) ToMetricUrlOutputWithContext(ctx context.Context) MetricUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricUrlOutput)
}

// MetricUrlArrayInput is an input type that accepts MetricUrlArray and MetricUrlArrayOutput values.
// You can construct a concrete instance of `MetricUrlArrayInput` via:
//
//	MetricUrlArray{ MetricUrlArgs{...} }
type MetricUrlArrayInput interface {
	pulumi.Input

	ToMetricUrlArrayOutput() MetricUrlArrayOutput
	ToMetricUrlArrayOutputWithContext(context.Context) MetricUrlArrayOutput
}

type MetricUrlArray []MetricUrlInput

func (MetricUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricUrl)(nil)).Elem()
}

func (i MetricUrlArray) ToMetricUrlArrayOutput() MetricUrlArrayOutput {
	return i.ToMetricUrlArrayOutputWithContext(context.Background())
}

func (i MetricUrlArray) ToMetricUrlArrayOutputWithContext(ctx context.Context) MetricUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricUrlArrayOutput)
}

type MetricUrlOutput struct{ *pulumi.OutputState }

func (MetricUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricUrl)(nil)).Elem()
}

func (o MetricUrlOutput) ToMetricUrlOutput() MetricUrlOutput {
	return o
}

func (o MetricUrlOutput) ToMetricUrlOutputWithContext(ctx context.Context) MetricUrlOutput {
	return o
}

// The URL type. Available choices are `exact`, `canonical`, `substring` and `regex`.
func (o MetricUrlOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MetricUrl) string { return v.Kind }).(pulumi.StringOutput)
}

// The regex pattern to match by.
func (o MetricUrlOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricUrl) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// The URL substring to match by.
func (o MetricUrlOutput) Substring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricUrl) *string { return v.Substring }).(pulumi.StringPtrOutput)
}

// The exact or canonical URL.
func (o MetricUrlOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricUrl) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type MetricUrlArrayOutput struct{ *pulumi.OutputState }

func (MetricUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricUrl)(nil)).Elem()
}

func (o MetricUrlArrayOutput) ToMetricUrlArrayOutput() MetricUrlArrayOutput {
	return o
}

func (o MetricUrlArrayOutput) ToMetricUrlArrayOutputWithContext(ctx context.Context) MetricUrlArrayOutput {
	return o
}

func (o MetricUrlArrayOutput) Index(i pulumi.IntInput) MetricUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricUrl {
		return vs[0].([]MetricUrl)[vs[1].(int)]
	}).(MetricUrlOutput)
}

type ProjectDefaultClientSideAvailability struct {
	// Whether feature flags created under the project are available to JavaScript SDKs using the client-side ID by default. Defaults to `false` when not using `defaultClientSideAvailability`.
	UsingEnvironmentId bool `pulumi:"usingEnvironmentId"`
	// Whether feature flags created under the project are available to mobile SDKs, and other non-JavaScript SDKs, using a mobile key by default. Defaults to `true` when not using `defaultClientSideAvailability`.
	UsingMobileKey bool `pulumi:"usingMobileKey"`
}

// ProjectDefaultClientSideAvailabilityInput is an input type that accepts ProjectDefaultClientSideAvailabilityArgs and ProjectDefaultClientSideAvailabilityOutput values.
// You can construct a concrete instance of `ProjectDefaultClientSideAvailabilityInput` via:
//
//	ProjectDefaultClientSideAvailabilityArgs{...}
type ProjectDefaultClientSideAvailabilityInput interface {
	pulumi.Input

	ToProjectDefaultClientSideAvailabilityOutput() ProjectDefaultClientSideAvailabilityOutput
	ToProjectDefaultClientSideAvailabilityOutputWithContext(context.Context) ProjectDefaultClientSideAvailabilityOutput
}

type ProjectDefaultClientSideAvailabilityArgs struct {
	// Whether feature flags created under the project are available to JavaScript SDKs using the client-side ID by default. Defaults to `false` when not using `defaultClientSideAvailability`.
	UsingEnvironmentId pulumi.BoolInput `pulumi:"usingEnvironmentId"`
	// Whether feature flags created under the project are available to mobile SDKs, and other non-JavaScript SDKs, using a mobile key by default. Defaults to `true` when not using `defaultClientSideAvailability`.
	UsingMobileKey pulumi.BoolInput `pulumi:"usingMobileKey"`
}

func (ProjectDefaultClientSideAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (i ProjectDefaultClientSideAvailabilityArgs) ToProjectDefaultClientSideAvailabilityOutput() ProjectDefaultClientSideAvailabilityOutput {
	return i.ToProjectDefaultClientSideAvailabilityOutputWithContext(context.Background())
}

func (i ProjectDefaultClientSideAvailabilityArgs) ToProjectDefaultClientSideAvailabilityOutputWithContext(ctx context.Context) ProjectDefaultClientSideAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultClientSideAvailabilityOutput)
}

// ProjectDefaultClientSideAvailabilityArrayInput is an input type that accepts ProjectDefaultClientSideAvailabilityArray and ProjectDefaultClientSideAvailabilityArrayOutput values.
// You can construct a concrete instance of `ProjectDefaultClientSideAvailabilityArrayInput` via:
//
//	ProjectDefaultClientSideAvailabilityArray{ ProjectDefaultClientSideAvailabilityArgs{...} }
type ProjectDefaultClientSideAvailabilityArrayInput interface {
	pulumi.Input

	ToProjectDefaultClientSideAvailabilityArrayOutput() ProjectDefaultClientSideAvailabilityArrayOutput
	ToProjectDefaultClientSideAvailabilityArrayOutputWithContext(context.Context) ProjectDefaultClientSideAvailabilityArrayOutput
}

type ProjectDefaultClientSideAvailabilityArray []ProjectDefaultClientSideAvailabilityInput

func (ProjectDefaultClientSideAvailabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (i ProjectDefaultClientSideAvailabilityArray) ToProjectDefaultClientSideAvailabilityArrayOutput() ProjectDefaultClientSideAvailabilityArrayOutput {
	return i.ToProjectDefaultClientSideAvailabilityArrayOutputWithContext(context.Background())
}

func (i ProjectDefaultClientSideAvailabilityArray) ToProjectDefaultClientSideAvailabilityArrayOutputWithContext(ctx context.Context) ProjectDefaultClientSideAvailabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultClientSideAvailabilityArrayOutput)
}

type ProjectDefaultClientSideAvailabilityOutput struct{ *pulumi.OutputState }

func (ProjectDefaultClientSideAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (o ProjectDefaultClientSideAvailabilityOutput) ToProjectDefaultClientSideAvailabilityOutput() ProjectDefaultClientSideAvailabilityOutput {
	return o
}

func (o ProjectDefaultClientSideAvailabilityOutput) ToProjectDefaultClientSideAvailabilityOutputWithContext(ctx context.Context) ProjectDefaultClientSideAvailabilityOutput {
	return o
}

// Whether feature flags created under the project are available to JavaScript SDKs using the client-side ID by default. Defaults to `false` when not using `defaultClientSideAvailability`.
func (o ProjectDefaultClientSideAvailabilityOutput) UsingEnvironmentId() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectDefaultClientSideAvailability) bool { return v.UsingEnvironmentId }).(pulumi.BoolOutput)
}

// Whether feature flags created under the project are available to mobile SDKs, and other non-JavaScript SDKs, using a mobile key by default. Defaults to `true` when not using `defaultClientSideAvailability`.
func (o ProjectDefaultClientSideAvailabilityOutput) UsingMobileKey() pulumi.BoolOutput {
	return o.ApplyT(func(v ProjectDefaultClientSideAvailability) bool { return v.UsingMobileKey }).(pulumi.BoolOutput)
}

type ProjectDefaultClientSideAvailabilityArrayOutput struct{ *pulumi.OutputState }

func (ProjectDefaultClientSideAvailabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (o ProjectDefaultClientSideAvailabilityArrayOutput) ToProjectDefaultClientSideAvailabilityArrayOutput() ProjectDefaultClientSideAvailabilityArrayOutput {
	return o
}

func (o ProjectDefaultClientSideAvailabilityArrayOutput) ToProjectDefaultClientSideAvailabilityArrayOutputWithContext(ctx context.Context) ProjectDefaultClientSideAvailabilityArrayOutput {
	return o
}

func (o ProjectDefaultClientSideAvailabilityArrayOutput) Index(i pulumi.IntInput) ProjectDefaultClientSideAvailabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectDefaultClientSideAvailability {
		return vs[0].([]ProjectDefaultClientSideAvailability)[vs[1].(int)]
	}).(ProjectDefaultClientSideAvailabilityOutput)
}

type ProjectEnvironment struct {
	ApiKey           *string                             `pulumi:"apiKey"`
	ApprovalSettings []ProjectEnvironmentApprovalSetting `pulumi:"approvalSettings"`
	ClientSideId     *string                             `pulumi:"clientSideId"`
	// The color swatch as an RGB hex value with no leading `#`. For example: `000000`.
	Color string `pulumi:"color"`
	// Set to `true` if this environment requires confirmation for flag and segment changes. This field will default to `false` when not set.
	ConfirmChanges *bool `pulumi:"confirmChanges"`
	// Set to `true` to enable data export for every flag created in this environment after you configure this argument. This field will default to `false` when not set. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
	DefaultTrackEvents *bool `pulumi:"defaultTrackEvents"`
	// The TTL for the environment. This must be between 0 and 60 minutes. The TTL setting only applies to environments using the PHP SDK. This field will default to `0` when not set. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
	DefaultTtl *int `pulumi:"defaultTtl"`
	// The project-unique key for the environment. A change in this field will force the destruction of the existing environment and the creation of a new one.
	Key       string  `pulumi:"key"`
	MobileKey *string `pulumi:"mobileKey"`
	// The name of the environment.
	Name string `pulumi:"name"`
	// Set to `true` if this environment requires comments for flag and segment changes. This field will default to `false` when not set.
	RequireComments *bool `pulumi:"requireComments"`
	// Set to `true` to ensure a user of the client-side SDK cannot impersonate another user. This field will default to `false` when not set.
	SecureMode *bool `pulumi:"secureMode"`
	// Set of tags associated with the environment.
	Tags []string `pulumi:"tags"`
}

// ProjectEnvironmentInput is an input type that accepts ProjectEnvironmentArgs and ProjectEnvironmentOutput values.
// You can construct a concrete instance of `ProjectEnvironmentInput` via:
//
//	ProjectEnvironmentArgs{...}
type ProjectEnvironmentInput interface {
	pulumi.Input

	ToProjectEnvironmentOutput() ProjectEnvironmentOutput
	ToProjectEnvironmentOutputWithContext(context.Context) ProjectEnvironmentOutput
}

type ProjectEnvironmentArgs struct {
	ApiKey           pulumi.StringPtrInput                       `pulumi:"apiKey"`
	ApprovalSettings ProjectEnvironmentApprovalSettingArrayInput `pulumi:"approvalSettings"`
	ClientSideId     pulumi.StringPtrInput                       `pulumi:"clientSideId"`
	// The color swatch as an RGB hex value with no leading `#`. For example: `000000`.
	Color pulumi.StringInput `pulumi:"color"`
	// Set to `true` if this environment requires confirmation for flag and segment changes. This field will default to `false` when not set.
	ConfirmChanges pulumi.BoolPtrInput `pulumi:"confirmChanges"`
	// Set to `true` to enable data export for every flag created in this environment after you configure this argument. This field will default to `false` when not set. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
	DefaultTrackEvents pulumi.BoolPtrInput `pulumi:"defaultTrackEvents"`
	// The TTL for the environment. This must be between 0 and 60 minutes. The TTL setting only applies to environments using the PHP SDK. This field will default to `0` when not set. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
	DefaultTtl pulumi.IntPtrInput `pulumi:"defaultTtl"`
	// The project-unique key for the environment. A change in this field will force the destruction of the existing environment and the creation of a new one.
	Key       pulumi.StringInput    `pulumi:"key"`
	MobileKey pulumi.StringPtrInput `pulumi:"mobileKey"`
	// The name of the environment.
	Name pulumi.StringInput `pulumi:"name"`
	// Set to `true` if this environment requires comments for flag and segment changes. This field will default to `false` when not set.
	RequireComments pulumi.BoolPtrInput `pulumi:"requireComments"`
	// Set to `true` to ensure a user of the client-side SDK cannot impersonate another user. This field will default to `false` when not set.
	SecureMode pulumi.BoolPtrInput `pulumi:"secureMode"`
	// Set of tags associated with the environment.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (ProjectEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return i.ToProjectEnvironmentOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArgs) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentOutput)
}

// ProjectEnvironmentArrayInput is an input type that accepts ProjectEnvironmentArray and ProjectEnvironmentArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentArrayInput` via:
//
//	ProjectEnvironmentArray{ ProjectEnvironmentArgs{...} }
type ProjectEnvironmentArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput
	ToProjectEnvironmentArrayOutputWithContext(context.Context) ProjectEnvironmentArrayOutput
}

type ProjectEnvironmentArray []ProjectEnvironmentInput

func (ProjectEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironment)(nil)).Elem()
}

func (i ProjectEnvironmentArray) ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput {
	return i.ToProjectEnvironmentArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentArray) ToProjectEnvironmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentArrayOutput)
}

type ProjectEnvironmentOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutput() ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ToProjectEnvironmentOutputWithContext(ctx context.Context) ProjectEnvironmentOutput {
	return o
}

func (o ProjectEnvironmentOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

func (o ProjectEnvironmentOutput) ApprovalSettings() ProjectEnvironmentApprovalSettingArrayOutput {
	return o.ApplyT(func(v ProjectEnvironment) []ProjectEnvironmentApprovalSetting { return v.ApprovalSettings }).(ProjectEnvironmentApprovalSettingArrayOutput)
}

func (o ProjectEnvironmentOutput) ClientSideId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.ClientSideId }).(pulumi.StringPtrOutput)
}

// The color swatch as an RGB hex value with no leading `#`. For example: `000000`.
func (o ProjectEnvironmentOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Color }).(pulumi.StringOutput)
}

// Set to `true` if this environment requires confirmation for flag and segment changes. This field will default to `false` when not set.
func (o ProjectEnvironmentOutput) ConfirmChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.ConfirmChanges }).(pulumi.BoolPtrOutput)
}

// Set to `true` to enable data export for every flag created in this environment after you configure this argument. This field will default to `false` when not set. To learn more, read [Data Export](https://docs.launchdarkly.com/docs/data-export).
func (o ProjectEnvironmentOutput) DefaultTrackEvents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.DefaultTrackEvents }).(pulumi.BoolPtrOutput)
}

// The TTL for the environment. This must be between 0 and 60 minutes. The TTL setting only applies to environments using the PHP SDK. This field will default to `0` when not set. To learn more, read [TTL settings](https://docs.launchdarkly.com/docs/environments#section-ttl-settings).
func (o ProjectEnvironmentOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *int { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

// The project-unique key for the environment. A change in this field will force the destruction of the existing environment and the creation of a new one.
func (o ProjectEnvironmentOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Key }).(pulumi.StringOutput)
}

func (o ProjectEnvironmentOutput) MobileKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *string { return v.MobileKey }).(pulumi.StringPtrOutput)
}

// The name of the environment.
func (o ProjectEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

// Set to `true` if this environment requires comments for flag and segment changes. This field will default to `false` when not set.
func (o ProjectEnvironmentOutput) RequireComments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.RequireComments }).(pulumi.BoolPtrOutput)
}

// Set to `true` to ensure a user of the client-side SDK cannot impersonate another user. This field will default to `false` when not set.
func (o ProjectEnvironmentOutput) SecureMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironment) *bool { return v.SecureMode }).(pulumi.BoolPtrOutput)
}

// Set of tags associated with the environment.
func (o ProjectEnvironmentOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectEnvironment) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type ProjectEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironment)(nil)).Elem()
}

func (o ProjectEnvironmentArrayOutput) ToProjectEnvironmentArrayOutput() ProjectEnvironmentArrayOutput {
	return o
}

func (o ProjectEnvironmentArrayOutput) ToProjectEnvironmentArrayOutputWithContext(ctx context.Context) ProjectEnvironmentArrayOutput {
	return o
}

func (o ProjectEnvironmentArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectEnvironment {
		return vs[0].([]ProjectEnvironment)[vs[1].(int)]
	}).(ProjectEnvironmentOutput)
}

type ProjectEnvironmentApprovalSetting struct {
	// Set to `true` if changes can be applied as long as the `minNumApprovals` is met, regardless of whether any reviewers have declined a request. Defaults to `true`.
	CanApplyDeclinedChanges *bool `pulumi:"canApplyDeclinedChanges"`
	// Set to `true` if requesters can approve or decline their own request. They may always comment. Defaults to `false`.
	CanReviewOwnRequest *bool `pulumi:"canReviewOwnRequest"`
	// The number of approvals required before an approval request can be applied. This number must be between 1 and 5. Defaults to 1.
	MinNumApprovals *int `pulumi:"minNumApprovals"`
	// Set to `true` for changes to flags in this environment to require approval. You may only set `required` to true if `requiredApprovalTags` is not set and vice versa. Defaults to `false`.
	Required *bool `pulumi:"required"`
	// An array of tags used to specify which flags with those tags require approval. You may only set `requiredApprovalTags` if `required` is not set to `true` and vice versa.
	RequiredApprovalTags []string `pulumi:"requiredApprovalTags"`
}

// ProjectEnvironmentApprovalSettingInput is an input type that accepts ProjectEnvironmentApprovalSettingArgs and ProjectEnvironmentApprovalSettingOutput values.
// You can construct a concrete instance of `ProjectEnvironmentApprovalSettingInput` via:
//
//	ProjectEnvironmentApprovalSettingArgs{...}
type ProjectEnvironmentApprovalSettingInput interface {
	pulumi.Input

	ToProjectEnvironmentApprovalSettingOutput() ProjectEnvironmentApprovalSettingOutput
	ToProjectEnvironmentApprovalSettingOutputWithContext(context.Context) ProjectEnvironmentApprovalSettingOutput
}

type ProjectEnvironmentApprovalSettingArgs struct {
	// Set to `true` if changes can be applied as long as the `minNumApprovals` is met, regardless of whether any reviewers have declined a request. Defaults to `true`.
	CanApplyDeclinedChanges pulumi.BoolPtrInput `pulumi:"canApplyDeclinedChanges"`
	// Set to `true` if requesters can approve or decline their own request. They may always comment. Defaults to `false`.
	CanReviewOwnRequest pulumi.BoolPtrInput `pulumi:"canReviewOwnRequest"`
	// The number of approvals required before an approval request can be applied. This number must be between 1 and 5. Defaults to 1.
	MinNumApprovals pulumi.IntPtrInput `pulumi:"minNumApprovals"`
	// Set to `true` for changes to flags in this environment to require approval. You may only set `required` to true if `requiredApprovalTags` is not set and vice versa. Defaults to `false`.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// An array of tags used to specify which flags with those tags require approval. You may only set `requiredApprovalTags` if `required` is not set to `true` and vice versa.
	RequiredApprovalTags pulumi.StringArrayInput `pulumi:"requiredApprovalTags"`
}

func (ProjectEnvironmentApprovalSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentApprovalSetting)(nil)).Elem()
}

func (i ProjectEnvironmentApprovalSettingArgs) ToProjectEnvironmentApprovalSettingOutput() ProjectEnvironmentApprovalSettingOutput {
	return i.ToProjectEnvironmentApprovalSettingOutputWithContext(context.Background())
}

func (i ProjectEnvironmentApprovalSettingArgs) ToProjectEnvironmentApprovalSettingOutputWithContext(ctx context.Context) ProjectEnvironmentApprovalSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentApprovalSettingOutput)
}

// ProjectEnvironmentApprovalSettingArrayInput is an input type that accepts ProjectEnvironmentApprovalSettingArray and ProjectEnvironmentApprovalSettingArrayOutput values.
// You can construct a concrete instance of `ProjectEnvironmentApprovalSettingArrayInput` via:
//
//	ProjectEnvironmentApprovalSettingArray{ ProjectEnvironmentApprovalSettingArgs{...} }
type ProjectEnvironmentApprovalSettingArrayInput interface {
	pulumi.Input

	ToProjectEnvironmentApprovalSettingArrayOutput() ProjectEnvironmentApprovalSettingArrayOutput
	ToProjectEnvironmentApprovalSettingArrayOutputWithContext(context.Context) ProjectEnvironmentApprovalSettingArrayOutput
}

type ProjectEnvironmentApprovalSettingArray []ProjectEnvironmentApprovalSettingInput

func (ProjectEnvironmentApprovalSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentApprovalSetting)(nil)).Elem()
}

func (i ProjectEnvironmentApprovalSettingArray) ToProjectEnvironmentApprovalSettingArrayOutput() ProjectEnvironmentApprovalSettingArrayOutput {
	return i.ToProjectEnvironmentApprovalSettingArrayOutputWithContext(context.Background())
}

func (i ProjectEnvironmentApprovalSettingArray) ToProjectEnvironmentApprovalSettingArrayOutputWithContext(ctx context.Context) ProjectEnvironmentApprovalSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectEnvironmentApprovalSettingArrayOutput)
}

type ProjectEnvironmentApprovalSettingOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentApprovalSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectEnvironmentApprovalSetting)(nil)).Elem()
}

func (o ProjectEnvironmentApprovalSettingOutput) ToProjectEnvironmentApprovalSettingOutput() ProjectEnvironmentApprovalSettingOutput {
	return o
}

func (o ProjectEnvironmentApprovalSettingOutput) ToProjectEnvironmentApprovalSettingOutputWithContext(ctx context.Context) ProjectEnvironmentApprovalSettingOutput {
	return o
}

// Set to `true` if changes can be applied as long as the `minNumApprovals` is met, regardless of whether any reviewers have declined a request. Defaults to `true`.
func (o ProjectEnvironmentApprovalSettingOutput) CanApplyDeclinedChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentApprovalSetting) *bool { return v.CanApplyDeclinedChanges }).(pulumi.BoolPtrOutput)
}

// Set to `true` if requesters can approve or decline their own request. They may always comment. Defaults to `false`.
func (o ProjectEnvironmentApprovalSettingOutput) CanReviewOwnRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentApprovalSetting) *bool { return v.CanReviewOwnRequest }).(pulumi.BoolPtrOutput)
}

// The number of approvals required before an approval request can be applied. This number must be between 1 and 5. Defaults to 1.
func (o ProjectEnvironmentApprovalSettingOutput) MinNumApprovals() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentApprovalSetting) *int { return v.MinNumApprovals }).(pulumi.IntPtrOutput)
}

// Set to `true` for changes to flags in this environment to require approval. You may only set `required` to true if `requiredApprovalTags` is not set and vice versa. Defaults to `false`.
func (o ProjectEnvironmentApprovalSettingOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectEnvironmentApprovalSetting) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// An array of tags used to specify which flags with those tags require approval. You may only set `requiredApprovalTags` if `required` is not set to `true` and vice versa.
func (o ProjectEnvironmentApprovalSettingOutput) RequiredApprovalTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectEnvironmentApprovalSetting) []string { return v.RequiredApprovalTags }).(pulumi.StringArrayOutput)
}

type ProjectEnvironmentApprovalSettingArrayOutput struct{ *pulumi.OutputState }

func (ProjectEnvironmentApprovalSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectEnvironmentApprovalSetting)(nil)).Elem()
}

func (o ProjectEnvironmentApprovalSettingArrayOutput) ToProjectEnvironmentApprovalSettingArrayOutput() ProjectEnvironmentApprovalSettingArrayOutput {
	return o
}

func (o ProjectEnvironmentApprovalSettingArrayOutput) ToProjectEnvironmentApprovalSettingArrayOutputWithContext(ctx context.Context) ProjectEnvironmentApprovalSettingArrayOutput {
	return o
}

func (o ProjectEnvironmentApprovalSettingArrayOutput) Index(i pulumi.IntInput) ProjectEnvironmentApprovalSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectEnvironmentApprovalSetting {
		return vs[0].([]ProjectEnvironmentApprovalSetting)[vs[1].(int)]
	}).(ProjectEnvironmentApprovalSettingOutput)
}

type RelayProxyConfigurationPolicy struct {
	// The list of action specifiers defining the actions to which the rule policy applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []string `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the rule policy allows or denies access to the named resources and actions.
	Effect string `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the rule policy does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	NotActions []string `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the rule policy does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources []string `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the rule policy applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources []string `pulumi:"resources"`
}

// RelayProxyConfigurationPolicyInput is an input type that accepts RelayProxyConfigurationPolicyArgs and RelayProxyConfigurationPolicyOutput values.
// You can construct a concrete instance of `RelayProxyConfigurationPolicyInput` via:
//
//	RelayProxyConfigurationPolicyArgs{...}
type RelayProxyConfigurationPolicyInput interface {
	pulumi.Input

	ToRelayProxyConfigurationPolicyOutput() RelayProxyConfigurationPolicyOutput
	ToRelayProxyConfigurationPolicyOutputWithContext(context.Context) RelayProxyConfigurationPolicyOutput
}

type RelayProxyConfigurationPolicyArgs struct {
	// The list of action specifiers defining the actions to which the rule policy applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// - Either `allow` or `deny`. This argument defines whether the rule policy allows or denies access to the named resources and actions.
	Effect pulumi.StringInput `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the rule policy does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// - The list of resource specifiers defining the resources to which the rule policy does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// - The list of resource specifiers defining the resources to which the rule policy applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (RelayProxyConfigurationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayProxyConfigurationPolicy)(nil)).Elem()
}

func (i RelayProxyConfigurationPolicyArgs) ToRelayProxyConfigurationPolicyOutput() RelayProxyConfigurationPolicyOutput {
	return i.ToRelayProxyConfigurationPolicyOutputWithContext(context.Background())
}

func (i RelayProxyConfigurationPolicyArgs) ToRelayProxyConfigurationPolicyOutputWithContext(ctx context.Context) RelayProxyConfigurationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayProxyConfigurationPolicyOutput)
}

// RelayProxyConfigurationPolicyArrayInput is an input type that accepts RelayProxyConfigurationPolicyArray and RelayProxyConfigurationPolicyArrayOutput values.
// You can construct a concrete instance of `RelayProxyConfigurationPolicyArrayInput` via:
//
//	RelayProxyConfigurationPolicyArray{ RelayProxyConfigurationPolicyArgs{...} }
type RelayProxyConfigurationPolicyArrayInput interface {
	pulumi.Input

	ToRelayProxyConfigurationPolicyArrayOutput() RelayProxyConfigurationPolicyArrayOutput
	ToRelayProxyConfigurationPolicyArrayOutputWithContext(context.Context) RelayProxyConfigurationPolicyArrayOutput
}

type RelayProxyConfigurationPolicyArray []RelayProxyConfigurationPolicyInput

func (RelayProxyConfigurationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelayProxyConfigurationPolicy)(nil)).Elem()
}

func (i RelayProxyConfigurationPolicyArray) ToRelayProxyConfigurationPolicyArrayOutput() RelayProxyConfigurationPolicyArrayOutput {
	return i.ToRelayProxyConfigurationPolicyArrayOutputWithContext(context.Background())
}

func (i RelayProxyConfigurationPolicyArray) ToRelayProxyConfigurationPolicyArrayOutputWithContext(ctx context.Context) RelayProxyConfigurationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelayProxyConfigurationPolicyArrayOutput)
}

type RelayProxyConfigurationPolicyOutput struct{ *pulumi.OutputState }

func (RelayProxyConfigurationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelayProxyConfigurationPolicy)(nil)).Elem()
}

func (o RelayProxyConfigurationPolicyOutput) ToRelayProxyConfigurationPolicyOutput() RelayProxyConfigurationPolicyOutput {
	return o
}

func (o RelayProxyConfigurationPolicyOutput) ToRelayProxyConfigurationPolicyOutputWithContext(ctx context.Context) RelayProxyConfigurationPolicyOutput {
	return o
}

// The list of action specifiers defining the actions to which the rule policy applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
func (o RelayProxyConfigurationPolicyOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RelayProxyConfigurationPolicy) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// - Either `allow` or `deny`. This argument defines whether the rule policy allows or denies access to the named resources and actions.
func (o RelayProxyConfigurationPolicyOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v RelayProxyConfigurationPolicy) string { return v.Effect }).(pulumi.StringOutput)
}

// The list of action specifiers defining the actions to which the rule policy does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
func (o RelayProxyConfigurationPolicyOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RelayProxyConfigurationPolicy) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the rule policy does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o RelayProxyConfigurationPolicyOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RelayProxyConfigurationPolicy) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// - The list of resource specifiers defining the resources to which the rule policy applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o RelayProxyConfigurationPolicyOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RelayProxyConfigurationPolicy) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type RelayProxyConfigurationPolicyArrayOutput struct{ *pulumi.OutputState }

func (RelayProxyConfigurationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelayProxyConfigurationPolicy)(nil)).Elem()
}

func (o RelayProxyConfigurationPolicyArrayOutput) ToRelayProxyConfigurationPolicyArrayOutput() RelayProxyConfigurationPolicyArrayOutput {
	return o
}

func (o RelayProxyConfigurationPolicyArrayOutput) ToRelayProxyConfigurationPolicyArrayOutputWithContext(ctx context.Context) RelayProxyConfigurationPolicyArrayOutput {
	return o
}

func (o RelayProxyConfigurationPolicyArrayOutput) Index(i pulumi.IntInput) RelayProxyConfigurationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelayProxyConfigurationPolicy {
		return vs[0].([]RelayProxyConfigurationPolicy)[vs[1].(int)]
	}).(RelayProxyConfigurationPolicyOutput)
}

type SegmentRule struct {
	// The attribute by which to group users together.
	BucketBy *string `pulumi:"bucketBy"`
	// List of nested custom rule clause blocks. To learn more, read Nested Clauses Blocks.
	Clauses []SegmentRuleClause `pulumi:"clauses"`
	// The integer weight of the rule (between 1 and 100000).
	Weight *int `pulumi:"weight"`
}

// SegmentRuleInput is an input type that accepts SegmentRuleArgs and SegmentRuleOutput values.
// You can construct a concrete instance of `SegmentRuleInput` via:
//
//	SegmentRuleArgs{...}
type SegmentRuleInput interface {
	pulumi.Input

	ToSegmentRuleOutput() SegmentRuleOutput
	ToSegmentRuleOutputWithContext(context.Context) SegmentRuleOutput
}

type SegmentRuleArgs struct {
	// The attribute by which to group users together.
	BucketBy pulumi.StringPtrInput `pulumi:"bucketBy"`
	// List of nested custom rule clause blocks. To learn more, read Nested Clauses Blocks.
	Clauses SegmentRuleClauseArrayInput `pulumi:"clauses"`
	// The integer weight of the rule (between 1 and 100000).
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (SegmentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentRule)(nil)).Elem()
}

func (i SegmentRuleArgs) ToSegmentRuleOutput() SegmentRuleOutput {
	return i.ToSegmentRuleOutputWithContext(context.Background())
}

func (i SegmentRuleArgs) ToSegmentRuleOutputWithContext(ctx context.Context) SegmentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentRuleOutput)
}

// SegmentRuleArrayInput is an input type that accepts SegmentRuleArray and SegmentRuleArrayOutput values.
// You can construct a concrete instance of `SegmentRuleArrayInput` via:
//
//	SegmentRuleArray{ SegmentRuleArgs{...} }
type SegmentRuleArrayInput interface {
	pulumi.Input

	ToSegmentRuleArrayOutput() SegmentRuleArrayOutput
	ToSegmentRuleArrayOutputWithContext(context.Context) SegmentRuleArrayOutput
}

type SegmentRuleArray []SegmentRuleInput

func (SegmentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentRule)(nil)).Elem()
}

func (i SegmentRuleArray) ToSegmentRuleArrayOutput() SegmentRuleArrayOutput {
	return i.ToSegmentRuleArrayOutputWithContext(context.Background())
}

func (i SegmentRuleArray) ToSegmentRuleArrayOutputWithContext(ctx context.Context) SegmentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentRuleArrayOutput)
}

type SegmentRuleOutput struct{ *pulumi.OutputState }

func (SegmentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentRule)(nil)).Elem()
}

func (o SegmentRuleOutput) ToSegmentRuleOutput() SegmentRuleOutput {
	return o
}

func (o SegmentRuleOutput) ToSegmentRuleOutputWithContext(ctx context.Context) SegmentRuleOutput {
	return o
}

// The attribute by which to group users together.
func (o SegmentRuleOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentRule) *string { return v.BucketBy }).(pulumi.StringPtrOutput)
}

// List of nested custom rule clause blocks. To learn more, read Nested Clauses Blocks.
func (o SegmentRuleOutput) Clauses() SegmentRuleClauseArrayOutput {
	return o.ApplyT(func(v SegmentRule) []SegmentRuleClause { return v.Clauses }).(SegmentRuleClauseArrayOutput)
}

// The integer weight of the rule (between 1 and 100000).
func (o SegmentRuleOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SegmentRule) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type SegmentRuleArrayOutput struct{ *pulumi.OutputState }

func (SegmentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentRule)(nil)).Elem()
}

func (o SegmentRuleArrayOutput) ToSegmentRuleArrayOutput() SegmentRuleArrayOutput {
	return o
}

func (o SegmentRuleArrayOutput) ToSegmentRuleArrayOutputWithContext(ctx context.Context) SegmentRuleArrayOutput {
	return o
}

func (o SegmentRuleArrayOutput) Index(i pulumi.IntInput) SegmentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentRule {
		return vs[0].([]SegmentRule)[vs[1].(int)]
	}).(SegmentRuleOutput)
}

type SegmentRuleClause struct {
	// The user attribute to operate on.
	Attribute string `pulumi:"attribute"`
	// Whether to negate the rule clause.
	Negate *bool `pulumi:"negate"`
	// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op string `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `valueType` defaults to `string`.
	ValueType *string `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values []string `pulumi:"values"`
}

// SegmentRuleClauseInput is an input type that accepts SegmentRuleClauseArgs and SegmentRuleClauseOutput values.
// You can construct a concrete instance of `SegmentRuleClauseInput` via:
//
//	SegmentRuleClauseArgs{...}
type SegmentRuleClauseInput interface {
	pulumi.Input

	ToSegmentRuleClauseOutput() SegmentRuleClauseOutput
	ToSegmentRuleClauseOutputWithContext(context.Context) SegmentRuleClauseOutput
}

type SegmentRuleClauseArgs struct {
	// The user attribute to operate on.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Whether to negate the rule clause.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op pulumi.StringInput `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `valueType` defaults to `string`.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (SegmentRuleClauseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentRuleClause)(nil)).Elem()
}

func (i SegmentRuleClauseArgs) ToSegmentRuleClauseOutput() SegmentRuleClauseOutput {
	return i.ToSegmentRuleClauseOutputWithContext(context.Background())
}

func (i SegmentRuleClauseArgs) ToSegmentRuleClauseOutputWithContext(ctx context.Context) SegmentRuleClauseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentRuleClauseOutput)
}

// SegmentRuleClauseArrayInput is an input type that accepts SegmentRuleClauseArray and SegmentRuleClauseArrayOutput values.
// You can construct a concrete instance of `SegmentRuleClauseArrayInput` via:
//
//	SegmentRuleClauseArray{ SegmentRuleClauseArgs{...} }
type SegmentRuleClauseArrayInput interface {
	pulumi.Input

	ToSegmentRuleClauseArrayOutput() SegmentRuleClauseArrayOutput
	ToSegmentRuleClauseArrayOutputWithContext(context.Context) SegmentRuleClauseArrayOutput
}

type SegmentRuleClauseArray []SegmentRuleClauseInput

func (SegmentRuleClauseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentRuleClause)(nil)).Elem()
}

func (i SegmentRuleClauseArray) ToSegmentRuleClauseArrayOutput() SegmentRuleClauseArrayOutput {
	return i.ToSegmentRuleClauseArrayOutputWithContext(context.Background())
}

func (i SegmentRuleClauseArray) ToSegmentRuleClauseArrayOutputWithContext(ctx context.Context) SegmentRuleClauseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentRuleClauseArrayOutput)
}

type SegmentRuleClauseOutput struct{ *pulumi.OutputState }

func (SegmentRuleClauseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentRuleClause)(nil)).Elem()
}

func (o SegmentRuleClauseOutput) ToSegmentRuleClauseOutput() SegmentRuleClauseOutput {
	return o
}

func (o SegmentRuleClauseOutput) ToSegmentRuleClauseOutputWithContext(ctx context.Context) SegmentRuleClauseOutput {
	return o
}

// The user attribute to operate on.
func (o SegmentRuleClauseOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentRuleClause) string { return v.Attribute }).(pulumi.StringOutput)
}

// Whether to negate the rule clause.
func (o SegmentRuleClauseOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SegmentRuleClause) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// The operator associated with the rule clause. Available options are `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
func (o SegmentRuleClauseOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentRuleClause) string { return v.Op }).(pulumi.StringOutput)
}

// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`. If omitted, `valueType` defaults to `string`.
func (o SegmentRuleClauseOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentRuleClause) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

// The list of values associated with the rule clause.
func (o SegmentRuleClauseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SegmentRuleClause) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type SegmentRuleClauseArrayOutput struct{ *pulumi.OutputState }

func (SegmentRuleClauseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SegmentRuleClause)(nil)).Elem()
}

func (o SegmentRuleClauseArrayOutput) ToSegmentRuleClauseArrayOutput() SegmentRuleClauseArrayOutput {
	return o
}

func (o SegmentRuleClauseArrayOutput) ToSegmentRuleClauseArrayOutputWithContext(ctx context.Context) SegmentRuleClauseArrayOutput {
	return o
}

func (o SegmentRuleClauseArrayOutput) Index(i pulumi.IntInput) SegmentRuleClauseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SegmentRuleClause {
		return vs[0].([]SegmentRuleClause)[vs[1].(int)]
	}).(SegmentRuleClauseOutput)
}

type WebhookStatement struct {
	// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions []string `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect string `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	NotActions []string `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources []string `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources []string `pulumi:"resources"`
}

// WebhookStatementInput is an input type that accepts WebhookStatementArgs and WebhookStatementOutput values.
// You can construct a concrete instance of `WebhookStatementInput` via:
//
//	WebhookStatementArgs{...}
type WebhookStatementInput interface {
	pulumi.Input

	ToWebhookStatementOutput() WebhookStatementOutput
	ToWebhookStatementOutputWithContext(context.Context) WebhookStatementOutput
}

type WebhookStatementArgs struct {
	// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect pulumi.StringInput `pulumi:"effect"`
	// The list of action specifiers defining the actions to which the statement does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (WebhookStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookStatement)(nil)).Elem()
}

func (i WebhookStatementArgs) ToWebhookStatementOutput() WebhookStatementOutput {
	return i.ToWebhookStatementOutputWithContext(context.Background())
}

func (i WebhookStatementArgs) ToWebhookStatementOutputWithContext(ctx context.Context) WebhookStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookStatementOutput)
}

// WebhookStatementArrayInput is an input type that accepts WebhookStatementArray and WebhookStatementArrayOutput values.
// You can construct a concrete instance of `WebhookStatementArrayInput` via:
//
//	WebhookStatementArray{ WebhookStatementArgs{...} }
type WebhookStatementArrayInput interface {
	pulumi.Input

	ToWebhookStatementArrayOutput() WebhookStatementArrayOutput
	ToWebhookStatementArrayOutputWithContext(context.Context) WebhookStatementArrayOutput
}

type WebhookStatementArray []WebhookStatementInput

func (WebhookStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookStatement)(nil)).Elem()
}

func (i WebhookStatementArray) ToWebhookStatementArrayOutput() WebhookStatementArrayOutput {
	return i.ToWebhookStatementArrayOutputWithContext(context.Background())
}

func (i WebhookStatementArray) ToWebhookStatementArrayOutputWithContext(ctx context.Context) WebhookStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookStatementArrayOutput)
}

type WebhookStatementOutput struct{ *pulumi.OutputState }

func (WebhookStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookStatement)(nil)).Elem()
}

func (o WebhookStatementOutput) ToWebhookStatementOutput() WebhookStatementOutput {
	return o
}

func (o WebhookStatementOutput) ToWebhookStatementOutputWithContext(ctx context.Context) WebhookStatementOutput {
	return o
}

// The list of action specifiers defining the actions to which the statement applies. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
func (o WebhookStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WebhookStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o WebhookStatementOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookStatement) string { return v.Effect }).(pulumi.StringOutput)
}

// The list of action specifiers defining the actions to which the statement does not apply. Either `actions` or `notActions` must be specified. For a list of available actions read [Actions reference](https://docs.launchdarkly.com/home/account-security/custom-roles/actions#actions-reference).
func (o WebhookStatementOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WebhookStatement) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o WebhookStatementOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WebhookStatement) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o WebhookStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WebhookStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type WebhookStatementArrayOutput struct{ *pulumi.OutputState }

func (WebhookStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookStatement)(nil)).Elem()
}

func (o WebhookStatementArrayOutput) ToWebhookStatementArrayOutput() WebhookStatementArrayOutput {
	return o
}

func (o WebhookStatementArrayOutput) ToWebhookStatementArrayOutputWithContext(ctx context.Context) WebhookStatementArrayOutput {
	return o
}

func (o WebhookStatementArrayOutput) Index(i pulumi.IntInput) WebhookStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookStatement {
		return vs[0].([]WebhookStatement)[vs[1].(int)]
	}).(WebhookStatementOutput)
}

type GetAuditLogSubscriptionStatement struct {
	Actions []string `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect     string   `pulumi:"effect"`
	NotActions []string `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	NotResources []string `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. To learn more about how to configure these read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	Resources []string `pulumi:"resources"`
}

// GetAuditLogSubscriptionStatementInput is an input type that accepts GetAuditLogSubscriptionStatementArgs and GetAuditLogSubscriptionStatementOutput values.
// You can construct a concrete instance of `GetAuditLogSubscriptionStatementInput` via:
//
//	GetAuditLogSubscriptionStatementArgs{...}
type GetAuditLogSubscriptionStatementInput interface {
	pulumi.Input

	ToGetAuditLogSubscriptionStatementOutput() GetAuditLogSubscriptionStatementOutput
	ToGetAuditLogSubscriptionStatementOutputWithContext(context.Context) GetAuditLogSubscriptionStatementOutput
}

type GetAuditLogSubscriptionStatementArgs struct {
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect     pulumi.StringInput      `pulumi:"effect"`
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. To learn more about how to configure these read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (GetAuditLogSubscriptionStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditLogSubscriptionStatement)(nil)).Elem()
}

func (i GetAuditLogSubscriptionStatementArgs) ToGetAuditLogSubscriptionStatementOutput() GetAuditLogSubscriptionStatementOutput {
	return i.ToGetAuditLogSubscriptionStatementOutputWithContext(context.Background())
}

func (i GetAuditLogSubscriptionStatementArgs) ToGetAuditLogSubscriptionStatementOutputWithContext(ctx context.Context) GetAuditLogSubscriptionStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuditLogSubscriptionStatementOutput)
}

// GetAuditLogSubscriptionStatementArrayInput is an input type that accepts GetAuditLogSubscriptionStatementArray and GetAuditLogSubscriptionStatementArrayOutput values.
// You can construct a concrete instance of `GetAuditLogSubscriptionStatementArrayInput` via:
//
//	GetAuditLogSubscriptionStatementArray{ GetAuditLogSubscriptionStatementArgs{...} }
type GetAuditLogSubscriptionStatementArrayInput interface {
	pulumi.Input

	ToGetAuditLogSubscriptionStatementArrayOutput() GetAuditLogSubscriptionStatementArrayOutput
	ToGetAuditLogSubscriptionStatementArrayOutputWithContext(context.Context) GetAuditLogSubscriptionStatementArrayOutput
}

type GetAuditLogSubscriptionStatementArray []GetAuditLogSubscriptionStatementInput

func (GetAuditLogSubscriptionStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAuditLogSubscriptionStatement)(nil)).Elem()
}

func (i GetAuditLogSubscriptionStatementArray) ToGetAuditLogSubscriptionStatementArrayOutput() GetAuditLogSubscriptionStatementArrayOutput {
	return i.ToGetAuditLogSubscriptionStatementArrayOutputWithContext(context.Background())
}

func (i GetAuditLogSubscriptionStatementArray) ToGetAuditLogSubscriptionStatementArrayOutputWithContext(ctx context.Context) GetAuditLogSubscriptionStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuditLogSubscriptionStatementArrayOutput)
}

type GetAuditLogSubscriptionStatementOutput struct{ *pulumi.OutputState }

func (GetAuditLogSubscriptionStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuditLogSubscriptionStatement)(nil)).Elem()
}

func (o GetAuditLogSubscriptionStatementOutput) ToGetAuditLogSubscriptionStatementOutput() GetAuditLogSubscriptionStatementOutput {
	return o
}

func (o GetAuditLogSubscriptionStatementOutput) ToGetAuditLogSubscriptionStatementOutputWithContext(ctx context.Context) GetAuditLogSubscriptionStatementOutput {
	return o
}

func (o GetAuditLogSubscriptionStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditLogSubscriptionStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o GetAuditLogSubscriptionStatementOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuditLogSubscriptionStatement) string { return v.Effect }).(pulumi.StringOutput)
}

func (o GetAuditLogSubscriptionStatementOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditLogSubscriptionStatement) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement does not apply. To learn more about how to configure these, read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
func (o GetAuditLogSubscriptionStatementOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditLogSubscriptionStatement) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement applies. To learn more about how to configure these read [Using resources](https://docs.launchdarkly.com/home/members/role-resources).
func (o GetAuditLogSubscriptionStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAuditLogSubscriptionStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type GetAuditLogSubscriptionStatementArrayOutput struct{ *pulumi.OutputState }

func (GetAuditLogSubscriptionStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAuditLogSubscriptionStatement)(nil)).Elem()
}

func (o GetAuditLogSubscriptionStatementArrayOutput) ToGetAuditLogSubscriptionStatementArrayOutput() GetAuditLogSubscriptionStatementArrayOutput {
	return o
}

func (o GetAuditLogSubscriptionStatementArrayOutput) ToGetAuditLogSubscriptionStatementArrayOutputWithContext(ctx context.Context) GetAuditLogSubscriptionStatementArrayOutput {
	return o
}

func (o GetAuditLogSubscriptionStatementArrayOutput) Index(i pulumi.IntInput) GetAuditLogSubscriptionStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAuditLogSubscriptionStatement {
		return vs[0].([]GetAuditLogSubscriptionStatement)[vs[1].(int)]
	}).(GetAuditLogSubscriptionStatementOutput)
}

type GetEnvironmentApprovalSetting struct {
	CanApplyDeclinedChanges *bool    `pulumi:"canApplyDeclinedChanges"`
	CanReviewOwnRequest     *bool    `pulumi:"canReviewOwnRequest"`
	MinNumApprovals         *int     `pulumi:"minNumApprovals"`
	Required                *bool    `pulumi:"required"`
	RequiredApprovalTags    []string `pulumi:"requiredApprovalTags"`
}

// GetEnvironmentApprovalSettingInput is an input type that accepts GetEnvironmentApprovalSettingArgs and GetEnvironmentApprovalSettingOutput values.
// You can construct a concrete instance of `GetEnvironmentApprovalSettingInput` via:
//
//	GetEnvironmentApprovalSettingArgs{...}
type GetEnvironmentApprovalSettingInput interface {
	pulumi.Input

	ToGetEnvironmentApprovalSettingOutput() GetEnvironmentApprovalSettingOutput
	ToGetEnvironmentApprovalSettingOutputWithContext(context.Context) GetEnvironmentApprovalSettingOutput
}

type GetEnvironmentApprovalSettingArgs struct {
	CanApplyDeclinedChanges pulumi.BoolPtrInput     `pulumi:"canApplyDeclinedChanges"`
	CanReviewOwnRequest     pulumi.BoolPtrInput     `pulumi:"canReviewOwnRequest"`
	MinNumApprovals         pulumi.IntPtrInput      `pulumi:"minNumApprovals"`
	Required                pulumi.BoolPtrInput     `pulumi:"required"`
	RequiredApprovalTags    pulumi.StringArrayInput `pulumi:"requiredApprovalTags"`
}

func (GetEnvironmentApprovalSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentApprovalSetting)(nil)).Elem()
}

func (i GetEnvironmentApprovalSettingArgs) ToGetEnvironmentApprovalSettingOutput() GetEnvironmentApprovalSettingOutput {
	return i.ToGetEnvironmentApprovalSettingOutputWithContext(context.Background())
}

func (i GetEnvironmentApprovalSettingArgs) ToGetEnvironmentApprovalSettingOutputWithContext(ctx context.Context) GetEnvironmentApprovalSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentApprovalSettingOutput)
}

// GetEnvironmentApprovalSettingArrayInput is an input type that accepts GetEnvironmentApprovalSettingArray and GetEnvironmentApprovalSettingArrayOutput values.
// You can construct a concrete instance of `GetEnvironmentApprovalSettingArrayInput` via:
//
//	GetEnvironmentApprovalSettingArray{ GetEnvironmentApprovalSettingArgs{...} }
type GetEnvironmentApprovalSettingArrayInput interface {
	pulumi.Input

	ToGetEnvironmentApprovalSettingArrayOutput() GetEnvironmentApprovalSettingArrayOutput
	ToGetEnvironmentApprovalSettingArrayOutputWithContext(context.Context) GetEnvironmentApprovalSettingArrayOutput
}

type GetEnvironmentApprovalSettingArray []GetEnvironmentApprovalSettingInput

func (GetEnvironmentApprovalSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentApprovalSetting)(nil)).Elem()
}

func (i GetEnvironmentApprovalSettingArray) ToGetEnvironmentApprovalSettingArrayOutput() GetEnvironmentApprovalSettingArrayOutput {
	return i.ToGetEnvironmentApprovalSettingArrayOutputWithContext(context.Background())
}

func (i GetEnvironmentApprovalSettingArray) ToGetEnvironmentApprovalSettingArrayOutputWithContext(ctx context.Context) GetEnvironmentApprovalSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentApprovalSettingArrayOutput)
}

type GetEnvironmentApprovalSettingOutput struct{ *pulumi.OutputState }

func (GetEnvironmentApprovalSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentApprovalSetting)(nil)).Elem()
}

func (o GetEnvironmentApprovalSettingOutput) ToGetEnvironmentApprovalSettingOutput() GetEnvironmentApprovalSettingOutput {
	return o
}

func (o GetEnvironmentApprovalSettingOutput) ToGetEnvironmentApprovalSettingOutputWithContext(ctx context.Context) GetEnvironmentApprovalSettingOutput {
	return o
}

func (o GetEnvironmentApprovalSettingOutput) CanApplyDeclinedChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEnvironmentApprovalSetting) *bool { return v.CanApplyDeclinedChanges }).(pulumi.BoolPtrOutput)
}

func (o GetEnvironmentApprovalSettingOutput) CanReviewOwnRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEnvironmentApprovalSetting) *bool { return v.CanReviewOwnRequest }).(pulumi.BoolPtrOutput)
}

func (o GetEnvironmentApprovalSettingOutput) MinNumApprovals() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEnvironmentApprovalSetting) *int { return v.MinNumApprovals }).(pulumi.IntPtrOutput)
}

func (o GetEnvironmentApprovalSettingOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEnvironmentApprovalSetting) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o GetEnvironmentApprovalSettingOutput) RequiredApprovalTags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEnvironmentApprovalSetting) []string { return v.RequiredApprovalTags }).(pulumi.StringArrayOutput)
}

type GetEnvironmentApprovalSettingArrayOutput struct{ *pulumi.OutputState }

func (GetEnvironmentApprovalSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEnvironmentApprovalSetting)(nil)).Elem()
}

func (o GetEnvironmentApprovalSettingArrayOutput) ToGetEnvironmentApprovalSettingArrayOutput() GetEnvironmentApprovalSettingArrayOutput {
	return o
}

func (o GetEnvironmentApprovalSettingArrayOutput) ToGetEnvironmentApprovalSettingArrayOutputWithContext(ctx context.Context) GetEnvironmentApprovalSettingArrayOutput {
	return o
}

func (o GetEnvironmentApprovalSettingArrayOutput) Index(i pulumi.IntInput) GetEnvironmentApprovalSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEnvironmentApprovalSetting {
		return vs[0].([]GetEnvironmentApprovalSetting)[vs[1].(int)]
	}).(GetEnvironmentApprovalSettingOutput)
}

type GetFeatureFlagClientSideAvailability struct {
	// When set to true, this flag is available to SDKs using the client-side ID.
	UsingEnvironmentId bool `pulumi:"usingEnvironmentId"`
	// When set to true, this flag is available to SDKs using a mobile key.
	UsingMobileKey *bool `pulumi:"usingMobileKey"`
}

// GetFeatureFlagClientSideAvailabilityInput is an input type that accepts GetFeatureFlagClientSideAvailabilityArgs and GetFeatureFlagClientSideAvailabilityOutput values.
// You can construct a concrete instance of `GetFeatureFlagClientSideAvailabilityInput` via:
//
//	GetFeatureFlagClientSideAvailabilityArgs{...}
type GetFeatureFlagClientSideAvailabilityInput interface {
	pulumi.Input

	ToGetFeatureFlagClientSideAvailabilityOutput() GetFeatureFlagClientSideAvailabilityOutput
	ToGetFeatureFlagClientSideAvailabilityOutputWithContext(context.Context) GetFeatureFlagClientSideAvailabilityOutput
}

type GetFeatureFlagClientSideAvailabilityArgs struct {
	// When set to true, this flag is available to SDKs using the client-side ID.
	UsingEnvironmentId pulumi.BoolInput `pulumi:"usingEnvironmentId"`
	// When set to true, this flag is available to SDKs using a mobile key.
	UsingMobileKey pulumi.BoolPtrInput `pulumi:"usingMobileKey"`
}

func (GetFeatureFlagClientSideAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagClientSideAvailability)(nil)).Elem()
}

func (i GetFeatureFlagClientSideAvailabilityArgs) ToGetFeatureFlagClientSideAvailabilityOutput() GetFeatureFlagClientSideAvailabilityOutput {
	return i.ToGetFeatureFlagClientSideAvailabilityOutputWithContext(context.Background())
}

func (i GetFeatureFlagClientSideAvailabilityArgs) ToGetFeatureFlagClientSideAvailabilityOutputWithContext(ctx context.Context) GetFeatureFlagClientSideAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagClientSideAvailabilityOutput)
}

// GetFeatureFlagClientSideAvailabilityArrayInput is an input type that accepts GetFeatureFlagClientSideAvailabilityArray and GetFeatureFlagClientSideAvailabilityArrayOutput values.
// You can construct a concrete instance of `GetFeatureFlagClientSideAvailabilityArrayInput` via:
//
//	GetFeatureFlagClientSideAvailabilityArray{ GetFeatureFlagClientSideAvailabilityArgs{...} }
type GetFeatureFlagClientSideAvailabilityArrayInput interface {
	pulumi.Input

	ToGetFeatureFlagClientSideAvailabilityArrayOutput() GetFeatureFlagClientSideAvailabilityArrayOutput
	ToGetFeatureFlagClientSideAvailabilityArrayOutputWithContext(context.Context) GetFeatureFlagClientSideAvailabilityArrayOutput
}

type GetFeatureFlagClientSideAvailabilityArray []GetFeatureFlagClientSideAvailabilityInput

func (GetFeatureFlagClientSideAvailabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagClientSideAvailability)(nil)).Elem()
}

func (i GetFeatureFlagClientSideAvailabilityArray) ToGetFeatureFlagClientSideAvailabilityArrayOutput() GetFeatureFlagClientSideAvailabilityArrayOutput {
	return i.ToGetFeatureFlagClientSideAvailabilityArrayOutputWithContext(context.Background())
}

func (i GetFeatureFlagClientSideAvailabilityArray) ToGetFeatureFlagClientSideAvailabilityArrayOutputWithContext(ctx context.Context) GetFeatureFlagClientSideAvailabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagClientSideAvailabilityArrayOutput)
}

type GetFeatureFlagClientSideAvailabilityOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagClientSideAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagClientSideAvailability)(nil)).Elem()
}

func (o GetFeatureFlagClientSideAvailabilityOutput) ToGetFeatureFlagClientSideAvailabilityOutput() GetFeatureFlagClientSideAvailabilityOutput {
	return o
}

func (o GetFeatureFlagClientSideAvailabilityOutput) ToGetFeatureFlagClientSideAvailabilityOutputWithContext(ctx context.Context) GetFeatureFlagClientSideAvailabilityOutput {
	return o
}

// When set to true, this flag is available to SDKs using the client-side ID.
func (o GetFeatureFlagClientSideAvailabilityOutput) UsingEnvironmentId() pulumi.BoolOutput {
	return o.ApplyT(func(v GetFeatureFlagClientSideAvailability) bool { return v.UsingEnvironmentId }).(pulumi.BoolOutput)
}

// When set to true, this flag is available to SDKs using a mobile key.
func (o GetFeatureFlagClientSideAvailabilityOutput) UsingMobileKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagClientSideAvailability) *bool { return v.UsingMobileKey }).(pulumi.BoolPtrOutput)
}

type GetFeatureFlagClientSideAvailabilityArrayOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagClientSideAvailabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagClientSideAvailability)(nil)).Elem()
}

func (o GetFeatureFlagClientSideAvailabilityArrayOutput) ToGetFeatureFlagClientSideAvailabilityArrayOutput() GetFeatureFlagClientSideAvailabilityArrayOutput {
	return o
}

func (o GetFeatureFlagClientSideAvailabilityArrayOutput) ToGetFeatureFlagClientSideAvailabilityArrayOutputWithContext(ctx context.Context) GetFeatureFlagClientSideAvailabilityArrayOutput {
	return o
}

func (o GetFeatureFlagClientSideAvailabilityArrayOutput) Index(i pulumi.IntInput) GetFeatureFlagClientSideAvailabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFeatureFlagClientSideAvailability {
		return vs[0].([]GetFeatureFlagClientSideAvailability)[vs[1].(int)]
	}).(GetFeatureFlagClientSideAvailabilityOutput)
}

type GetFeatureFlagCustomProperty struct {
	// The unique feature flag key that references the flag in your application code.
	Key string `pulumi:"key"`
	// The name of the custom property.
	Name string `pulumi:"name"`
	// The list of custom property value strings.
	Values []string `pulumi:"values"`
}

// GetFeatureFlagCustomPropertyInput is an input type that accepts GetFeatureFlagCustomPropertyArgs and GetFeatureFlagCustomPropertyOutput values.
// You can construct a concrete instance of `GetFeatureFlagCustomPropertyInput` via:
//
//	GetFeatureFlagCustomPropertyArgs{...}
type GetFeatureFlagCustomPropertyInput interface {
	pulumi.Input

	ToGetFeatureFlagCustomPropertyOutput() GetFeatureFlagCustomPropertyOutput
	ToGetFeatureFlagCustomPropertyOutputWithContext(context.Context) GetFeatureFlagCustomPropertyOutput
}

type GetFeatureFlagCustomPropertyArgs struct {
	// The unique feature flag key that references the flag in your application code.
	Key pulumi.StringInput `pulumi:"key"`
	// The name of the custom property.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of custom property value strings.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetFeatureFlagCustomPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagCustomProperty)(nil)).Elem()
}

func (i GetFeatureFlagCustomPropertyArgs) ToGetFeatureFlagCustomPropertyOutput() GetFeatureFlagCustomPropertyOutput {
	return i.ToGetFeatureFlagCustomPropertyOutputWithContext(context.Background())
}

func (i GetFeatureFlagCustomPropertyArgs) ToGetFeatureFlagCustomPropertyOutputWithContext(ctx context.Context) GetFeatureFlagCustomPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagCustomPropertyOutput)
}

// GetFeatureFlagCustomPropertyArrayInput is an input type that accepts GetFeatureFlagCustomPropertyArray and GetFeatureFlagCustomPropertyArrayOutput values.
// You can construct a concrete instance of `GetFeatureFlagCustomPropertyArrayInput` via:
//
//	GetFeatureFlagCustomPropertyArray{ GetFeatureFlagCustomPropertyArgs{...} }
type GetFeatureFlagCustomPropertyArrayInput interface {
	pulumi.Input

	ToGetFeatureFlagCustomPropertyArrayOutput() GetFeatureFlagCustomPropertyArrayOutput
	ToGetFeatureFlagCustomPropertyArrayOutputWithContext(context.Context) GetFeatureFlagCustomPropertyArrayOutput
}

type GetFeatureFlagCustomPropertyArray []GetFeatureFlagCustomPropertyInput

func (GetFeatureFlagCustomPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagCustomProperty)(nil)).Elem()
}

func (i GetFeatureFlagCustomPropertyArray) ToGetFeatureFlagCustomPropertyArrayOutput() GetFeatureFlagCustomPropertyArrayOutput {
	return i.ToGetFeatureFlagCustomPropertyArrayOutputWithContext(context.Background())
}

func (i GetFeatureFlagCustomPropertyArray) ToGetFeatureFlagCustomPropertyArrayOutputWithContext(ctx context.Context) GetFeatureFlagCustomPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagCustomPropertyArrayOutput)
}

type GetFeatureFlagCustomPropertyOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagCustomPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagCustomProperty)(nil)).Elem()
}

func (o GetFeatureFlagCustomPropertyOutput) ToGetFeatureFlagCustomPropertyOutput() GetFeatureFlagCustomPropertyOutput {
	return o
}

func (o GetFeatureFlagCustomPropertyOutput) ToGetFeatureFlagCustomPropertyOutputWithContext(ctx context.Context) GetFeatureFlagCustomPropertyOutput {
	return o
}

// The unique feature flag key that references the flag in your application code.
func (o GetFeatureFlagCustomPropertyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeatureFlagCustomProperty) string { return v.Key }).(pulumi.StringOutput)
}

// The name of the custom property.
func (o GetFeatureFlagCustomPropertyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeatureFlagCustomProperty) string { return v.Name }).(pulumi.StringOutput)
}

// The list of custom property value strings.
func (o GetFeatureFlagCustomPropertyOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFeatureFlagCustomProperty) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetFeatureFlagCustomPropertyArrayOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagCustomPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagCustomProperty)(nil)).Elem()
}

func (o GetFeatureFlagCustomPropertyArrayOutput) ToGetFeatureFlagCustomPropertyArrayOutput() GetFeatureFlagCustomPropertyArrayOutput {
	return o
}

func (o GetFeatureFlagCustomPropertyArrayOutput) ToGetFeatureFlagCustomPropertyArrayOutputWithContext(ctx context.Context) GetFeatureFlagCustomPropertyArrayOutput {
	return o
}

func (o GetFeatureFlagCustomPropertyArrayOutput) Index(i pulumi.IntInput) GetFeatureFlagCustomPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFeatureFlagCustomProperty {
		return vs[0].([]GetFeatureFlagCustomProperty)[vs[1].(int)]
	}).(GetFeatureFlagCustomPropertyOutput)
}

type GetFeatureFlagDefaults struct {
	// (Required) The index of the variation the flag will default to in all new environments when off.
	OffVariation int `pulumi:"offVariation"`
	// (Required) The index of the variation the flag will default to in all new environments when on.
	OnVariation int `pulumi:"onVariation"`
}

// GetFeatureFlagDefaultsInput is an input type that accepts GetFeatureFlagDefaultsArgs and GetFeatureFlagDefaultsOutput values.
// You can construct a concrete instance of `GetFeatureFlagDefaultsInput` via:
//
//	GetFeatureFlagDefaultsArgs{...}
type GetFeatureFlagDefaultsInput interface {
	pulumi.Input

	ToGetFeatureFlagDefaultsOutput() GetFeatureFlagDefaultsOutput
	ToGetFeatureFlagDefaultsOutputWithContext(context.Context) GetFeatureFlagDefaultsOutput
}

type GetFeatureFlagDefaultsArgs struct {
	// (Required) The index of the variation the flag will default to in all new environments when off.
	OffVariation pulumi.IntInput `pulumi:"offVariation"`
	// (Required) The index of the variation the flag will default to in all new environments when on.
	OnVariation pulumi.IntInput `pulumi:"onVariation"`
}

func (GetFeatureFlagDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagDefaults)(nil)).Elem()
}

func (i GetFeatureFlagDefaultsArgs) ToGetFeatureFlagDefaultsOutput() GetFeatureFlagDefaultsOutput {
	return i.ToGetFeatureFlagDefaultsOutputWithContext(context.Background())
}

func (i GetFeatureFlagDefaultsArgs) ToGetFeatureFlagDefaultsOutputWithContext(ctx context.Context) GetFeatureFlagDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagDefaultsOutput)
}

func (i GetFeatureFlagDefaultsArgs) ToGetFeatureFlagDefaultsPtrOutput() GetFeatureFlagDefaultsPtrOutput {
	return i.ToGetFeatureFlagDefaultsPtrOutputWithContext(context.Background())
}

func (i GetFeatureFlagDefaultsArgs) ToGetFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) GetFeatureFlagDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagDefaultsOutput).ToGetFeatureFlagDefaultsPtrOutputWithContext(ctx)
}

// GetFeatureFlagDefaultsPtrInput is an input type that accepts GetFeatureFlagDefaultsArgs, GetFeatureFlagDefaultsPtr and GetFeatureFlagDefaultsPtrOutput values.
// You can construct a concrete instance of `GetFeatureFlagDefaultsPtrInput` via:
//
//	        GetFeatureFlagDefaultsArgs{...}
//
//	or:
//
//	        nil
type GetFeatureFlagDefaultsPtrInput interface {
	pulumi.Input

	ToGetFeatureFlagDefaultsPtrOutput() GetFeatureFlagDefaultsPtrOutput
	ToGetFeatureFlagDefaultsPtrOutputWithContext(context.Context) GetFeatureFlagDefaultsPtrOutput
}

type getFeatureFlagDefaultsPtrType GetFeatureFlagDefaultsArgs

func GetFeatureFlagDefaultsPtr(v *GetFeatureFlagDefaultsArgs) GetFeatureFlagDefaultsPtrInput {
	return (*getFeatureFlagDefaultsPtrType)(v)
}

func (*getFeatureFlagDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetFeatureFlagDefaults)(nil)).Elem()
}

func (i *getFeatureFlagDefaultsPtrType) ToGetFeatureFlagDefaultsPtrOutput() GetFeatureFlagDefaultsPtrOutput {
	return i.ToGetFeatureFlagDefaultsPtrOutputWithContext(context.Background())
}

func (i *getFeatureFlagDefaultsPtrType) ToGetFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) GetFeatureFlagDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagDefaultsPtrOutput)
}

type GetFeatureFlagDefaultsOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagDefaults)(nil)).Elem()
}

func (o GetFeatureFlagDefaultsOutput) ToGetFeatureFlagDefaultsOutput() GetFeatureFlagDefaultsOutput {
	return o
}

func (o GetFeatureFlagDefaultsOutput) ToGetFeatureFlagDefaultsOutputWithContext(ctx context.Context) GetFeatureFlagDefaultsOutput {
	return o
}

func (o GetFeatureFlagDefaultsOutput) ToGetFeatureFlagDefaultsPtrOutput() GetFeatureFlagDefaultsPtrOutput {
	return o.ToGetFeatureFlagDefaultsPtrOutputWithContext(context.Background())
}

func (o GetFeatureFlagDefaultsOutput) ToGetFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) GetFeatureFlagDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetFeatureFlagDefaults) *GetFeatureFlagDefaults {
		return &v
	}).(GetFeatureFlagDefaultsPtrOutput)
}

// (Required) The index of the variation the flag will default to in all new environments when off.
func (o GetFeatureFlagDefaultsOutput) OffVariation() pulumi.IntOutput {
	return o.ApplyT(func(v GetFeatureFlagDefaults) int { return v.OffVariation }).(pulumi.IntOutput)
}

// (Required) The index of the variation the flag will default to in all new environments when on.
func (o GetFeatureFlagDefaultsOutput) OnVariation() pulumi.IntOutput {
	return o.ApplyT(func(v GetFeatureFlagDefaults) int { return v.OnVariation }).(pulumi.IntOutput)
}

type GetFeatureFlagDefaultsPtrOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetFeatureFlagDefaults)(nil)).Elem()
}

func (o GetFeatureFlagDefaultsPtrOutput) ToGetFeatureFlagDefaultsPtrOutput() GetFeatureFlagDefaultsPtrOutput {
	return o
}

func (o GetFeatureFlagDefaultsPtrOutput) ToGetFeatureFlagDefaultsPtrOutputWithContext(ctx context.Context) GetFeatureFlagDefaultsPtrOutput {
	return o
}

func (o GetFeatureFlagDefaultsPtrOutput) Elem() GetFeatureFlagDefaultsOutput {
	return o.ApplyT(func(v *GetFeatureFlagDefaults) GetFeatureFlagDefaults {
		if v != nil {
			return *v
		}
		var ret GetFeatureFlagDefaults
		return ret
	}).(GetFeatureFlagDefaultsOutput)
}

// (Required) The index of the variation the flag will default to in all new environments when off.
func (o GetFeatureFlagDefaultsPtrOutput) OffVariation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetFeatureFlagDefaults) *int {
		if v == nil {
			return nil
		}
		return &v.OffVariation
	}).(pulumi.IntPtrOutput)
}

// (Required) The index of the variation the flag will default to in all new environments when on.
func (o GetFeatureFlagDefaultsPtrOutput) OnVariation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetFeatureFlagDefaults) *int {
		if v == nil {
			return nil
		}
		return &v.OnVariation
	}).(pulumi.IntPtrOutput)
}

type GetFeatureFlagEnvironmentFallthrough struct {
	// Group percentage rollout by a custom attribute.
	BucketBy *string `pulumi:"bucketBy"`
	// List of integer percentage rollout weights applied to each variation when the rule clauses evaluates to `true`.
	RolloutWeights []int `pulumi:"rolloutWeights"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation *int `pulumi:"variation"`
}

// GetFeatureFlagEnvironmentFallthroughInput is an input type that accepts GetFeatureFlagEnvironmentFallthroughArgs and GetFeatureFlagEnvironmentFallthroughOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentFallthroughInput` via:
//
//	GetFeatureFlagEnvironmentFallthroughArgs{...}
type GetFeatureFlagEnvironmentFallthroughInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentFallthroughOutput() GetFeatureFlagEnvironmentFallthroughOutput
	ToGetFeatureFlagEnvironmentFallthroughOutputWithContext(context.Context) GetFeatureFlagEnvironmentFallthroughOutput
}

type GetFeatureFlagEnvironmentFallthroughArgs struct {
	// Group percentage rollout by a custom attribute.
	BucketBy pulumi.StringPtrInput `pulumi:"bucketBy"`
	// List of integer percentage rollout weights applied to each variation when the rule clauses evaluates to `true`.
	RolloutWeights pulumi.IntArrayInput `pulumi:"rolloutWeights"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation pulumi.IntPtrInput `pulumi:"variation"`
}

func (GetFeatureFlagEnvironmentFallthroughArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentFallthroughArgs) ToGetFeatureFlagEnvironmentFallthroughOutput() GetFeatureFlagEnvironmentFallthroughOutput {
	return i.ToGetFeatureFlagEnvironmentFallthroughOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentFallthroughArgs) ToGetFeatureFlagEnvironmentFallthroughOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentFallthroughOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentFallthroughOutput)
}

func (i GetFeatureFlagEnvironmentFallthroughArgs) ToGetFeatureFlagEnvironmentFallthroughPtrOutput() GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return i.ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentFallthroughArgs) ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentFallthroughOutput).ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx)
}

// GetFeatureFlagEnvironmentFallthroughPtrInput is an input type that accepts GetFeatureFlagEnvironmentFallthroughArgs, GetFeatureFlagEnvironmentFallthroughPtr and GetFeatureFlagEnvironmentFallthroughPtrOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentFallthroughPtrInput` via:
//
//	        GetFeatureFlagEnvironmentFallthroughArgs{...}
//
//	or:
//
//	        nil
type GetFeatureFlagEnvironmentFallthroughPtrInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentFallthroughPtrOutput() GetFeatureFlagEnvironmentFallthroughPtrOutput
	ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Context) GetFeatureFlagEnvironmentFallthroughPtrOutput
}

type getFeatureFlagEnvironmentFallthroughPtrType GetFeatureFlagEnvironmentFallthroughArgs

func GetFeatureFlagEnvironmentFallthroughPtr(v *GetFeatureFlagEnvironmentFallthroughArgs) GetFeatureFlagEnvironmentFallthroughPtrInput {
	return (*getFeatureFlagEnvironmentFallthroughPtrType)(v)
}

func (*getFeatureFlagEnvironmentFallthroughPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetFeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (i *getFeatureFlagEnvironmentFallthroughPtrType) ToGetFeatureFlagEnvironmentFallthroughPtrOutput() GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return i.ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Background())
}

func (i *getFeatureFlagEnvironmentFallthroughPtrType) ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentFallthroughPtrOutput)
}

type GetFeatureFlagEnvironmentFallthroughOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentFallthroughOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentFallthroughOutput) ToGetFeatureFlagEnvironmentFallthroughOutput() GetFeatureFlagEnvironmentFallthroughOutput {
	return o
}

func (o GetFeatureFlagEnvironmentFallthroughOutput) ToGetFeatureFlagEnvironmentFallthroughOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentFallthroughOutput {
	return o
}

func (o GetFeatureFlagEnvironmentFallthroughOutput) ToGetFeatureFlagEnvironmentFallthroughPtrOutput() GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return o.ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(context.Background())
}

func (o GetFeatureFlagEnvironmentFallthroughOutput) ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetFeatureFlagEnvironmentFallthrough) *GetFeatureFlagEnvironmentFallthrough {
		return &v
	}).(GetFeatureFlagEnvironmentFallthroughPtrOutput)
}

// Group percentage rollout by a custom attribute.
func (o GetFeatureFlagEnvironmentFallthroughOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentFallthrough) *string { return v.BucketBy }).(pulumi.StringPtrOutput)
}

// List of integer percentage rollout weights applied to each variation when the rule clauses evaluates to `true`.
func (o GetFeatureFlagEnvironmentFallthroughOutput) RolloutWeights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentFallthrough) []int { return v.RolloutWeights }).(pulumi.IntArrayOutput)
}

// The integer variation index served when the rule clauses evaluate to `true`.
func (o GetFeatureFlagEnvironmentFallthroughOutput) Variation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentFallthrough) *int { return v.Variation }).(pulumi.IntPtrOutput)
}

type GetFeatureFlagEnvironmentFallthroughPtrOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentFallthroughPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetFeatureFlagEnvironmentFallthrough)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentFallthroughPtrOutput) ToGetFeatureFlagEnvironmentFallthroughPtrOutput() GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return o
}

func (o GetFeatureFlagEnvironmentFallthroughPtrOutput) ToGetFeatureFlagEnvironmentFallthroughPtrOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentFallthroughPtrOutput {
	return o
}

func (o GetFeatureFlagEnvironmentFallthroughPtrOutput) Elem() GetFeatureFlagEnvironmentFallthroughOutput {
	return o.ApplyT(func(v *GetFeatureFlagEnvironmentFallthrough) GetFeatureFlagEnvironmentFallthrough {
		if v != nil {
			return *v
		}
		var ret GetFeatureFlagEnvironmentFallthrough
		return ret
	}).(GetFeatureFlagEnvironmentFallthroughOutput)
}

// Group percentage rollout by a custom attribute.
func (o GetFeatureFlagEnvironmentFallthroughPtrOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetFeatureFlagEnvironmentFallthrough) *string {
		if v == nil {
			return nil
		}
		return v.BucketBy
	}).(pulumi.StringPtrOutput)
}

// List of integer percentage rollout weights applied to each variation when the rule clauses evaluates to `true`.
func (o GetFeatureFlagEnvironmentFallthroughPtrOutput) RolloutWeights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *GetFeatureFlagEnvironmentFallthrough) []int {
		if v == nil {
			return nil
		}
		return v.RolloutWeights
	}).(pulumi.IntArrayOutput)
}

// The integer variation index served when the rule clauses evaluate to `true`.
func (o GetFeatureFlagEnvironmentFallthroughPtrOutput) Variation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetFeatureFlagEnvironmentFallthrough) *int {
		if v == nil {
			return nil
		}
		return v.Variation
	}).(pulumi.IntPtrOutput)
}

type GetFeatureFlagEnvironmentPrerequisite struct {
	// The prerequisite feature flag's `key`.
	FlagKey string `pulumi:"flagKey"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation int `pulumi:"variation"`
}

// GetFeatureFlagEnvironmentPrerequisiteInput is an input type that accepts GetFeatureFlagEnvironmentPrerequisiteArgs and GetFeatureFlagEnvironmentPrerequisiteOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentPrerequisiteInput` via:
//
//	GetFeatureFlagEnvironmentPrerequisiteArgs{...}
type GetFeatureFlagEnvironmentPrerequisiteInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentPrerequisiteOutput() GetFeatureFlagEnvironmentPrerequisiteOutput
	ToGetFeatureFlagEnvironmentPrerequisiteOutputWithContext(context.Context) GetFeatureFlagEnvironmentPrerequisiteOutput
}

type GetFeatureFlagEnvironmentPrerequisiteArgs struct {
	// The prerequisite feature flag's `key`.
	FlagKey pulumi.StringInput `pulumi:"flagKey"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation pulumi.IntInput `pulumi:"variation"`
}

func (GetFeatureFlagEnvironmentPrerequisiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentPrerequisiteArgs) ToGetFeatureFlagEnvironmentPrerequisiteOutput() GetFeatureFlagEnvironmentPrerequisiteOutput {
	return i.ToGetFeatureFlagEnvironmentPrerequisiteOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentPrerequisiteArgs) ToGetFeatureFlagEnvironmentPrerequisiteOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentPrerequisiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentPrerequisiteOutput)
}

// GetFeatureFlagEnvironmentPrerequisiteArrayInput is an input type that accepts GetFeatureFlagEnvironmentPrerequisiteArray and GetFeatureFlagEnvironmentPrerequisiteArrayOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentPrerequisiteArrayInput` via:
//
//	GetFeatureFlagEnvironmentPrerequisiteArray{ GetFeatureFlagEnvironmentPrerequisiteArgs{...} }
type GetFeatureFlagEnvironmentPrerequisiteArrayInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentPrerequisiteArrayOutput() GetFeatureFlagEnvironmentPrerequisiteArrayOutput
	ToGetFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(context.Context) GetFeatureFlagEnvironmentPrerequisiteArrayOutput
}

type GetFeatureFlagEnvironmentPrerequisiteArray []GetFeatureFlagEnvironmentPrerequisiteInput

func (GetFeatureFlagEnvironmentPrerequisiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentPrerequisiteArray) ToGetFeatureFlagEnvironmentPrerequisiteArrayOutput() GetFeatureFlagEnvironmentPrerequisiteArrayOutput {
	return i.ToGetFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentPrerequisiteArray) ToGetFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentPrerequisiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentPrerequisiteArrayOutput)
}

type GetFeatureFlagEnvironmentPrerequisiteOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentPrerequisiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentPrerequisiteOutput) ToGetFeatureFlagEnvironmentPrerequisiteOutput() GetFeatureFlagEnvironmentPrerequisiteOutput {
	return o
}

func (o GetFeatureFlagEnvironmentPrerequisiteOutput) ToGetFeatureFlagEnvironmentPrerequisiteOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentPrerequisiteOutput {
	return o
}

// The prerequisite feature flag's `key`.
func (o GetFeatureFlagEnvironmentPrerequisiteOutput) FlagKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentPrerequisite) string { return v.FlagKey }).(pulumi.StringOutput)
}

// The integer variation index served when the rule clauses evaluate to `true`.
func (o GetFeatureFlagEnvironmentPrerequisiteOutput) Variation() pulumi.IntOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentPrerequisite) int { return v.Variation }).(pulumi.IntOutput)
}

type GetFeatureFlagEnvironmentPrerequisiteArrayOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentPrerequisiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentPrerequisite)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentPrerequisiteArrayOutput) ToGetFeatureFlagEnvironmentPrerequisiteArrayOutput() GetFeatureFlagEnvironmentPrerequisiteArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentPrerequisiteArrayOutput) ToGetFeatureFlagEnvironmentPrerequisiteArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentPrerequisiteArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentPrerequisiteArrayOutput) Index(i pulumi.IntInput) GetFeatureFlagEnvironmentPrerequisiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFeatureFlagEnvironmentPrerequisite {
		return vs[0].([]GetFeatureFlagEnvironmentPrerequisite)[vs[1].(int)]
	}).(GetFeatureFlagEnvironmentPrerequisiteOutput)
}

type GetFeatureFlagEnvironmentRule struct {
	// Group percentage rollout by a custom attribute.
	BucketBy *string `pulumi:"bucketBy"`
	// List of nested blocks specifying the logical clauses evaluated. To learn more, read Nested Clauses Blocks.
	Clauses []GetFeatureFlagEnvironmentRuleClause `pulumi:"clauses"`
	// List of integer percentage rollout weights applied to each variation when the rule clauses evaluates to `true`.
	RolloutWeights []int `pulumi:"rolloutWeights"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation *int `pulumi:"variation"`
}

// GetFeatureFlagEnvironmentRuleInput is an input type that accepts GetFeatureFlagEnvironmentRuleArgs and GetFeatureFlagEnvironmentRuleOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentRuleInput` via:
//
//	GetFeatureFlagEnvironmentRuleArgs{...}
type GetFeatureFlagEnvironmentRuleInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentRuleOutput() GetFeatureFlagEnvironmentRuleOutput
	ToGetFeatureFlagEnvironmentRuleOutputWithContext(context.Context) GetFeatureFlagEnvironmentRuleOutput
}

type GetFeatureFlagEnvironmentRuleArgs struct {
	// Group percentage rollout by a custom attribute.
	BucketBy pulumi.StringPtrInput `pulumi:"bucketBy"`
	// List of nested blocks specifying the logical clauses evaluated. To learn more, read Nested Clauses Blocks.
	Clauses GetFeatureFlagEnvironmentRuleClauseArrayInput `pulumi:"clauses"`
	// List of integer percentage rollout weights applied to each variation when the rule clauses evaluates to `true`.
	RolloutWeights pulumi.IntArrayInput `pulumi:"rolloutWeights"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation pulumi.IntPtrInput `pulumi:"variation"`
}

func (GetFeatureFlagEnvironmentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentRule)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentRuleArgs) ToGetFeatureFlagEnvironmentRuleOutput() GetFeatureFlagEnvironmentRuleOutput {
	return i.ToGetFeatureFlagEnvironmentRuleOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentRuleArgs) ToGetFeatureFlagEnvironmentRuleOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentRuleOutput)
}

// GetFeatureFlagEnvironmentRuleArrayInput is an input type that accepts GetFeatureFlagEnvironmentRuleArray and GetFeatureFlagEnvironmentRuleArrayOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentRuleArrayInput` via:
//
//	GetFeatureFlagEnvironmentRuleArray{ GetFeatureFlagEnvironmentRuleArgs{...} }
type GetFeatureFlagEnvironmentRuleArrayInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentRuleArrayOutput() GetFeatureFlagEnvironmentRuleArrayOutput
	ToGetFeatureFlagEnvironmentRuleArrayOutputWithContext(context.Context) GetFeatureFlagEnvironmentRuleArrayOutput
}

type GetFeatureFlagEnvironmentRuleArray []GetFeatureFlagEnvironmentRuleInput

func (GetFeatureFlagEnvironmentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentRule)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentRuleArray) ToGetFeatureFlagEnvironmentRuleArrayOutput() GetFeatureFlagEnvironmentRuleArrayOutput {
	return i.ToGetFeatureFlagEnvironmentRuleArrayOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentRuleArray) ToGetFeatureFlagEnvironmentRuleArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentRuleArrayOutput)
}

type GetFeatureFlagEnvironmentRuleOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentRule)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentRuleOutput) ToGetFeatureFlagEnvironmentRuleOutput() GetFeatureFlagEnvironmentRuleOutput {
	return o
}

func (o GetFeatureFlagEnvironmentRuleOutput) ToGetFeatureFlagEnvironmentRuleOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleOutput {
	return o
}

// Group percentage rollout by a custom attribute.
func (o GetFeatureFlagEnvironmentRuleOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRule) *string { return v.BucketBy }).(pulumi.StringPtrOutput)
}

// List of nested blocks specifying the logical clauses evaluated. To learn more, read Nested Clauses Blocks.
func (o GetFeatureFlagEnvironmentRuleOutput) Clauses() GetFeatureFlagEnvironmentRuleClauseArrayOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRule) []GetFeatureFlagEnvironmentRuleClause { return v.Clauses }).(GetFeatureFlagEnvironmentRuleClauseArrayOutput)
}

// List of integer percentage rollout weights applied to each variation when the rule clauses evaluates to `true`.
func (o GetFeatureFlagEnvironmentRuleOutput) RolloutWeights() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRule) []int { return v.RolloutWeights }).(pulumi.IntArrayOutput)
}

// The integer variation index served when the rule clauses evaluate to `true`.
func (o GetFeatureFlagEnvironmentRuleOutput) Variation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRule) *int { return v.Variation }).(pulumi.IntPtrOutput)
}

type GetFeatureFlagEnvironmentRuleArrayOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentRule)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentRuleArrayOutput) ToGetFeatureFlagEnvironmentRuleArrayOutput() GetFeatureFlagEnvironmentRuleArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentRuleArrayOutput) ToGetFeatureFlagEnvironmentRuleArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentRuleArrayOutput) Index(i pulumi.IntInput) GetFeatureFlagEnvironmentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFeatureFlagEnvironmentRule {
		return vs[0].([]GetFeatureFlagEnvironmentRule)[vs[1].(int)]
	}).(GetFeatureFlagEnvironmentRuleOutput)
}

type GetFeatureFlagEnvironmentRuleClause struct {
	// The user attribute operated on.
	Attribute string `pulumi:"attribute"`
	// Whether the rule clause is negated.
	Negate *bool `pulumi:"negate"`
	// The operator associated with the rule clause. This will be one of `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op string `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`.
	ValueType *string `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values []string `pulumi:"values"`
}

// GetFeatureFlagEnvironmentRuleClauseInput is an input type that accepts GetFeatureFlagEnvironmentRuleClauseArgs and GetFeatureFlagEnvironmentRuleClauseOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentRuleClauseInput` via:
//
//	GetFeatureFlagEnvironmentRuleClauseArgs{...}
type GetFeatureFlagEnvironmentRuleClauseInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentRuleClauseOutput() GetFeatureFlagEnvironmentRuleClauseOutput
	ToGetFeatureFlagEnvironmentRuleClauseOutputWithContext(context.Context) GetFeatureFlagEnvironmentRuleClauseOutput
}

type GetFeatureFlagEnvironmentRuleClauseArgs struct {
	// The user attribute operated on.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Whether the rule clause is negated.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// The operator associated with the rule clause. This will be one of `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op pulumi.StringInput `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetFeatureFlagEnvironmentRuleClauseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentRuleClauseArgs) ToGetFeatureFlagEnvironmentRuleClauseOutput() GetFeatureFlagEnvironmentRuleClauseOutput {
	return i.ToGetFeatureFlagEnvironmentRuleClauseOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentRuleClauseArgs) ToGetFeatureFlagEnvironmentRuleClauseOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleClauseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentRuleClauseOutput)
}

// GetFeatureFlagEnvironmentRuleClauseArrayInput is an input type that accepts GetFeatureFlagEnvironmentRuleClauseArray and GetFeatureFlagEnvironmentRuleClauseArrayOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentRuleClauseArrayInput` via:
//
//	GetFeatureFlagEnvironmentRuleClauseArray{ GetFeatureFlagEnvironmentRuleClauseArgs{...} }
type GetFeatureFlagEnvironmentRuleClauseArrayInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentRuleClauseArrayOutput() GetFeatureFlagEnvironmentRuleClauseArrayOutput
	ToGetFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(context.Context) GetFeatureFlagEnvironmentRuleClauseArrayOutput
}

type GetFeatureFlagEnvironmentRuleClauseArray []GetFeatureFlagEnvironmentRuleClauseInput

func (GetFeatureFlagEnvironmentRuleClauseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentRuleClauseArray) ToGetFeatureFlagEnvironmentRuleClauseArrayOutput() GetFeatureFlagEnvironmentRuleClauseArrayOutput {
	return i.ToGetFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentRuleClauseArray) ToGetFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleClauseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentRuleClauseArrayOutput)
}

type GetFeatureFlagEnvironmentRuleClauseOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentRuleClauseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentRuleClauseOutput) ToGetFeatureFlagEnvironmentRuleClauseOutput() GetFeatureFlagEnvironmentRuleClauseOutput {
	return o
}

func (o GetFeatureFlagEnvironmentRuleClauseOutput) ToGetFeatureFlagEnvironmentRuleClauseOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleClauseOutput {
	return o
}

// The user attribute operated on.
func (o GetFeatureFlagEnvironmentRuleClauseOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRuleClause) string { return v.Attribute }).(pulumi.StringOutput)
}

// Whether the rule clause is negated.
func (o GetFeatureFlagEnvironmentRuleClauseOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRuleClause) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// The operator associated with the rule clause. This will be one of `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
func (o GetFeatureFlagEnvironmentRuleClauseOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRuleClause) string { return v.Op }).(pulumi.StringOutput)
}

// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`.
func (o GetFeatureFlagEnvironmentRuleClauseOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRuleClause) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

// The list of values associated with the rule clause.
func (o GetFeatureFlagEnvironmentRuleClauseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentRuleClause) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetFeatureFlagEnvironmentRuleClauseArrayOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentRuleClauseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentRuleClause)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentRuleClauseArrayOutput) ToGetFeatureFlagEnvironmentRuleClauseArrayOutput() GetFeatureFlagEnvironmentRuleClauseArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentRuleClauseArrayOutput) ToGetFeatureFlagEnvironmentRuleClauseArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentRuleClauseArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentRuleClauseArrayOutput) Index(i pulumi.IntInput) GetFeatureFlagEnvironmentRuleClauseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFeatureFlagEnvironmentRuleClause {
		return vs[0].([]GetFeatureFlagEnvironmentRuleClause)[vs[1].(int)]
	}).(GetFeatureFlagEnvironmentRuleClauseOutput)
}

type GetFeatureFlagEnvironmentTarget struct {
	// The list of values associated with the rule clause.
	Values []string `pulumi:"values"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation int `pulumi:"variation"`
}

// GetFeatureFlagEnvironmentTargetInput is an input type that accepts GetFeatureFlagEnvironmentTargetArgs and GetFeatureFlagEnvironmentTargetOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentTargetInput` via:
//
//	GetFeatureFlagEnvironmentTargetArgs{...}
type GetFeatureFlagEnvironmentTargetInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentTargetOutput() GetFeatureFlagEnvironmentTargetOutput
	ToGetFeatureFlagEnvironmentTargetOutputWithContext(context.Context) GetFeatureFlagEnvironmentTargetOutput
}

type GetFeatureFlagEnvironmentTargetArgs struct {
	// The list of values associated with the rule clause.
	Values pulumi.StringArrayInput `pulumi:"values"`
	// The integer variation index served when the rule clauses evaluate to `true`.
	Variation pulumi.IntInput `pulumi:"variation"`
}

func (GetFeatureFlagEnvironmentTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentTargetArgs) ToGetFeatureFlagEnvironmentTargetOutput() GetFeatureFlagEnvironmentTargetOutput {
	return i.ToGetFeatureFlagEnvironmentTargetOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentTargetArgs) ToGetFeatureFlagEnvironmentTargetOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentTargetOutput)
}

// GetFeatureFlagEnvironmentTargetArrayInput is an input type that accepts GetFeatureFlagEnvironmentTargetArray and GetFeatureFlagEnvironmentTargetArrayOutput values.
// You can construct a concrete instance of `GetFeatureFlagEnvironmentTargetArrayInput` via:
//
//	GetFeatureFlagEnvironmentTargetArray{ GetFeatureFlagEnvironmentTargetArgs{...} }
type GetFeatureFlagEnvironmentTargetArrayInput interface {
	pulumi.Input

	ToGetFeatureFlagEnvironmentTargetArrayOutput() GetFeatureFlagEnvironmentTargetArrayOutput
	ToGetFeatureFlagEnvironmentTargetArrayOutputWithContext(context.Context) GetFeatureFlagEnvironmentTargetArrayOutput
}

type GetFeatureFlagEnvironmentTargetArray []GetFeatureFlagEnvironmentTargetInput

func (GetFeatureFlagEnvironmentTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (i GetFeatureFlagEnvironmentTargetArray) ToGetFeatureFlagEnvironmentTargetArrayOutput() GetFeatureFlagEnvironmentTargetArrayOutput {
	return i.ToGetFeatureFlagEnvironmentTargetArrayOutputWithContext(context.Background())
}

func (i GetFeatureFlagEnvironmentTargetArray) ToGetFeatureFlagEnvironmentTargetArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagEnvironmentTargetArrayOutput)
}

type GetFeatureFlagEnvironmentTargetOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentTargetOutput) ToGetFeatureFlagEnvironmentTargetOutput() GetFeatureFlagEnvironmentTargetOutput {
	return o
}

func (o GetFeatureFlagEnvironmentTargetOutput) ToGetFeatureFlagEnvironmentTargetOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentTargetOutput {
	return o
}

// The list of values associated with the rule clause.
func (o GetFeatureFlagEnvironmentTargetOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentTarget) []string { return v.Values }).(pulumi.StringArrayOutput)
}

// The integer variation index served when the rule clauses evaluate to `true`.
func (o GetFeatureFlagEnvironmentTargetOutput) Variation() pulumi.IntOutput {
	return o.ApplyT(func(v GetFeatureFlagEnvironmentTarget) int { return v.Variation }).(pulumi.IntOutput)
}

type GetFeatureFlagEnvironmentTargetArrayOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagEnvironmentTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagEnvironmentTarget)(nil)).Elem()
}

func (o GetFeatureFlagEnvironmentTargetArrayOutput) ToGetFeatureFlagEnvironmentTargetArrayOutput() GetFeatureFlagEnvironmentTargetArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentTargetArrayOutput) ToGetFeatureFlagEnvironmentTargetArrayOutputWithContext(ctx context.Context) GetFeatureFlagEnvironmentTargetArrayOutput {
	return o
}

func (o GetFeatureFlagEnvironmentTargetArrayOutput) Index(i pulumi.IntInput) GetFeatureFlagEnvironmentTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFeatureFlagEnvironmentTarget {
		return vs[0].([]GetFeatureFlagEnvironmentTarget)[vs[1].(int)]
	}).(GetFeatureFlagEnvironmentTargetOutput)
}

type GetFeatureFlagVariation struct {
	// The variation's description.
	Description *string `pulumi:"description"`
	// The name of the custom property.
	Name *string `pulumi:"name"`
	// The list of custom property value strings.
	Value string `pulumi:"value"`
}

// GetFeatureFlagVariationInput is an input type that accepts GetFeatureFlagVariationArgs and GetFeatureFlagVariationOutput values.
// You can construct a concrete instance of `GetFeatureFlagVariationInput` via:
//
//	GetFeatureFlagVariationArgs{...}
type GetFeatureFlagVariationInput interface {
	pulumi.Input

	ToGetFeatureFlagVariationOutput() GetFeatureFlagVariationOutput
	ToGetFeatureFlagVariationOutputWithContext(context.Context) GetFeatureFlagVariationOutput
}

type GetFeatureFlagVariationArgs struct {
	// The variation's description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the custom property.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The list of custom property value strings.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetFeatureFlagVariationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagVariation)(nil)).Elem()
}

func (i GetFeatureFlagVariationArgs) ToGetFeatureFlagVariationOutput() GetFeatureFlagVariationOutput {
	return i.ToGetFeatureFlagVariationOutputWithContext(context.Background())
}

func (i GetFeatureFlagVariationArgs) ToGetFeatureFlagVariationOutputWithContext(ctx context.Context) GetFeatureFlagVariationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagVariationOutput)
}

// GetFeatureFlagVariationArrayInput is an input type that accepts GetFeatureFlagVariationArray and GetFeatureFlagVariationArrayOutput values.
// You can construct a concrete instance of `GetFeatureFlagVariationArrayInput` via:
//
//	GetFeatureFlagVariationArray{ GetFeatureFlagVariationArgs{...} }
type GetFeatureFlagVariationArrayInput interface {
	pulumi.Input

	ToGetFeatureFlagVariationArrayOutput() GetFeatureFlagVariationArrayOutput
	ToGetFeatureFlagVariationArrayOutputWithContext(context.Context) GetFeatureFlagVariationArrayOutput
}

type GetFeatureFlagVariationArray []GetFeatureFlagVariationInput

func (GetFeatureFlagVariationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagVariation)(nil)).Elem()
}

func (i GetFeatureFlagVariationArray) ToGetFeatureFlagVariationArrayOutput() GetFeatureFlagVariationArrayOutput {
	return i.ToGetFeatureFlagVariationArrayOutputWithContext(context.Background())
}

func (i GetFeatureFlagVariationArray) ToGetFeatureFlagVariationArrayOutputWithContext(ctx context.Context) GetFeatureFlagVariationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFeatureFlagVariationArrayOutput)
}

type GetFeatureFlagVariationOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagVariationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFeatureFlagVariation)(nil)).Elem()
}

func (o GetFeatureFlagVariationOutput) ToGetFeatureFlagVariationOutput() GetFeatureFlagVariationOutput {
	return o
}

func (o GetFeatureFlagVariationOutput) ToGetFeatureFlagVariationOutputWithContext(ctx context.Context) GetFeatureFlagVariationOutput {
	return o
}

// The variation's description.
func (o GetFeatureFlagVariationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagVariation) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the custom property.
func (o GetFeatureFlagVariationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFeatureFlagVariation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of custom property value strings.
func (o GetFeatureFlagVariationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetFeatureFlagVariation) string { return v.Value }).(pulumi.StringOutput)
}

type GetFeatureFlagVariationArrayOutput struct{ *pulumi.OutputState }

func (GetFeatureFlagVariationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFeatureFlagVariation)(nil)).Elem()
}

func (o GetFeatureFlagVariationArrayOutput) ToGetFeatureFlagVariationArrayOutput() GetFeatureFlagVariationArrayOutput {
	return o
}

func (o GetFeatureFlagVariationArrayOutput) ToGetFeatureFlagVariationArrayOutputWithContext(ctx context.Context) GetFeatureFlagVariationArrayOutput {
	return o
}

func (o GetFeatureFlagVariationArrayOutput) Index(i pulumi.IntInput) GetFeatureFlagVariationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFeatureFlagVariation {
		return vs[0].([]GetFeatureFlagVariation)[vs[1].(int)]
	}).(GetFeatureFlagVariationOutput)
}

type GetFlagTriggerInstructions struct {
	Kind string `pulumi:"kind"`
}

// GetFlagTriggerInstructionsInput is an input type that accepts GetFlagTriggerInstructionsArgs and GetFlagTriggerInstructionsOutput values.
// You can construct a concrete instance of `GetFlagTriggerInstructionsInput` via:
//
//	GetFlagTriggerInstructionsArgs{...}
type GetFlagTriggerInstructionsInput interface {
	pulumi.Input

	ToGetFlagTriggerInstructionsOutput() GetFlagTriggerInstructionsOutput
	ToGetFlagTriggerInstructionsOutputWithContext(context.Context) GetFlagTriggerInstructionsOutput
}

type GetFlagTriggerInstructionsArgs struct {
	Kind pulumi.StringInput `pulumi:"kind"`
}

func (GetFlagTriggerInstructionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlagTriggerInstructions)(nil)).Elem()
}

func (i GetFlagTriggerInstructionsArgs) ToGetFlagTriggerInstructionsOutput() GetFlagTriggerInstructionsOutput {
	return i.ToGetFlagTriggerInstructionsOutputWithContext(context.Background())
}

func (i GetFlagTriggerInstructionsArgs) ToGetFlagTriggerInstructionsOutputWithContext(ctx context.Context) GetFlagTriggerInstructionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlagTriggerInstructionsOutput)
}

func (i GetFlagTriggerInstructionsArgs) ToGetFlagTriggerInstructionsPtrOutput() GetFlagTriggerInstructionsPtrOutput {
	return i.ToGetFlagTriggerInstructionsPtrOutputWithContext(context.Background())
}

func (i GetFlagTriggerInstructionsArgs) ToGetFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) GetFlagTriggerInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlagTriggerInstructionsOutput).ToGetFlagTriggerInstructionsPtrOutputWithContext(ctx)
}

// GetFlagTriggerInstructionsPtrInput is an input type that accepts GetFlagTriggerInstructionsArgs, GetFlagTriggerInstructionsPtr and GetFlagTriggerInstructionsPtrOutput values.
// You can construct a concrete instance of `GetFlagTriggerInstructionsPtrInput` via:
//
//	        GetFlagTriggerInstructionsArgs{...}
//
//	or:
//
//	        nil
type GetFlagTriggerInstructionsPtrInput interface {
	pulumi.Input

	ToGetFlagTriggerInstructionsPtrOutput() GetFlagTriggerInstructionsPtrOutput
	ToGetFlagTriggerInstructionsPtrOutputWithContext(context.Context) GetFlagTriggerInstructionsPtrOutput
}

type getFlagTriggerInstructionsPtrType GetFlagTriggerInstructionsArgs

func GetFlagTriggerInstructionsPtr(v *GetFlagTriggerInstructionsArgs) GetFlagTriggerInstructionsPtrInput {
	return (*getFlagTriggerInstructionsPtrType)(v)
}

func (*getFlagTriggerInstructionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetFlagTriggerInstructions)(nil)).Elem()
}

func (i *getFlagTriggerInstructionsPtrType) ToGetFlagTriggerInstructionsPtrOutput() GetFlagTriggerInstructionsPtrOutput {
	return i.ToGetFlagTriggerInstructionsPtrOutputWithContext(context.Background())
}

func (i *getFlagTriggerInstructionsPtrType) ToGetFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) GetFlagTriggerInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlagTriggerInstructionsPtrOutput)
}

type GetFlagTriggerInstructionsOutput struct{ *pulumi.OutputState }

func (GetFlagTriggerInstructionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlagTriggerInstructions)(nil)).Elem()
}

func (o GetFlagTriggerInstructionsOutput) ToGetFlagTriggerInstructionsOutput() GetFlagTriggerInstructionsOutput {
	return o
}

func (o GetFlagTriggerInstructionsOutput) ToGetFlagTriggerInstructionsOutputWithContext(ctx context.Context) GetFlagTriggerInstructionsOutput {
	return o
}

func (o GetFlagTriggerInstructionsOutput) ToGetFlagTriggerInstructionsPtrOutput() GetFlagTriggerInstructionsPtrOutput {
	return o.ToGetFlagTriggerInstructionsPtrOutputWithContext(context.Background())
}

func (o GetFlagTriggerInstructionsOutput) ToGetFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) GetFlagTriggerInstructionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetFlagTriggerInstructions) *GetFlagTriggerInstructions {
		return &v
	}).(GetFlagTriggerInstructionsPtrOutput)
}

func (o GetFlagTriggerInstructionsOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlagTriggerInstructions) string { return v.Kind }).(pulumi.StringOutput)
}

type GetFlagTriggerInstructionsPtrOutput struct{ *pulumi.OutputState }

func (GetFlagTriggerInstructionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetFlagTriggerInstructions)(nil)).Elem()
}

func (o GetFlagTriggerInstructionsPtrOutput) ToGetFlagTriggerInstructionsPtrOutput() GetFlagTriggerInstructionsPtrOutput {
	return o
}

func (o GetFlagTriggerInstructionsPtrOutput) ToGetFlagTriggerInstructionsPtrOutputWithContext(ctx context.Context) GetFlagTriggerInstructionsPtrOutput {
	return o
}

func (o GetFlagTriggerInstructionsPtrOutput) Elem() GetFlagTriggerInstructionsOutput {
	return o.ApplyT(func(v *GetFlagTriggerInstructions) GetFlagTriggerInstructions {
		if v != nil {
			return *v
		}
		var ret GetFlagTriggerInstructions
		return ret
	}).(GetFlagTriggerInstructionsOutput)
}

func (o GetFlagTriggerInstructionsPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetFlagTriggerInstructions) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

type GetMetricUrl struct {
	// The metric type. Available choices are `click`, `custom`, and `pageview`.
	Kind      string  `pulumi:"kind"`
	Pattern   *string `pulumi:"pattern"`
	Substring *string `pulumi:"substring"`
	Url       *string `pulumi:"url"`
}

// GetMetricUrlInput is an input type that accepts GetMetricUrlArgs and GetMetricUrlOutput values.
// You can construct a concrete instance of `GetMetricUrlInput` via:
//
//	GetMetricUrlArgs{...}
type GetMetricUrlInput interface {
	pulumi.Input

	ToGetMetricUrlOutput() GetMetricUrlOutput
	ToGetMetricUrlOutputWithContext(context.Context) GetMetricUrlOutput
}

type GetMetricUrlArgs struct {
	// The metric type. Available choices are `click`, `custom`, and `pageview`.
	Kind      pulumi.StringInput    `pulumi:"kind"`
	Pattern   pulumi.StringPtrInput `pulumi:"pattern"`
	Substring pulumi.StringPtrInput `pulumi:"substring"`
	Url       pulumi.StringPtrInput `pulumi:"url"`
}

func (GetMetricUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetricUrl)(nil)).Elem()
}

func (i GetMetricUrlArgs) ToGetMetricUrlOutput() GetMetricUrlOutput {
	return i.ToGetMetricUrlOutputWithContext(context.Background())
}

func (i GetMetricUrlArgs) ToGetMetricUrlOutputWithContext(ctx context.Context) GetMetricUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetricUrlOutput)
}

// GetMetricUrlArrayInput is an input type that accepts GetMetricUrlArray and GetMetricUrlArrayOutput values.
// You can construct a concrete instance of `GetMetricUrlArrayInput` via:
//
//	GetMetricUrlArray{ GetMetricUrlArgs{...} }
type GetMetricUrlArrayInput interface {
	pulumi.Input

	ToGetMetricUrlArrayOutput() GetMetricUrlArrayOutput
	ToGetMetricUrlArrayOutputWithContext(context.Context) GetMetricUrlArrayOutput
}

type GetMetricUrlArray []GetMetricUrlInput

func (GetMetricUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetricUrl)(nil)).Elem()
}

func (i GetMetricUrlArray) ToGetMetricUrlArrayOutput() GetMetricUrlArrayOutput {
	return i.ToGetMetricUrlArrayOutputWithContext(context.Background())
}

func (i GetMetricUrlArray) ToGetMetricUrlArrayOutputWithContext(ctx context.Context) GetMetricUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMetricUrlArrayOutput)
}

type GetMetricUrlOutput struct{ *pulumi.OutputState }

func (GetMetricUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMetricUrl)(nil)).Elem()
}

func (o GetMetricUrlOutput) ToGetMetricUrlOutput() GetMetricUrlOutput {
	return o
}

func (o GetMetricUrlOutput) ToGetMetricUrlOutputWithContext(ctx context.Context) GetMetricUrlOutput {
	return o
}

// The metric type. Available choices are `click`, `custom`, and `pageview`.
func (o GetMetricUrlOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetMetricUrl) string { return v.Kind }).(pulumi.StringOutput)
}

func (o GetMetricUrlOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetricUrl) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

func (o GetMetricUrlOutput) Substring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetricUrl) *string { return v.Substring }).(pulumi.StringPtrOutput)
}

func (o GetMetricUrlOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMetricUrl) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GetMetricUrlArrayOutput struct{ *pulumi.OutputState }

func (GetMetricUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMetricUrl)(nil)).Elem()
}

func (o GetMetricUrlArrayOutput) ToGetMetricUrlArrayOutput() GetMetricUrlArrayOutput {
	return o
}

func (o GetMetricUrlArrayOutput) ToGetMetricUrlArrayOutputWithContext(ctx context.Context) GetMetricUrlArrayOutput {
	return o
}

func (o GetMetricUrlArrayOutput) Index(i pulumi.IntInput) GetMetricUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMetricUrl {
		return vs[0].([]GetMetricUrl)[vs[1].(int)]
	}).(GetMetricUrlOutput)
}

type GetProjectClientSideAvailability struct {
	// When set to true, the flags in this project are available to SDKs using the client-side ID by default.
	UsingEnvironmentId *bool `pulumi:"usingEnvironmentId"`
	// When set to true, the flags in this project are available to SDKs using a mobile key by default.
	UsingMobileKey *bool `pulumi:"usingMobileKey"`
}

// GetProjectClientSideAvailabilityInput is an input type that accepts GetProjectClientSideAvailabilityArgs and GetProjectClientSideAvailabilityOutput values.
// You can construct a concrete instance of `GetProjectClientSideAvailabilityInput` via:
//
//	GetProjectClientSideAvailabilityArgs{...}
type GetProjectClientSideAvailabilityInput interface {
	pulumi.Input

	ToGetProjectClientSideAvailabilityOutput() GetProjectClientSideAvailabilityOutput
	ToGetProjectClientSideAvailabilityOutputWithContext(context.Context) GetProjectClientSideAvailabilityOutput
}

type GetProjectClientSideAvailabilityArgs struct {
	// When set to true, the flags in this project are available to SDKs using the client-side ID by default.
	UsingEnvironmentId pulumi.BoolPtrInput `pulumi:"usingEnvironmentId"`
	// When set to true, the flags in this project are available to SDKs using a mobile key by default.
	UsingMobileKey pulumi.BoolPtrInput `pulumi:"usingMobileKey"`
}

func (GetProjectClientSideAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectClientSideAvailability)(nil)).Elem()
}

func (i GetProjectClientSideAvailabilityArgs) ToGetProjectClientSideAvailabilityOutput() GetProjectClientSideAvailabilityOutput {
	return i.ToGetProjectClientSideAvailabilityOutputWithContext(context.Background())
}

func (i GetProjectClientSideAvailabilityArgs) ToGetProjectClientSideAvailabilityOutputWithContext(ctx context.Context) GetProjectClientSideAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectClientSideAvailabilityOutput)
}

// GetProjectClientSideAvailabilityArrayInput is an input type that accepts GetProjectClientSideAvailabilityArray and GetProjectClientSideAvailabilityArrayOutput values.
// You can construct a concrete instance of `GetProjectClientSideAvailabilityArrayInput` via:
//
//	GetProjectClientSideAvailabilityArray{ GetProjectClientSideAvailabilityArgs{...} }
type GetProjectClientSideAvailabilityArrayInput interface {
	pulumi.Input

	ToGetProjectClientSideAvailabilityArrayOutput() GetProjectClientSideAvailabilityArrayOutput
	ToGetProjectClientSideAvailabilityArrayOutputWithContext(context.Context) GetProjectClientSideAvailabilityArrayOutput
}

type GetProjectClientSideAvailabilityArray []GetProjectClientSideAvailabilityInput

func (GetProjectClientSideAvailabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectClientSideAvailability)(nil)).Elem()
}

func (i GetProjectClientSideAvailabilityArray) ToGetProjectClientSideAvailabilityArrayOutput() GetProjectClientSideAvailabilityArrayOutput {
	return i.ToGetProjectClientSideAvailabilityArrayOutputWithContext(context.Background())
}

func (i GetProjectClientSideAvailabilityArray) ToGetProjectClientSideAvailabilityArrayOutputWithContext(ctx context.Context) GetProjectClientSideAvailabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectClientSideAvailabilityArrayOutput)
}

type GetProjectClientSideAvailabilityOutput struct{ *pulumi.OutputState }

func (GetProjectClientSideAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectClientSideAvailability)(nil)).Elem()
}

func (o GetProjectClientSideAvailabilityOutput) ToGetProjectClientSideAvailabilityOutput() GetProjectClientSideAvailabilityOutput {
	return o
}

func (o GetProjectClientSideAvailabilityOutput) ToGetProjectClientSideAvailabilityOutputWithContext(ctx context.Context) GetProjectClientSideAvailabilityOutput {
	return o
}

// When set to true, the flags in this project are available to SDKs using the client-side ID by default.
func (o GetProjectClientSideAvailabilityOutput) UsingEnvironmentId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProjectClientSideAvailability) *bool { return v.UsingEnvironmentId }).(pulumi.BoolPtrOutput)
}

// When set to true, the flags in this project are available to SDKs using a mobile key by default.
func (o GetProjectClientSideAvailabilityOutput) UsingMobileKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetProjectClientSideAvailability) *bool { return v.UsingMobileKey }).(pulumi.BoolPtrOutput)
}

type GetProjectClientSideAvailabilityArrayOutput struct{ *pulumi.OutputState }

func (GetProjectClientSideAvailabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectClientSideAvailability)(nil)).Elem()
}

func (o GetProjectClientSideAvailabilityArrayOutput) ToGetProjectClientSideAvailabilityArrayOutput() GetProjectClientSideAvailabilityArrayOutput {
	return o
}

func (o GetProjectClientSideAvailabilityArrayOutput) ToGetProjectClientSideAvailabilityArrayOutputWithContext(ctx context.Context) GetProjectClientSideAvailabilityArrayOutput {
	return o
}

func (o GetProjectClientSideAvailabilityArrayOutput) Index(i pulumi.IntInput) GetProjectClientSideAvailabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectClientSideAvailability {
		return vs[0].([]GetProjectClientSideAvailability)[vs[1].(int)]
	}).(GetProjectClientSideAvailabilityOutput)
}

type GetProjectDefaultClientSideAvailability struct {
	// When set to true, the flags in this project are available to SDKs using the client-side ID by default.
	UsingEnvironmentId bool `pulumi:"usingEnvironmentId"`
	// When set to true, the flags in this project are available to SDKs using a mobile key by default.
	UsingMobileKey bool `pulumi:"usingMobileKey"`
}

// GetProjectDefaultClientSideAvailabilityInput is an input type that accepts GetProjectDefaultClientSideAvailabilityArgs and GetProjectDefaultClientSideAvailabilityOutput values.
// You can construct a concrete instance of `GetProjectDefaultClientSideAvailabilityInput` via:
//
//	GetProjectDefaultClientSideAvailabilityArgs{...}
type GetProjectDefaultClientSideAvailabilityInput interface {
	pulumi.Input

	ToGetProjectDefaultClientSideAvailabilityOutput() GetProjectDefaultClientSideAvailabilityOutput
	ToGetProjectDefaultClientSideAvailabilityOutputWithContext(context.Context) GetProjectDefaultClientSideAvailabilityOutput
}

type GetProjectDefaultClientSideAvailabilityArgs struct {
	// When set to true, the flags in this project are available to SDKs using the client-side ID by default.
	UsingEnvironmentId pulumi.BoolInput `pulumi:"usingEnvironmentId"`
	// When set to true, the flags in this project are available to SDKs using a mobile key by default.
	UsingMobileKey pulumi.BoolInput `pulumi:"usingMobileKey"`
}

func (GetProjectDefaultClientSideAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (i GetProjectDefaultClientSideAvailabilityArgs) ToGetProjectDefaultClientSideAvailabilityOutput() GetProjectDefaultClientSideAvailabilityOutput {
	return i.ToGetProjectDefaultClientSideAvailabilityOutputWithContext(context.Background())
}

func (i GetProjectDefaultClientSideAvailabilityArgs) ToGetProjectDefaultClientSideAvailabilityOutputWithContext(ctx context.Context) GetProjectDefaultClientSideAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectDefaultClientSideAvailabilityOutput)
}

// GetProjectDefaultClientSideAvailabilityArrayInput is an input type that accepts GetProjectDefaultClientSideAvailabilityArray and GetProjectDefaultClientSideAvailabilityArrayOutput values.
// You can construct a concrete instance of `GetProjectDefaultClientSideAvailabilityArrayInput` via:
//
//	GetProjectDefaultClientSideAvailabilityArray{ GetProjectDefaultClientSideAvailabilityArgs{...} }
type GetProjectDefaultClientSideAvailabilityArrayInput interface {
	pulumi.Input

	ToGetProjectDefaultClientSideAvailabilityArrayOutput() GetProjectDefaultClientSideAvailabilityArrayOutput
	ToGetProjectDefaultClientSideAvailabilityArrayOutputWithContext(context.Context) GetProjectDefaultClientSideAvailabilityArrayOutput
}

type GetProjectDefaultClientSideAvailabilityArray []GetProjectDefaultClientSideAvailabilityInput

func (GetProjectDefaultClientSideAvailabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (i GetProjectDefaultClientSideAvailabilityArray) ToGetProjectDefaultClientSideAvailabilityArrayOutput() GetProjectDefaultClientSideAvailabilityArrayOutput {
	return i.ToGetProjectDefaultClientSideAvailabilityArrayOutputWithContext(context.Background())
}

func (i GetProjectDefaultClientSideAvailabilityArray) ToGetProjectDefaultClientSideAvailabilityArrayOutputWithContext(ctx context.Context) GetProjectDefaultClientSideAvailabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectDefaultClientSideAvailabilityArrayOutput)
}

type GetProjectDefaultClientSideAvailabilityOutput struct{ *pulumi.OutputState }

func (GetProjectDefaultClientSideAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (o GetProjectDefaultClientSideAvailabilityOutput) ToGetProjectDefaultClientSideAvailabilityOutput() GetProjectDefaultClientSideAvailabilityOutput {
	return o
}

func (o GetProjectDefaultClientSideAvailabilityOutput) ToGetProjectDefaultClientSideAvailabilityOutputWithContext(ctx context.Context) GetProjectDefaultClientSideAvailabilityOutput {
	return o
}

// When set to true, the flags in this project are available to SDKs using the client-side ID by default.
func (o GetProjectDefaultClientSideAvailabilityOutput) UsingEnvironmentId() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectDefaultClientSideAvailability) bool { return v.UsingEnvironmentId }).(pulumi.BoolOutput)
}

// When set to true, the flags in this project are available to SDKs using a mobile key by default.
func (o GetProjectDefaultClientSideAvailabilityOutput) UsingMobileKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectDefaultClientSideAvailability) bool { return v.UsingMobileKey }).(pulumi.BoolOutput)
}

type GetProjectDefaultClientSideAvailabilityArrayOutput struct{ *pulumi.OutputState }

func (GetProjectDefaultClientSideAvailabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectDefaultClientSideAvailability)(nil)).Elem()
}

func (o GetProjectDefaultClientSideAvailabilityArrayOutput) ToGetProjectDefaultClientSideAvailabilityArrayOutput() GetProjectDefaultClientSideAvailabilityArrayOutput {
	return o
}

func (o GetProjectDefaultClientSideAvailabilityArrayOutput) ToGetProjectDefaultClientSideAvailabilityArrayOutputWithContext(ctx context.Context) GetProjectDefaultClientSideAvailabilityArrayOutput {
	return o
}

func (o GetProjectDefaultClientSideAvailabilityArrayOutput) Index(i pulumi.IntInput) GetProjectDefaultClientSideAvailabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectDefaultClientSideAvailability {
		return vs[0].([]GetProjectDefaultClientSideAvailability)[vs[1].(int)]
	}).(GetProjectDefaultClientSideAvailabilityOutput)
}

type GetRelayProxyConfigurationPolicy struct {
	Actions []string `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the rule policy allows or denies access to the named resources and actions.
	Effect     string   `pulumi:"effect"`
	NotActions []string `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the rule policy does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources []string `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the rule policy applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources []string `pulumi:"resources"`
}

// GetRelayProxyConfigurationPolicyInput is an input type that accepts GetRelayProxyConfigurationPolicyArgs and GetRelayProxyConfigurationPolicyOutput values.
// You can construct a concrete instance of `GetRelayProxyConfigurationPolicyInput` via:
//
//	GetRelayProxyConfigurationPolicyArgs{...}
type GetRelayProxyConfigurationPolicyInput interface {
	pulumi.Input

	ToGetRelayProxyConfigurationPolicyOutput() GetRelayProxyConfigurationPolicyOutput
	ToGetRelayProxyConfigurationPolicyOutputWithContext(context.Context) GetRelayProxyConfigurationPolicyOutput
}

type GetRelayProxyConfigurationPolicyArgs struct {
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the rule policy allows or denies access to the named resources and actions.
	Effect     pulumi.StringInput      `pulumi:"effect"`
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the rule policy does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the rule policy applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (GetRelayProxyConfigurationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRelayProxyConfigurationPolicy)(nil)).Elem()
}

func (i GetRelayProxyConfigurationPolicyArgs) ToGetRelayProxyConfigurationPolicyOutput() GetRelayProxyConfigurationPolicyOutput {
	return i.ToGetRelayProxyConfigurationPolicyOutputWithContext(context.Background())
}

func (i GetRelayProxyConfigurationPolicyArgs) ToGetRelayProxyConfigurationPolicyOutputWithContext(ctx context.Context) GetRelayProxyConfigurationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRelayProxyConfigurationPolicyOutput)
}

// GetRelayProxyConfigurationPolicyArrayInput is an input type that accepts GetRelayProxyConfigurationPolicyArray and GetRelayProxyConfigurationPolicyArrayOutput values.
// You can construct a concrete instance of `GetRelayProxyConfigurationPolicyArrayInput` via:
//
//	GetRelayProxyConfigurationPolicyArray{ GetRelayProxyConfigurationPolicyArgs{...} }
type GetRelayProxyConfigurationPolicyArrayInput interface {
	pulumi.Input

	ToGetRelayProxyConfigurationPolicyArrayOutput() GetRelayProxyConfigurationPolicyArrayOutput
	ToGetRelayProxyConfigurationPolicyArrayOutputWithContext(context.Context) GetRelayProxyConfigurationPolicyArrayOutput
}

type GetRelayProxyConfigurationPolicyArray []GetRelayProxyConfigurationPolicyInput

func (GetRelayProxyConfigurationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRelayProxyConfigurationPolicy)(nil)).Elem()
}

func (i GetRelayProxyConfigurationPolicyArray) ToGetRelayProxyConfigurationPolicyArrayOutput() GetRelayProxyConfigurationPolicyArrayOutput {
	return i.ToGetRelayProxyConfigurationPolicyArrayOutputWithContext(context.Background())
}

func (i GetRelayProxyConfigurationPolicyArray) ToGetRelayProxyConfigurationPolicyArrayOutputWithContext(ctx context.Context) GetRelayProxyConfigurationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRelayProxyConfigurationPolicyArrayOutput)
}

type GetRelayProxyConfigurationPolicyOutput struct{ *pulumi.OutputState }

func (GetRelayProxyConfigurationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRelayProxyConfigurationPolicy)(nil)).Elem()
}

func (o GetRelayProxyConfigurationPolicyOutput) ToGetRelayProxyConfigurationPolicyOutput() GetRelayProxyConfigurationPolicyOutput {
	return o
}

func (o GetRelayProxyConfigurationPolicyOutput) ToGetRelayProxyConfigurationPolicyOutputWithContext(ctx context.Context) GetRelayProxyConfigurationPolicyOutput {
	return o
}

func (o GetRelayProxyConfigurationPolicyOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRelayProxyConfigurationPolicy) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Either `allow` or `deny`. This argument defines whether the rule policy allows or denies access to the named resources and actions.
func (o GetRelayProxyConfigurationPolicyOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v GetRelayProxyConfigurationPolicy) string { return v.Effect }).(pulumi.StringOutput)
}

func (o GetRelayProxyConfigurationPolicyOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRelayProxyConfigurationPolicy) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the rule policy does not apply. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o GetRelayProxyConfigurationPolicyOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRelayProxyConfigurationPolicy) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the rule policy applies. Either `resources` or `notResources` must be specified. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o GetRelayProxyConfigurationPolicyOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRelayProxyConfigurationPolicy) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type GetRelayProxyConfigurationPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRelayProxyConfigurationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRelayProxyConfigurationPolicy)(nil)).Elem()
}

func (o GetRelayProxyConfigurationPolicyArrayOutput) ToGetRelayProxyConfigurationPolicyArrayOutput() GetRelayProxyConfigurationPolicyArrayOutput {
	return o
}

func (o GetRelayProxyConfigurationPolicyArrayOutput) ToGetRelayProxyConfigurationPolicyArrayOutputWithContext(ctx context.Context) GetRelayProxyConfigurationPolicyArrayOutput {
	return o
}

func (o GetRelayProxyConfigurationPolicyArrayOutput) Index(i pulumi.IntInput) GetRelayProxyConfigurationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRelayProxyConfigurationPolicy {
		return vs[0].([]GetRelayProxyConfigurationPolicy)[vs[1].(int)]
	}).(GetRelayProxyConfigurationPolicyOutput)
}

type GetSegmentRule struct {
	// The attribute by which to group users together.
	BucketBy *string `pulumi:"bucketBy"`
	// List of nested custom rule clause blocks. To learn more, read Nested Clauses Blocks.
	Clauses []GetSegmentRuleClause `pulumi:"clauses"`
	// The integer weight of the rule (between 0 and 100000).
	Weight *int `pulumi:"weight"`
}

// GetSegmentRuleInput is an input type that accepts GetSegmentRuleArgs and GetSegmentRuleOutput values.
// You can construct a concrete instance of `GetSegmentRuleInput` via:
//
//	GetSegmentRuleArgs{...}
type GetSegmentRuleInput interface {
	pulumi.Input

	ToGetSegmentRuleOutput() GetSegmentRuleOutput
	ToGetSegmentRuleOutputWithContext(context.Context) GetSegmentRuleOutput
}

type GetSegmentRuleArgs struct {
	// The attribute by which to group users together.
	BucketBy pulumi.StringPtrInput `pulumi:"bucketBy"`
	// List of nested custom rule clause blocks. To learn more, read Nested Clauses Blocks.
	Clauses GetSegmentRuleClauseArrayInput `pulumi:"clauses"`
	// The integer weight of the rule (between 0 and 100000).
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (GetSegmentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSegmentRule)(nil)).Elem()
}

func (i GetSegmentRuleArgs) ToGetSegmentRuleOutput() GetSegmentRuleOutput {
	return i.ToGetSegmentRuleOutputWithContext(context.Background())
}

func (i GetSegmentRuleArgs) ToGetSegmentRuleOutputWithContext(ctx context.Context) GetSegmentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSegmentRuleOutput)
}

// GetSegmentRuleArrayInput is an input type that accepts GetSegmentRuleArray and GetSegmentRuleArrayOutput values.
// You can construct a concrete instance of `GetSegmentRuleArrayInput` via:
//
//	GetSegmentRuleArray{ GetSegmentRuleArgs{...} }
type GetSegmentRuleArrayInput interface {
	pulumi.Input

	ToGetSegmentRuleArrayOutput() GetSegmentRuleArrayOutput
	ToGetSegmentRuleArrayOutputWithContext(context.Context) GetSegmentRuleArrayOutput
}

type GetSegmentRuleArray []GetSegmentRuleInput

func (GetSegmentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSegmentRule)(nil)).Elem()
}

func (i GetSegmentRuleArray) ToGetSegmentRuleArrayOutput() GetSegmentRuleArrayOutput {
	return i.ToGetSegmentRuleArrayOutputWithContext(context.Background())
}

func (i GetSegmentRuleArray) ToGetSegmentRuleArrayOutputWithContext(ctx context.Context) GetSegmentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSegmentRuleArrayOutput)
}

type GetSegmentRuleOutput struct{ *pulumi.OutputState }

func (GetSegmentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSegmentRule)(nil)).Elem()
}

func (o GetSegmentRuleOutput) ToGetSegmentRuleOutput() GetSegmentRuleOutput {
	return o
}

func (o GetSegmentRuleOutput) ToGetSegmentRuleOutputWithContext(ctx context.Context) GetSegmentRuleOutput {
	return o
}

// The attribute by which to group users together.
func (o GetSegmentRuleOutput) BucketBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSegmentRule) *string { return v.BucketBy }).(pulumi.StringPtrOutput)
}

// List of nested custom rule clause blocks. To learn more, read Nested Clauses Blocks.
func (o GetSegmentRuleOutput) Clauses() GetSegmentRuleClauseArrayOutput {
	return o.ApplyT(func(v GetSegmentRule) []GetSegmentRuleClause { return v.Clauses }).(GetSegmentRuleClauseArrayOutput)
}

// The integer weight of the rule (between 0 and 100000).
func (o GetSegmentRuleOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSegmentRule) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type GetSegmentRuleArrayOutput struct{ *pulumi.OutputState }

func (GetSegmentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSegmentRule)(nil)).Elem()
}

func (o GetSegmentRuleArrayOutput) ToGetSegmentRuleArrayOutput() GetSegmentRuleArrayOutput {
	return o
}

func (o GetSegmentRuleArrayOutput) ToGetSegmentRuleArrayOutputWithContext(ctx context.Context) GetSegmentRuleArrayOutput {
	return o
}

func (o GetSegmentRuleArrayOutput) Index(i pulumi.IntInput) GetSegmentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSegmentRule {
		return vs[0].([]GetSegmentRule)[vs[1].(int)]
	}).(GetSegmentRuleOutput)
}

type GetSegmentRuleClause struct {
	// The user attribute operated on.
	Attribute string `pulumi:"attribute"`
	// Whether the rule clause is negated.
	Negate *bool `pulumi:"negate"`
	// The operator associated with the rule clause. This will be one of `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op string `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`.
	ValueType *string `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values []string `pulumi:"values"`
}

// GetSegmentRuleClauseInput is an input type that accepts GetSegmentRuleClauseArgs and GetSegmentRuleClauseOutput values.
// You can construct a concrete instance of `GetSegmentRuleClauseInput` via:
//
//	GetSegmentRuleClauseArgs{...}
type GetSegmentRuleClauseInput interface {
	pulumi.Input

	ToGetSegmentRuleClauseOutput() GetSegmentRuleClauseOutput
	ToGetSegmentRuleClauseOutputWithContext(context.Context) GetSegmentRuleClauseOutput
}

type GetSegmentRuleClauseArgs struct {
	// The user attribute operated on.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Whether the rule clause is negated.
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// The operator associated with the rule clause. This will be one of `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
	Op pulumi.StringInput `pulumi:"op"`
	// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`.
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
	// The list of values associated with the rule clause.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetSegmentRuleClauseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSegmentRuleClause)(nil)).Elem()
}

func (i GetSegmentRuleClauseArgs) ToGetSegmentRuleClauseOutput() GetSegmentRuleClauseOutput {
	return i.ToGetSegmentRuleClauseOutputWithContext(context.Background())
}

func (i GetSegmentRuleClauseArgs) ToGetSegmentRuleClauseOutputWithContext(ctx context.Context) GetSegmentRuleClauseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSegmentRuleClauseOutput)
}

// GetSegmentRuleClauseArrayInput is an input type that accepts GetSegmentRuleClauseArray and GetSegmentRuleClauseArrayOutput values.
// You can construct a concrete instance of `GetSegmentRuleClauseArrayInput` via:
//
//	GetSegmentRuleClauseArray{ GetSegmentRuleClauseArgs{...} }
type GetSegmentRuleClauseArrayInput interface {
	pulumi.Input

	ToGetSegmentRuleClauseArrayOutput() GetSegmentRuleClauseArrayOutput
	ToGetSegmentRuleClauseArrayOutputWithContext(context.Context) GetSegmentRuleClauseArrayOutput
}

type GetSegmentRuleClauseArray []GetSegmentRuleClauseInput

func (GetSegmentRuleClauseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSegmentRuleClause)(nil)).Elem()
}

func (i GetSegmentRuleClauseArray) ToGetSegmentRuleClauseArrayOutput() GetSegmentRuleClauseArrayOutput {
	return i.ToGetSegmentRuleClauseArrayOutputWithContext(context.Background())
}

func (i GetSegmentRuleClauseArray) ToGetSegmentRuleClauseArrayOutputWithContext(ctx context.Context) GetSegmentRuleClauseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSegmentRuleClauseArrayOutput)
}

type GetSegmentRuleClauseOutput struct{ *pulumi.OutputState }

func (GetSegmentRuleClauseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSegmentRuleClause)(nil)).Elem()
}

func (o GetSegmentRuleClauseOutput) ToGetSegmentRuleClauseOutput() GetSegmentRuleClauseOutput {
	return o
}

func (o GetSegmentRuleClauseOutput) ToGetSegmentRuleClauseOutputWithContext(ctx context.Context) GetSegmentRuleClauseOutput {
	return o
}

// The user attribute operated on.
func (o GetSegmentRuleClauseOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v GetSegmentRuleClause) string { return v.Attribute }).(pulumi.StringOutput)
}

// Whether the rule clause is negated.
func (o GetSegmentRuleClauseOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSegmentRuleClause) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// The operator associated with the rule clause. This will be one of `in`, `endsWith`, `startsWith`, `matches`, `contains`, `lessThan`, `lessThanOrEqual`, `greaterThanOrEqual`, `before`, `after`, `segmentMatch`, `semVerEqual`, `semVerLessThan`, and `semVerGreaterThan`.
func (o GetSegmentRuleClauseOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetSegmentRuleClause) string { return v.Op }).(pulumi.StringOutput)
}

// The type for each of the clause's values. Available types are `boolean`, `string`, and `number`.
func (o GetSegmentRuleClauseOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSegmentRuleClause) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

// The list of values associated with the rule clause.
func (o GetSegmentRuleClauseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSegmentRuleClause) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetSegmentRuleClauseArrayOutput struct{ *pulumi.OutputState }

func (GetSegmentRuleClauseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSegmentRuleClause)(nil)).Elem()
}

func (o GetSegmentRuleClauseArrayOutput) ToGetSegmentRuleClauseArrayOutput() GetSegmentRuleClauseArrayOutput {
	return o
}

func (o GetSegmentRuleClauseArrayOutput) ToGetSegmentRuleClauseArrayOutputWithContext(ctx context.Context) GetSegmentRuleClauseArrayOutput {
	return o
}

func (o GetSegmentRuleClauseArrayOutput) Index(i pulumi.IntInput) GetSegmentRuleClauseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSegmentRuleClause {
		return vs[0].([]GetSegmentRuleClause)[vs[1].(int)]
	}).(GetSegmentRuleClauseOutput)
}

type GetTeamMaintainer struct {
	Email     string `pulumi:"email"`
	FirstName string `pulumi:"firstName"`
	Id        string `pulumi:"id"`
	LastName  string `pulumi:"lastName"`
	Role      string `pulumi:"role"`
}

// GetTeamMaintainerInput is an input type that accepts GetTeamMaintainerArgs and GetTeamMaintainerOutput values.
// You can construct a concrete instance of `GetTeamMaintainerInput` via:
//
//	GetTeamMaintainerArgs{...}
type GetTeamMaintainerInput interface {
	pulumi.Input

	ToGetTeamMaintainerOutput() GetTeamMaintainerOutput
	ToGetTeamMaintainerOutputWithContext(context.Context) GetTeamMaintainerOutput
}

type GetTeamMaintainerArgs struct {
	Email     pulumi.StringInput `pulumi:"email"`
	FirstName pulumi.StringInput `pulumi:"firstName"`
	Id        pulumi.StringInput `pulumi:"id"`
	LastName  pulumi.StringInput `pulumi:"lastName"`
	Role      pulumi.StringInput `pulumi:"role"`
}

func (GetTeamMaintainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMaintainer)(nil)).Elem()
}

func (i GetTeamMaintainerArgs) ToGetTeamMaintainerOutput() GetTeamMaintainerOutput {
	return i.ToGetTeamMaintainerOutputWithContext(context.Background())
}

func (i GetTeamMaintainerArgs) ToGetTeamMaintainerOutputWithContext(ctx context.Context) GetTeamMaintainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMaintainerOutput)
}

// GetTeamMaintainerArrayInput is an input type that accepts GetTeamMaintainerArray and GetTeamMaintainerArrayOutput values.
// You can construct a concrete instance of `GetTeamMaintainerArrayInput` via:
//
//	GetTeamMaintainerArray{ GetTeamMaintainerArgs{...} }
type GetTeamMaintainerArrayInput interface {
	pulumi.Input

	ToGetTeamMaintainerArrayOutput() GetTeamMaintainerArrayOutput
	ToGetTeamMaintainerArrayOutputWithContext(context.Context) GetTeamMaintainerArrayOutput
}

type GetTeamMaintainerArray []GetTeamMaintainerInput

func (GetTeamMaintainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMaintainer)(nil)).Elem()
}

func (i GetTeamMaintainerArray) ToGetTeamMaintainerArrayOutput() GetTeamMaintainerArrayOutput {
	return i.ToGetTeamMaintainerArrayOutputWithContext(context.Background())
}

func (i GetTeamMaintainerArray) ToGetTeamMaintainerArrayOutputWithContext(ctx context.Context) GetTeamMaintainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMaintainerArrayOutput)
}

type GetTeamMaintainerOutput struct{ *pulumi.OutputState }

func (GetTeamMaintainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMaintainer)(nil)).Elem()
}

func (o GetTeamMaintainerOutput) ToGetTeamMaintainerOutput() GetTeamMaintainerOutput {
	return o
}

func (o GetTeamMaintainerOutput) ToGetTeamMaintainerOutputWithContext(ctx context.Context) GetTeamMaintainerOutput {
	return o
}

func (o GetTeamMaintainerOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMaintainer) string { return v.Email }).(pulumi.StringOutput)
}

func (o GetTeamMaintainerOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMaintainer) string { return v.FirstName }).(pulumi.StringOutput)
}

func (o GetTeamMaintainerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMaintainer) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTeamMaintainerOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMaintainer) string { return v.LastName }).(pulumi.StringOutput)
}

func (o GetTeamMaintainerOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMaintainer) string { return v.Role }).(pulumi.StringOutput)
}

type GetTeamMaintainerArrayOutput struct{ *pulumi.OutputState }

func (GetTeamMaintainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMaintainer)(nil)).Elem()
}

func (o GetTeamMaintainerArrayOutput) ToGetTeamMaintainerArrayOutput() GetTeamMaintainerArrayOutput {
	return o
}

func (o GetTeamMaintainerArrayOutput) ToGetTeamMaintainerArrayOutputWithContext(ctx context.Context) GetTeamMaintainerArrayOutput {
	return o
}

func (o GetTeamMaintainerArrayOutput) Index(i pulumi.IntInput) GetTeamMaintainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamMaintainer {
		return vs[0].([]GetTeamMaintainer)[vs[1].(int)]
	}).(GetTeamMaintainerOutput)
}

type GetWebhookStatement struct {
	Actions []string `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect     string   `pulumi:"effect"`
	NotActions []string `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources []string `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources []string `pulumi:"resources"`
}

// GetWebhookStatementInput is an input type that accepts GetWebhookStatementArgs and GetWebhookStatementOutput values.
// You can construct a concrete instance of `GetWebhookStatementInput` via:
//
//	GetWebhookStatementArgs{...}
type GetWebhookStatementInput interface {
	pulumi.Input

	ToGetWebhookStatementOutput() GetWebhookStatementOutput
	ToGetWebhookStatementOutputWithContext(context.Context) GetWebhookStatementOutput
}

type GetWebhookStatementArgs struct {
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
	Effect     pulumi.StringInput      `pulumi:"effect"`
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// The list of resource specifiers defining the resources to which the statement does not apply. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	NotResources pulumi.StringArrayInput `pulumi:"notResources"`
	// The list of resource specifiers defining the resources to which the statement applies. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
	Resources pulumi.StringArrayInput `pulumi:"resources"`
}

func (GetWebhookStatementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhookStatement)(nil)).Elem()
}

func (i GetWebhookStatementArgs) ToGetWebhookStatementOutput() GetWebhookStatementOutput {
	return i.ToGetWebhookStatementOutputWithContext(context.Background())
}

func (i GetWebhookStatementArgs) ToGetWebhookStatementOutputWithContext(ctx context.Context) GetWebhookStatementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhookStatementOutput)
}

// GetWebhookStatementArrayInput is an input type that accepts GetWebhookStatementArray and GetWebhookStatementArrayOutput values.
// You can construct a concrete instance of `GetWebhookStatementArrayInput` via:
//
//	GetWebhookStatementArray{ GetWebhookStatementArgs{...} }
type GetWebhookStatementArrayInput interface {
	pulumi.Input

	ToGetWebhookStatementArrayOutput() GetWebhookStatementArrayOutput
	ToGetWebhookStatementArrayOutputWithContext(context.Context) GetWebhookStatementArrayOutput
}

type GetWebhookStatementArray []GetWebhookStatementInput

func (GetWebhookStatementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhookStatement)(nil)).Elem()
}

func (i GetWebhookStatementArray) ToGetWebhookStatementArrayOutput() GetWebhookStatementArrayOutput {
	return i.ToGetWebhookStatementArrayOutputWithContext(context.Background())
}

func (i GetWebhookStatementArray) ToGetWebhookStatementArrayOutputWithContext(ctx context.Context) GetWebhookStatementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebhookStatementArrayOutput)
}

type GetWebhookStatementOutput struct{ *pulumi.OutputState }

func (GetWebhookStatementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebhookStatement)(nil)).Elem()
}

func (o GetWebhookStatementOutput) ToGetWebhookStatementOutput() GetWebhookStatementOutput {
	return o
}

func (o GetWebhookStatementOutput) ToGetWebhookStatementOutputWithContext(ctx context.Context) GetWebhookStatementOutput {
	return o
}

func (o GetWebhookStatementOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebhookStatement) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Either `allow` or `deny`. This argument defines whether the statement allows or denies access to the named resources and actions.
func (o GetWebhookStatementOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebhookStatement) string { return v.Effect }).(pulumi.StringOutput)
}

func (o GetWebhookStatementOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebhookStatement) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement does not apply. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o GetWebhookStatementOutput) NotResources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebhookStatement) []string { return v.NotResources }).(pulumi.StringArrayOutput)
}

// The list of resource specifiers defining the resources to which the statement applies. For a list of available resources read [Understanding resource types and scopes](https://docs.launchdarkly.com/home/account-security/custom-roles/resources#understanding-resource-types-and-scopes).
func (o GetWebhookStatementOutput) Resources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebhookStatement) []string { return v.Resources }).(pulumi.StringArrayOutput)
}

type GetWebhookStatementArrayOutput struct{ *pulumi.OutputState }

func (GetWebhookStatementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebhookStatement)(nil)).Elem()
}

func (o GetWebhookStatementArrayOutput) ToGetWebhookStatementArrayOutput() GetWebhookStatementArrayOutput {
	return o
}

func (o GetWebhookStatementArrayOutput) ToGetWebhookStatementArrayOutputWithContext(ctx context.Context) GetWebhookStatementArrayOutput {
	return o
}

func (o GetWebhookStatementArrayOutput) Index(i pulumi.IntInput) GetWebhookStatementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebhookStatement {
		return vs[0].([]GetWebhookStatement)[vs[1].(int)]
	}).(GetWebhookStatementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenInlineRoleInput)(nil)).Elem(), AccessTokenInlineRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenInlineRoleArrayInput)(nil)).Elem(), AccessTokenInlineRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenPolicyStatementInput)(nil)).Elem(), AccessTokenPolicyStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessTokenPolicyStatementArrayInput)(nil)).Elem(), AccessTokenPolicyStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogSubscriptionStatementInput)(nil)).Elem(), AuditLogSubscriptionStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogSubscriptionStatementArrayInput)(nil)).Elem(), AuditLogSubscriptionStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomRolePolicyInput)(nil)).Elem(), CustomRolePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomRolePolicyArrayInput)(nil)).Elem(), CustomRolePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomRolePolicyStatementInput)(nil)).Elem(), CustomRolePolicyStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomRolePolicyStatementArrayInput)(nil)).Elem(), CustomRolePolicyStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentApprovalSettingInput)(nil)).Elem(), EnvironmentApprovalSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentApprovalSettingArrayInput)(nil)).Elem(), EnvironmentApprovalSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagClientSideAvailabilityInput)(nil)).Elem(), FeatureFlagClientSideAvailabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagClientSideAvailabilityArrayInput)(nil)).Elem(), FeatureFlagClientSideAvailabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagCustomPropertyInput)(nil)).Elem(), FeatureFlagCustomPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagCustomPropertyArrayInput)(nil)).Elem(), FeatureFlagCustomPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagDefaultsInput)(nil)).Elem(), FeatureFlagDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagDefaultsPtrInput)(nil)).Elem(), FeatureFlagDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentFallthroughInput)(nil)).Elem(), FeatureFlagEnvironmentFallthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentFallthroughPtrInput)(nil)).Elem(), FeatureFlagEnvironmentFallthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentPrerequisiteInput)(nil)).Elem(), FeatureFlagEnvironmentPrerequisiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentPrerequisiteArrayInput)(nil)).Elem(), FeatureFlagEnvironmentPrerequisiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentRuleInput)(nil)).Elem(), FeatureFlagEnvironmentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentRuleArrayInput)(nil)).Elem(), FeatureFlagEnvironmentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentRuleClauseInput)(nil)).Elem(), FeatureFlagEnvironmentRuleClauseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentRuleClauseArrayInput)(nil)).Elem(), FeatureFlagEnvironmentRuleClauseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentTargetInput)(nil)).Elem(), FeatureFlagEnvironmentTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagEnvironmentTargetArrayInput)(nil)).Elem(), FeatureFlagEnvironmentTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagVariationInput)(nil)).Elem(), FeatureFlagVariationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureFlagVariationArrayInput)(nil)).Elem(), FeatureFlagVariationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlagTriggerInstructionsInput)(nil)).Elem(), FlagTriggerInstructionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlagTriggerInstructionsPtrInput)(nil)).Elem(), FlagTriggerInstructionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricUrlInput)(nil)).Elem(), MetricUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetricUrlArrayInput)(nil)).Elem(), MetricUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultClientSideAvailabilityInput)(nil)).Elem(), ProjectDefaultClientSideAvailabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultClientSideAvailabilityArrayInput)(nil)).Elem(), ProjectDefaultClientSideAvailabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentInput)(nil)).Elem(), ProjectEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentArrayInput)(nil)).Elem(), ProjectEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentApprovalSettingInput)(nil)).Elem(), ProjectEnvironmentApprovalSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectEnvironmentApprovalSettingArrayInput)(nil)).Elem(), ProjectEnvironmentApprovalSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelayProxyConfigurationPolicyInput)(nil)).Elem(), RelayProxyConfigurationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RelayProxyConfigurationPolicyArrayInput)(nil)).Elem(), RelayProxyConfigurationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentRuleInput)(nil)).Elem(), SegmentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentRuleArrayInput)(nil)).Elem(), SegmentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentRuleClauseInput)(nil)).Elem(), SegmentRuleClauseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentRuleClauseArrayInput)(nil)).Elem(), SegmentRuleClauseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookStatementInput)(nil)).Elem(), WebhookStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookStatementArrayInput)(nil)).Elem(), WebhookStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuditLogSubscriptionStatementInput)(nil)).Elem(), GetAuditLogSubscriptionStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuditLogSubscriptionStatementArrayInput)(nil)).Elem(), GetAuditLogSubscriptionStatementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentApprovalSettingInput)(nil)).Elem(), GetEnvironmentApprovalSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentApprovalSettingArrayInput)(nil)).Elem(), GetEnvironmentApprovalSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagClientSideAvailabilityInput)(nil)).Elem(), GetFeatureFlagClientSideAvailabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagClientSideAvailabilityArrayInput)(nil)).Elem(), GetFeatureFlagClientSideAvailabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagCustomPropertyInput)(nil)).Elem(), GetFeatureFlagCustomPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagCustomPropertyArrayInput)(nil)).Elem(), GetFeatureFlagCustomPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagDefaultsInput)(nil)).Elem(), GetFeatureFlagDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagDefaultsPtrInput)(nil)).Elem(), GetFeatureFlagDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentFallthroughInput)(nil)).Elem(), GetFeatureFlagEnvironmentFallthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentFallthroughPtrInput)(nil)).Elem(), GetFeatureFlagEnvironmentFallthroughArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentPrerequisiteInput)(nil)).Elem(), GetFeatureFlagEnvironmentPrerequisiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentPrerequisiteArrayInput)(nil)).Elem(), GetFeatureFlagEnvironmentPrerequisiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentRuleInput)(nil)).Elem(), GetFeatureFlagEnvironmentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentRuleArrayInput)(nil)).Elem(), GetFeatureFlagEnvironmentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentRuleClauseInput)(nil)).Elem(), GetFeatureFlagEnvironmentRuleClauseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentRuleClauseArrayInput)(nil)).Elem(), GetFeatureFlagEnvironmentRuleClauseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentTargetInput)(nil)).Elem(), GetFeatureFlagEnvironmentTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagEnvironmentTargetArrayInput)(nil)).Elem(), GetFeatureFlagEnvironmentTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagVariationInput)(nil)).Elem(), GetFeatureFlagVariationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFeatureFlagVariationArrayInput)(nil)).Elem(), GetFeatureFlagVariationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlagTriggerInstructionsInput)(nil)).Elem(), GetFlagTriggerInstructionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlagTriggerInstructionsPtrInput)(nil)).Elem(), GetFlagTriggerInstructionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetricUrlInput)(nil)).Elem(), GetMetricUrlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMetricUrlArrayInput)(nil)).Elem(), GetMetricUrlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectClientSideAvailabilityInput)(nil)).Elem(), GetProjectClientSideAvailabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectClientSideAvailabilityArrayInput)(nil)).Elem(), GetProjectClientSideAvailabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectDefaultClientSideAvailabilityInput)(nil)).Elem(), GetProjectDefaultClientSideAvailabilityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectDefaultClientSideAvailabilityArrayInput)(nil)).Elem(), GetProjectDefaultClientSideAvailabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRelayProxyConfigurationPolicyInput)(nil)).Elem(), GetRelayProxyConfigurationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRelayProxyConfigurationPolicyArrayInput)(nil)).Elem(), GetRelayProxyConfigurationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSegmentRuleInput)(nil)).Elem(), GetSegmentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSegmentRuleArrayInput)(nil)).Elem(), GetSegmentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSegmentRuleClauseInput)(nil)).Elem(), GetSegmentRuleClauseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSegmentRuleClauseArrayInput)(nil)).Elem(), GetSegmentRuleClauseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMaintainerInput)(nil)).Elem(), GetTeamMaintainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMaintainerArrayInput)(nil)).Elem(), GetTeamMaintainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhookStatementInput)(nil)).Elem(), GetWebhookStatementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebhookStatementArrayInput)(nil)).Elem(), GetWebhookStatementArray{})
	pulumi.RegisterOutputType(AccessTokenInlineRoleOutput{})
	pulumi.RegisterOutputType(AccessTokenInlineRoleArrayOutput{})
	pulumi.RegisterOutputType(AccessTokenPolicyStatementOutput{})
	pulumi.RegisterOutputType(AccessTokenPolicyStatementArrayOutput{})
	pulumi.RegisterOutputType(AuditLogSubscriptionStatementOutput{})
	pulumi.RegisterOutputType(AuditLogSubscriptionStatementArrayOutput{})
	pulumi.RegisterOutputType(CustomRolePolicyOutput{})
	pulumi.RegisterOutputType(CustomRolePolicyArrayOutput{})
	pulumi.RegisterOutputType(CustomRolePolicyStatementOutput{})
	pulumi.RegisterOutputType(CustomRolePolicyStatementArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentApprovalSettingOutput{})
	pulumi.RegisterOutputType(EnvironmentApprovalSettingArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagClientSideAvailabilityOutput{})
	pulumi.RegisterOutputType(FeatureFlagClientSideAvailabilityArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagCustomPropertyOutput{})
	pulumi.RegisterOutputType(FeatureFlagCustomPropertyArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagDefaultsOutput{})
	pulumi.RegisterOutputType(FeatureFlagDefaultsPtrOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentFallthroughOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentFallthroughPtrOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentPrerequisiteOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentPrerequisiteArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentRuleOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentRuleArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentRuleClauseOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentRuleClauseArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentTargetOutput{})
	pulumi.RegisterOutputType(FeatureFlagEnvironmentTargetArrayOutput{})
	pulumi.RegisterOutputType(FeatureFlagVariationOutput{})
	pulumi.RegisterOutputType(FeatureFlagVariationArrayOutput{})
	pulumi.RegisterOutputType(FlagTriggerInstructionsOutput{})
	pulumi.RegisterOutputType(FlagTriggerInstructionsPtrOutput{})
	pulumi.RegisterOutputType(MetricUrlOutput{})
	pulumi.RegisterOutputType(MetricUrlArrayOutput{})
	pulumi.RegisterOutputType(ProjectDefaultClientSideAvailabilityOutput{})
	pulumi.RegisterOutputType(ProjectDefaultClientSideAvailabilityArrayOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentApprovalSettingOutput{})
	pulumi.RegisterOutputType(ProjectEnvironmentApprovalSettingArrayOutput{})
	pulumi.RegisterOutputType(RelayProxyConfigurationPolicyOutput{})
	pulumi.RegisterOutputType(RelayProxyConfigurationPolicyArrayOutput{})
	pulumi.RegisterOutputType(SegmentRuleOutput{})
	pulumi.RegisterOutputType(SegmentRuleArrayOutput{})
	pulumi.RegisterOutputType(SegmentRuleClauseOutput{})
	pulumi.RegisterOutputType(SegmentRuleClauseArrayOutput{})
	pulumi.RegisterOutputType(WebhookStatementOutput{})
	pulumi.RegisterOutputType(WebhookStatementArrayOutput{})
	pulumi.RegisterOutputType(GetAuditLogSubscriptionStatementOutput{})
	pulumi.RegisterOutputType(GetAuditLogSubscriptionStatementArrayOutput{})
	pulumi.RegisterOutputType(GetEnvironmentApprovalSettingOutput{})
	pulumi.RegisterOutputType(GetEnvironmentApprovalSettingArrayOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagClientSideAvailabilityOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagClientSideAvailabilityArrayOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagCustomPropertyOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagCustomPropertyArrayOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagDefaultsOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagDefaultsPtrOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentFallthroughOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentFallthroughPtrOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentPrerequisiteOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentPrerequisiteArrayOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentRuleOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentRuleArrayOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentRuleClauseOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentRuleClauseArrayOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentTargetOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagEnvironmentTargetArrayOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagVariationOutput{})
	pulumi.RegisterOutputType(GetFeatureFlagVariationArrayOutput{})
	pulumi.RegisterOutputType(GetFlagTriggerInstructionsOutput{})
	pulumi.RegisterOutputType(GetFlagTriggerInstructionsPtrOutput{})
	pulumi.RegisterOutputType(GetMetricUrlOutput{})
	pulumi.RegisterOutputType(GetMetricUrlArrayOutput{})
	pulumi.RegisterOutputType(GetProjectClientSideAvailabilityOutput{})
	pulumi.RegisterOutputType(GetProjectClientSideAvailabilityArrayOutput{})
	pulumi.RegisterOutputType(GetProjectDefaultClientSideAvailabilityOutput{})
	pulumi.RegisterOutputType(GetProjectDefaultClientSideAvailabilityArrayOutput{})
	pulumi.RegisterOutputType(GetRelayProxyConfigurationPolicyOutput{})
	pulumi.RegisterOutputType(GetRelayProxyConfigurationPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetSegmentRuleOutput{})
	pulumi.RegisterOutputType(GetSegmentRuleArrayOutput{})
	pulumi.RegisterOutputType(GetSegmentRuleClauseOutput{})
	pulumi.RegisterOutputType(GetSegmentRuleClauseArrayOutput{})
	pulumi.RegisterOutputType(GetTeamMaintainerOutput{})
	pulumi.RegisterOutputType(GetTeamMaintainerArrayOutput{})
	pulumi.RegisterOutputType(GetWebhookStatementOutput{})
	pulumi.RegisterOutputType(GetWebhookStatementArrayOutput{})
}
