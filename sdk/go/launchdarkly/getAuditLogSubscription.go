// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package launchdarkly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a LaunchDarkly audit log subscription data source.
//
// This data source allows you to retrieve information about LaunchDarkly audit log subscriptions.
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-launchdarkly/sdk/go/launchdarkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err = launchdarkly.LookupAuditLogSubscription(ctx, &launchdarkly.LookupAuditLogSubscriptionArgs{
//				Id:             "5f0cd446a77cba0b4c5644a7",
//				IntegrationKey: "msteams",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAuditLogSubscription(ctx *pulumi.Context, args *LookupAuditLogSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupAuditLogSubscriptionResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupAuditLogSubscriptionResult
	err := ctx.Invoke("launchdarkly:index/getAuditLogSubscription:getAuditLogSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAuditLogSubscription.
type LookupAuditLogSubscriptionArgs struct {
	// A block of configuration fields associated with your integration type.
	Config map[string]interface{} `pulumi:"config"`
	// The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
	Id string `pulumi:"id"`
	// The integration key. As of February 2022, supported integrations are `"datadog"`, `"dynatrace"`, `"elastic"`, `"honeycomb"`, `"logdna"`, `"msteams"`, `"new-relic-apm"`, `"signalfx"`, `"slack"`, and `"splunk"`.
	IntegrationKey string `pulumi:"integrationKey"`
	// The subscription's human-readable name.
	Name *string `pulumi:"name"`
	// Whether the subscription is enabled.
	On *bool `pulumi:"on"`
	// The statement block used to filter subscription events. To learn more, read Statement Blocks.
	Statements []GetAuditLogSubscriptionStatement `pulumi:"statements"`
	// Set of tags associated with the subscription.
	Tags []string `pulumi:"tags"`
}

// A collection of values returned by getAuditLogSubscription.
type LookupAuditLogSubscriptionResult struct {
	// A block of configuration fields associated with your integration type.
	Config         map[string]interface{} `pulumi:"config"`
	Id             string                 `pulumi:"id"`
	IntegrationKey string                 `pulumi:"integrationKey"`
	// The subscription's human-readable name.
	Name *string `pulumi:"name"`
	// Whether the subscription is enabled.
	On *bool `pulumi:"on"`
	// The statement block used to filter subscription events. To learn more, read Statement Blocks.
	Statements []GetAuditLogSubscriptionStatement `pulumi:"statements"`
	// Set of tags associated with the subscription.
	Tags []string `pulumi:"tags"`
}

func LookupAuditLogSubscriptionOutput(ctx *pulumi.Context, args LookupAuditLogSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupAuditLogSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAuditLogSubscriptionResult, error) {
			args := v.(LookupAuditLogSubscriptionArgs)
			r, err := LookupAuditLogSubscription(ctx, &args, opts...)
			var s LookupAuditLogSubscriptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAuditLogSubscriptionResultOutput)
}

// A collection of arguments for invoking getAuditLogSubscription.
type LookupAuditLogSubscriptionOutputArgs struct {
	// A block of configuration fields associated with your integration type.
	Config pulumi.MapInput `pulumi:"config"`
	// The unique subscription ID. This can be found in the URL of the pull-out configuration sidebar for the given subscription on your [LaunchDarkly Integrations page](https://app.launchdarkly.com/default/integrations).
	Id pulumi.StringInput `pulumi:"id"`
	// The integration key. As of February 2022, supported integrations are `"datadog"`, `"dynatrace"`, `"elastic"`, `"honeycomb"`, `"logdna"`, `"msteams"`, `"new-relic-apm"`, `"signalfx"`, `"slack"`, and `"splunk"`.
	IntegrationKey pulumi.StringInput `pulumi:"integrationKey"`
	// The subscription's human-readable name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Whether the subscription is enabled.
	On pulumi.BoolPtrInput `pulumi:"on"`
	// The statement block used to filter subscription events. To learn more, read Statement Blocks.
	Statements GetAuditLogSubscriptionStatementArrayInput `pulumi:"statements"`
	// Set of tags associated with the subscription.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (LookupAuditLogSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuditLogSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getAuditLogSubscription.
type LookupAuditLogSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupAuditLogSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAuditLogSubscriptionResult)(nil)).Elem()
}

func (o LookupAuditLogSubscriptionResultOutput) ToLookupAuditLogSubscriptionResultOutput() LookupAuditLogSubscriptionResultOutput {
	return o
}

func (o LookupAuditLogSubscriptionResultOutput) ToLookupAuditLogSubscriptionResultOutputWithContext(ctx context.Context) LookupAuditLogSubscriptionResultOutput {
	return o
}

// A block of configuration fields associated with your integration type.
func (o LookupAuditLogSubscriptionResultOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

func (o LookupAuditLogSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupAuditLogSubscriptionResultOutput) IntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) string { return v.IntegrationKey }).(pulumi.StringOutput)
}

// The subscription's human-readable name.
func (o LookupAuditLogSubscriptionResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Whether the subscription is enabled.
func (o LookupAuditLogSubscriptionResultOutput) On() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) *bool { return v.On }).(pulumi.BoolPtrOutput)
}

// The statement block used to filter subscription events. To learn more, read Statement Blocks.
func (o LookupAuditLogSubscriptionResultOutput) Statements() GetAuditLogSubscriptionStatementArrayOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) []GetAuditLogSubscriptionStatement { return v.Statements }).(GetAuditLogSubscriptionStatementArrayOutput)
}

// Set of tags associated with the subscription.
func (o LookupAuditLogSubscriptionResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAuditLogSubscriptionResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAuditLogSubscriptionResultOutput{})
}
